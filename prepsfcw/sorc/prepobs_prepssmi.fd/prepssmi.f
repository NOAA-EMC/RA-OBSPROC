C$$$  MAIN PROGRAM DOCUMENTATION BLOCK
C
C MAIN PROGRAM: PREPOBS_PREPSSMI
C   PRGMMR: DONG             ORG: NP22        DATE: 2020-08-20
C
C ABSTRACT: READS SSM/I SCAN LINES FROM NCEP SSM/I BUFR DUMP FILE
C   (EITHER DERIVED PRODUCTS FILE OR BRIGHTNESS TEMPERATURE FILE) AND
C   UNPACKS 64 RETRIEVALS FROM EACH SCAN.  SUPEROBS ALL DATUM OF THE
C   SAME TYPE (OPTIONAL), AND REPROCESSES EACH UNIQUE RETRIEVAL INTO
C   AN OUTPUT BUFR FILE FOR USE BY PROGRAM PREPOBS_PREPDATA.
C      RETRIEVALS FROM THE INPUT PRODUCTS FILE CAN INCLUDE ANY OR ALL
C   OF: OCEANIC SURFACE WIND SPEED, OCEANIC PRECIPITABLE WATER,
C   RAINFALL RATE, OVERLAND SURFACE TEMPERATURE, OCEANIC SEA-SURFACE
C   TEMPERATURE, OCEANIC CLOUD WATER, SOIL MOISTURE AND SNOW DEPTH
C   WHERE EACH PRODUCT FILLS A UNIQUE REPORT IN OUTPUT FILE; AND
C   POSSIBLY ALSO A SET OF ADDITIONAL PRODUCTS (SURFACE TAG, ICE
C   CONCENTRATION, ICE AGE, ICE EDGE AND CALCULATED SURFACE TYPE)
C   WHICH TOGETHER FILL A REPORT IN OUTPUT FILE.  THIS LATTER SET OF
C   PRODUCTS IS NOT AVAILABLE FOR SUPEROBING.  IF THE INPUT PRODUCTS
C   FILE IS FROM FNOC, ALL OF THE ABOVE PRODUCTS ARE NORMALLY
C   AVAILABLE EXCEPT FOR OCEANIC SEA-SURFACE TEMPERATURE.  IF IT IS
C   AN NCEP PRODUCTS FILE, MOST LIKELY ONLY WIND SPEED, TPW, CLOUD
C   WATER AND SEA-SURFACE TEMPERATURE ALONG WITH SURFACE TAG, WILL BE
C   AVAILABLE.
C      FROM THE INPUT BRIGHTNESS TEMPERATURE FILE, BRIGHTNESS
C   TEMPERATURES FROM SEVEN CHANNELS ARE AVAILABLE IN ADDITION TO
C   WIND SPEED PRODUCT CALCULATED IN-LINE (IN SUBROUTINE W3MISCAN)
C   VIA EITHER THE GOODBERLET ALGORITHM AND/OR THE "LATEST" VERSION
C   OF THE NEURAL NET ALGORITHM, AND OCEANIC PRECIPITABLE WATER
C   PRODUCT CALCULATED IN-LINE (IN SUBROUTINE W3MISCAN) VIA THE SAME
C   NEURAL NET ALGORITHM.
C      FOR INPUT PRODUCTS FILE, THIS PROGRAM CAN SELECT ANY OR ALL
C   COMBINATIONS OF PRODUCTS PROVIDED THEY ARE AVAILABLE (EXCEPT FOR
C   ADDITIONAL PRODUCTS WHERE IT'S ALL OR NONE).  FOR INPUT BRIGHTNESS
C   TEMPERATURE FILE, THE IN-LINE CALCULATED WIND SPEED AND TPW MUST
C   ALWAYS BE FROM THE SAME ALOGIRITHM (I.E., USER CAN'T REQUEST WIND
C   SPEED FROM GOODBERLET ALG. AND TPW FROM LATEST NN ALG.).
C      USER CAN SELECT FROM ANY OR ALL COMBINATIONS OF VALID DMSP
C   SSM/I SATELLITE IDS.  THE OPTIONAL SUPEROBING OF DATUM IS BASED
C   ON A LINEAR AVERAGE OF THE DATUM OVER A USER-SPECIFIED LATITUDE/
C   LONGITUDE BOX.  FOR INPUT FROM BRIGHTNESS TEMPERATURE FILE,
C   IN-LINE PRODUCTS AND BRIGHTNESS TEMPERATURES CANNOT BOTH BE
C   SUPEROED IN A SINGLE RUNNING OF THIS PROGRAM.  OBVIOUSLY, ALSO
C   PRODUCTS FROM INPUT PRODUCTS FILE AND BRIGHTNESS TEMPS FROM
C   INPUT BRIGHTNESS TEMP FILE CAN'T BE SUPEROBED IN A SINGLE
C   RUNNING OF THIS PROGRAM SINCE IT CAN ONLY INPUT ONE OF THE TYPES
C   OF FILES IN A SINGLE RUNNING.
C      USER-SPECIFIED SWITCHES ALLOW RETRIEVALS TO BE SELECTED BY
C   TIME (CENTER TIME AND TIME-WINDOW), BY LOCATION (LAT/LON BOUNDARY
C   FOR DOMAIN), AND BY QUALITY (SEE "NAMELIST" CONTENTS IN COMMENTS
C   FOLLOWING THIS DOCBLOCK).  ALL SUPEROBS STORE NUMBER OF
C   INDIVIDUAL RETRIEVALS THAT WENT INTO MAKING THE SUPEROB.  FOR
C   INDIVIDUAL (NON-SUPEROBED) WIND SPEED PRODUCT RETRIEVALS, THE
C   QUALITY MARK (RAIN FLAG) IS STORED IN THE OUTPUT FILE.  FOR
C   ALL INDIVIDUAL (NON-SUPEROBED) DATA, SATELLITE ID, ORBIT NUMBER,
C   SCAN NUMBER AND POSITION NUMBER ARE STORED IN THE OUTPUT BUFR
C   FILE.
C
C PROGRAM HISTORY LOG:
C 1994-04-12  D. A. KEYSER (NMC22) -- ORIGINAL AUTHOR, REPLACED
C        PREVIOUS VERSION WHICH READ FROM NON-OPERATIONAL NESDIS
C        ORBIT-BY-ORBIT DATA SETS
C 1994-09-06  D. A. KEYSER (NMC22) -- N-LIST SWITCH 'IWINDO' CHANGED
C        FROM WHOLE HOURS TO (HOURS * 100) + MINUTES (FRACTION OF
C        WHOLE HOUR NOW POSSIBLE); IN ORDER TO GET REGION SIZE DOWN
C        BELOW NAS LIMIT OF 9999K BYTES, COMBINED LATITUDE AND
C        LONGITUDE IN NEW STORAGE ARRAY "IPKDTA" (REPLACED "SUMLAT"
C        AND "SUMLON" STORAGE ARRAYS), EACH HELD IN 16-BITS; INCR.
C        NUMBER OF PRODUCTS THAT STORAGE ARRAYS CAN HOLD FROM 2 TO 7
C        TO PREPARE FOR RADIANCE SUPEROBING (AND LOOPING THRU PROGRAM
C        TWICE TO PROCESS PRODUCTS 3 AND 4 REMOVED); MODIFIED TO
C        ALLOW SUPEROBING OVER .5 DEG. BOXES, BUT ONLY IN NORTHERN
C        AND WESTERN HEMISPHERES
C 1994-10-05  D. A. KEYSER (NMC22) -- CODE REDESIGNED TO READ IN AND
C        -IF REQUESTED- SUPEROB SEVEN-CHANNEL BRIGHTNESS TEMPERATURE
C        RETRIEVALS ORIGINATING FROM SDR-TYPE FILES; ADDED THE
C        PRODUCTS CLOUD WATER, SOIL MOISTURE AND SNOW DEPTH TO THE
C        LIST OF PRODUCTS THAT CAN BE PROCESSED AS UNIQUE REPORTS;
C        ADDED A SET OF ADDITIONAL PRODUCTS THAT TOGETHER ARE
C        PROCESSED AS A SINGLE REPORT
C 1995-01-05  D. A. KEYSER (NMC22) -- ADDED ABILITY TO PROCESS AND
C        -IF REQUESTED- SUPEROB WIND SPEED PRODUCTS THAT HAVE BEEN
C        GENERATED IN-LINE (VIA SUBR. W3FI86) USING EITHER THE
C        NEURAL NETWORK ALGORITHM OR THE GOODBERLET ALGORITHM.
C        THE ORIGINAL GOODBERLET WIND SPEED IN THE PRODUCTS DATA
C        SET(S) CAN ALSO STILL BE PROCESSED; NOTE HOWEVER THAT
C        ONLY ONE SOURCE OF WIND SPEED PRODUCT CAN BE CHOSEN IN A
C        SINGLE RUNNING OF THIS PROGRAM
C 1996-07-31  D. A. KEYSER (NP22) -- MODIFIED NAS9000 PREPSSMI PROGRAM
C        TO CALL NEW SUBROUTINE W3MISCAN (INSTEAD OF W3FI86) WHICH
C        READS A SCAN OUT OF THE NCEP SSM/I JBUFR DATA SET.  CAN NOW
C        PROCESS OPERATIONAL FNOC PRODUCTS ALONG WITH IN-LINE
C        CALCULATED WIND SPEED PRODUCT; ADDED N-LIST SWITCH "QMPW"
C        WHICH, WHEN TRUE, WILL QUALITY CONTROL TOTAL PRECIP. WATER
C        PRODUCT AGAINST RAIN CONTAMINATION FLAG AS IS DONE FOR
C        WIND SPEED PRODUCT
C 1998-01-28  D. A. KEYSER (NP22) -- WITH CHANGE IN W3LIB ROUTINE
C        W3MISCAN, LATEST NN ALGORITHM (IALG=1) IS NN3 WHICH RETURNS
C        BOTH WIND SPEED AND TOTAL PRECIP. WATER PRODUCTS (UNLIKE NN2
C        WHICH RETURNED ONLY WIND SPEED), ALSO NN3 CAN ONLY RETURN
C        PRODUCTS WITH NO RAIN CONTAMINATION SO Q.M. HERE IS HARDWIRED
C        TO '0'
C 1998-03-30  D. A. KEYSER (NP22) -- MODIFIED TO HANDLE NEURAL NET 3
C        SSM/I PRODUCTS INPUT IN A PRODUCTS BUFR DATA DUMP FILE
C 1998-05-19  D. A. KEYSER (NP22) -- INCREASED Y2K-COMPLIANCE SINCE
C        OUTPUT ON29 FILE NOW CONTAINS A Y2K COMPLIANT 40-CHARACTER
C        PSEUDO-ON85 HEADER LABEL (WAS THE 32-CHARACTER ON85 LABEL
C        WITH A 2-DIGIT YEAR)
C 1998-10-26  D.A. KEYSER -- PROGRAM NOW Y2K AND FORTRAN 90 COMPLIANT;
C        REMOVED PACKING OF RETRIEVAL LAT/LON INTO SINGLE ARRAY IN
C        SUPEROBING CASES, NOW STORE LAT AND LON IN SEPARATE ARAYS
C        (PACKED LAT/LON CARRYOVER FROM HDS VERSION WHERE MEMORY WAS
C        LIMITED)
C 1999-02-17  D.A. KEYSER -- OUTPUT FILE IS NOW IN BUFR (WAS IN
C        NCEP OFFICE NOTE 29 FORMAT)
C 2000-02-25  D.A. KEYSER -- CONVERTED TO RUN ON THE IBM-SP
C 2000-04-24  D.A. KEYSER -- SUPEROBS ON 0.5 DEGREE LAT/LON GRID CAN
C        NOW BE GENERATED OVER ANY LAT/LON DOMAIN (PRIOR TO THIS,
C        COULD ONLY BE GENERATED IN NORTHWESTERN HEMISPHERE)
C 2001-01-03  D.A. KEYSER -- MODIFIED TO RECOGNIZE THAT W3MISCAN NOW
C        RETURNS RAINFALL RATE AS 10**6 MM/SEC RATHER THAN AS WHOLE
C        MM/HR AND IT RETURNS SURFACE TEMPERATURE AS 10**2 K RATHER
C        THAN WHOLE K (MORE PRECISION NOW); STORES OUTPUT RAINFALL
C        RATE AS 10**6 MM/SEC (UNDER MNEMONIC "REQ6") RATHER THAN
C        10**4 MM/SEC (UNDER MNEMONIC "REQV") SINCE SUPEROBED VALUES
C        NEED A HIGHER PRECISION
C 2004-09-12  D.A. KEYSER -- MODIFIED TO RECOGNIZE THAT W3MISCAN NOW
C        RETURNS EITHER SURFACE TEMPERATURE OR SEA-SURFACE TEMPERATURE
C        IN THE OLD SURFACE TEMPERATURE SLOT (BASED ON SURFACE TAG),
C        CAN NOW PROCESS THE SEA-SURFACE TEMPERATURE PRODUCT FOUND
C        IN THE NCEP DATA DUMP PRODUCTS FILE; MODIFIED TO RECOGNIZE
C        MNEM. CHANGES FROM "PH2O" TO "TPWT", "REQ6" TO "REQV", "SNDP"
C        TO "TOSD" AND "CH2O" TO "METFET VILWC METFET" IN BUFR TABLE
C        USED TO OUTPUT REPROCESSED SSM/I FILE
C        (prepobs_prepssmi.bufrtable) {NOTE: FIRST METFET IS SET TO
C        12 (CLOUD), SECOND METFET IS SET TO MISSING (CANCEL)}
C 2011-08-04 D. KEYSER - IN RESPONSE TO THE LATEST VERSION OF BUFRLIB
C        WHICH CAN HANDLE EMBEDDED DICTIONARY MESSAGES: INCREASES
C        DEGREE OF BUFRLIB PRINTOUT SUCH THAT CODE WILL PRINT A
C        DIAGNOSTIC IF ANY EMBEDDED DICTIONARY MESSAGES ARE FOUND WHEN
C        READING IN MESSAGES; FOR NON-SUPEROB PROCESSING ONLY: REPLACES
C        CALL TO OPENMG (WHICH FORCED THE SAME CENTER BUFR DUMP DATE/
C        HOUR TO BE WRITTEN INTO SEC. 1 OF ALL OUTPUT MESSAGES) WITH
C        CALL TO OPENMB (ALLOWING SEC.1 IN OUTPUT MESSAGES TO HAVE SAME
C        DATE/HOUR AS THAT FROM SEC. 1 OF THE INPUT BUFR MESSAGE FROM
C        WHICH EACH SUBSET IS BEING PROCESSED), THIS FIXES A BUG WHICH
C        HAD CAUSED A BUFRLIB ABORT HERE WHEN THE INPUT BUFR FILE
C        CONTAINS EMBEDDED BUFR DICTIONARY MESSAGES, IT ALSO FORCES
C        OUTPUT FILE TO NOW COMPLY WITH NCEP BUFR STANDARD THAT ALL
C        SUBSETS IN A BUFR MESSAGE CONTAIN THE SAME YEAR, MONTH, DAY
C        AND HOUR AS THAT IN SEC. 1 OF THE BUFR MESSAGE; FOR SUPEROB
C        PROCESSING ONLY: MOVES CALL TO OPENMG FROM PRIOR TO READING OF
C        INPUT BUFR FILE TO AFTER READING OF INPUT BUFR FILE BUT PRIOR
C        TO WRITING OF OUTPUT BUFR FILE, THIS PREVENTS A BUFRLIB ABORT
C        WHEN THE INPUT BUFR FILE CONTAINS EMBEDDED BUFR DICTIONARY
C        MESSAGES (NOT SURE WHY!) (NOTE: WE USE OPENMG HERE RATHER THAN
C        OPENMB BECAUSE SUPEROBS ARE GENERATED AND ENCODED INTO THE
C        OUTPUT BUFR FILE ONLY AFTER THE ENTIRE INPUT BUFR FILE IS READ
C        - THE DATE IN SEC. 1 OF ALL BUFR MESSAGES IN THE OUTPUT
C        SUPEROB FILE IS SIMPLY THE DUMP CENTER DATE/HOUR, ALTHOUGH
C        THIS VIOLATES THE NCEP BUFR STANDARD THAT ALL SUBSETS IN A
C        BUFR MESSAGE CONTAIN THE SAME YEAR, MONTH, DAY AND HOUR AS
C        THAT IN SEC. 1 OF THE BUFR MESSAGE, IT KEEPS THE OUTPUT FILE
C        MORE COMPACT AND CAUSES NO HARM SINCE ONLY PREPOBS_PREPDATA
C        ENDS UP READING THIS FILE)
C 2012-11-20  J. WOOLLEN  INITIAL PORT TO WCOSS 
C 2020-08-20 J. DONG  - CHANGED MISSING VALUE TO 10E8 FROM 10E10.
C
C
C USAGE:
C   INPUT FILES:
C     UNIT 05  - DATA CARDS CONTAINING "NAMELIST"
C     UNIT 20  - BUFR MNEMONIC TABLE (NEEDED TO PRODUCE REPROCESSED
C                SSM/I BUFR OUTPUT FILE)
C     UNIT 25  - DIRECT ACCESS NESDIS LAND/SEA FILE
C     UNIT 26  - GRIB INDEX FILE FOR GRIB FILE CONTAINING GLOBAL
C              - 1-DEGREE SEA-SURFACE TEMPERATURE FIELD
C     UNIT 27  - GRIB FILE CONTAINING GLOBAL 1-DEGREE SEA-SURFACE
C              - TEMPERATURE FIELD
C     UNIT 31  - NCEP SSM/I BUFR DUMP FILE CONTAINING SCANS --
C                NOTE: EITHER THE PRODUCTS FILE {ssmip (FNOC) OR
C                ssmipn (NCEP)} OR THE B. TEMPERATURE FILE (ssmit)
C                DEPENDING ON THE VALUE FOR FOR SWITCH "IALG"
C                (SEE BELOW)
C         
C
C   OUTPUT FILES:
C     UNIT 06  - STANDARD OUTPUT PRINT
C     UNIT 51  - NCEP REPROCESSED SSM/I BUFR FILE CONTAINING
C                INDIVIDUAL RETRIEVALS (SEE ABSTRACT) WHICH MAY ALSO
C                BE SUPEROBED
C
C   SUBPROGRAMS CALLED:
C     UNIQUE:    - STORE1   STORE2   STORE3   OBUFRS   OBUFRN
C                - SUPOB1   SUPOB2   FIRST(BLOCK DATA)
C     LIBRARY:
C       W3LIB    - W3FI04   W3MISCAN W3MOVDAT W3TAGB   W3TAGE
C                - ERREXIT
C       BUFRLIB  - DATELEN  OPENBF   READMG   CLOSBF   OPENMG
C                - UFBINT   WRITSB   DUMPBF   MINIMG   UFBCNT
C                - CLOSMG   UFBREP   OPENMB
C
C   EXIT STATES:
C     COND =   0 - SUCCESSFUL RUN
C          =  16 - ERROR READING SSM/I DATA FILE (VIA SUBROUTINE
C                  W3MISCAN)
C          =  18 - SUPEROB SWITCH TURNED ON AND ADDITIONAL PRODUCTS IN
C                  IVAR(8) REQUESTED; ADDITIONAL PRODUCTS CANNOT BE
C                  SUPEROBED
C          =  19 - BRIGHTNESS TEMP AND ONE OR MORE PRODUCTS REQUESTED
C                  (REGARDLESS OF SUPEROB SWITCH) - CANNOT COMBINE
C                  PROCESSING OF B. TEMPS AND PRODUCTS
C          =  61 - ERROR OBTAINING CENTER DATE FROM FIRST BUFR MESSAGE
C                  IN UNIT 31
C          =  62 - ERROR OBTAINING DUMP DATE FROM SECOND BUFR MESSAGE
C                  IN UNIT 31
C
C REMARKS: PROGRAM TESTS ALL UNPACKED PRODUCTS/BRIGHTNESS TEMPS FOR
C   NEGATIVE VALUES; IF FOUND, PRODUCTS ARE SKIPPED AND BRIGHTNESS
C   TEMPS ARE SET TO MISSING) (FOR WIND SPEED, PRODUCT SKIPPED
C   REGARDLESS OF ITS QUALITY MARKER).
C
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 90
C   MACHINE:  WCOSS
C
C$$$
CC
CC
C   ***** VARIABLES IN NAMELIST SWTCH READ IN MAIN PROGRAM *****
CC
C   LSAT    - 10-WORD LOGICAL ARRAY (240:249) INDICATING WHICH
C              SATELLITE IDS SHOULD BE PROCESSED
C
C         LSAT(X) = TRUE -- PROCESS SCANS FROM SATELLITE ID X (WHERE X
C                           IS CODE FIG. FROM BUFR CODE TABLE 0-01-007)
C         LSAT(X) = FALSE - DO NOT PROCESS SCANS FROM SATELLITE ID X
C
C                   X = 240 IS F-7  DMSP SATELLITE (HARDWIRED AS FALSE
C                           SINCE THIS SATELLITE IS NO LONGER AVAILABLE)
C                   X = 241 IS F-8  DMSP SATELLITE (HARDWIRED AS FALSE
C                           SINCE THIS SATELLITE IS NO LONGER AVAILABLE)
C                   X = 242 IS F-9  DMSP SATELLITE (HARDWIRED AS FALSE
C                           SINCE THIS SATELLITE IS NO LONGER AVAILABLE)
C                   X = 243 IS F-10 DMSP SATELLITE (THIS IS AVAILABLE
C                           AND IS CONSIDERED TO BE THE OPERATIONAL
C                           EVEN DMSP SSM/I SATELLITE AS OF 8/1996)
C                   X = 244 IS F-11 DMSP SATELLITE (THIS IS AVAILABLE
C                           AS OF 8/96 BUT IS NOT CONSIDERED TO BE AN
C                           OPERATIONAL DMSP SSM/I SATELLITE)
C                   X = 245 IS F-12 DMSP SATELLITE (HARDWIRED AS FALSE
C                           SINCE THIS SATELLITE IS NO LONGER AVAILABLE)
C                   X = 246 IS F-13 DMSP SATELLITE (THIS IS AVAILABLE
C                           AND IS CONSIDERED TO BE THE OPERATIONAL
C                           ODD  DMSP SSM/I SATELLITE AS OF 8/1996)
C                   X = 247-249 ARE RESERVED FOR FUTURE DMSP SATELLITES
C
C        NOTE: HERE "EVEN" MEANS VALUE IN IBUFTN(1) IS AN ODD NUMBER
C              WHILE "ODD" MEANS VALUE IN IBUFTN(1) IS AN EVEN NUMBER;
C              IF MORE THAN 2 SATELLITES ARE SELECTED IN "LSAT", THEN
C              THE VARIOUS "EVEN" OR "ODD" SATELLITES WILL BE LUMPED
C              TOGETHER IN TAGGING THE PREFIX CHARACTER OF THE OUTPUT
C              STN. ID OF NON-SUPEROBED RETRIEVALS IN SUBR. OBUFRN!!}
C
CC
C   ISUPOB  - SUPEROB SWITCH
C             NOTE: THERE IS NO DEFAULT, THIS MUST BE SPECIFIED IN THE
C                   DATA CARDS BECAUSE THE SCRIPT GREPS ON THE VALUE
C                   FOR ISUPOB IN ORDER TO DETERMINE THE MAKEUP OF THE
C                   BUFR MNEMONIC TABLE USED TO MAKE THE OUTPUT FILE
C        ISUPOB = 0 -- SUPEROBS ARE NOT GENERATED; ORIGINAL (BUT
C                      REPROCESSED) RETRIEVALS ARE PACKED INTO OUTPUT
C                      BUFR FILE
C        ISUPOB = 1 -- SUPEROBS ARE GENERATED BY TAKING LINEAR AVERAGE
C                      OF ALL VALID DATA/TIMES WITHIN SPECIFIED GRID
C                      (LAT/LON) BOX; SUPEROB IS PLACED AT POINT W/I
C                      BOX REPRESENTED BY LINEAR AVERAGED LATITUDE AND
C                      LONGITUDE (EACH PRODUCT TREATED SEPARATELY)
C    (NOTE: ISUPOB=1 NOT VALID FOR IVAR(8) = 0)
CC
C   DELAT   - LATITUDE  SPACING (DEGREES) OF SUPEROB GRID BOX
C    {NOTE: NORMALLY WHOLE DEGREES EXCEPT FOR CHOICE OF 0.5 DEGREES
C   DELON   - LONGITUDE SPACING (DEGREES) OF SUPEROB GRID BOX
C    {NOTE: NORMALLY WHOLE DEGREES EXCEPT FOR CHOICE OF 0.5 DEGREES
C
C    (NOTE: DELAT AND DELON ARE MEANINGLESS WHEN ISUPOB = 0)
CC
C   IVAR    - PROCESS/NO PROCESS THE FOLLOWING (DIMENSION 10)
C           WORD 1  -- SURFACE WIND SPEED PRODUCT OVER OCEAN
C                      (SEE SWITCH "IALG" FOR MORE INFO, ON THIS)
C           WORD 2  -- TOTAL COLUMN PRECIP. WATER PRODUCT OVER OCEAN
C                      (SEE SWITCH "IALG" FOR MORE INFO, ON THIS)
C           WORD 3  -- RAINFALL RATE PRODUCT
C           WORD 4  -- SURFACE TEMPERATURE PRODUCT
C                       (ONLY AVAILABLE IF SURFACE TAG IS NOT OCEAN)
C           WORD 5  -- CLOUD WATER PRODUCT OVER OCEAN
C           WORD 6  -- SOIL MOISTURE PRODUCT
C           WORD 7  -- SNOW DEPTH PRODUCT
C           WORD 8  -- SEA-SURFACE TEMPERATURE PRODUCT
C                       (ONLY AVAILABLE IF SURFACE TAG IS OCEAN)
C           WORD 9  -- ADDITIONAL PRODUCTS (SURFACE TAG,
C                      ICE CONCENTRATION, ICE AGE, ICE EDGE,
C                      CALCULATED SURFACE TYPE) - ALL OR NONE HERE
C           WORD 10 -- SEVEN-CHANNELS OF BRIGHTNESS TEMPERATURES:
C                      19 GHZ V, 19 GHZ H, 22 GHZ V, 37 GHZ V,
C                      37 GHZ H, 85 GHZ V, 85 GHZ H) - ALL OR NONE HERE
C                      (SEE SWITCH "IALG" FOR MORE INFO, ON THIS)
C        IVAR(1) - (10) = 0    -- PROCESS THIS DATUM
C        IVAR(1) - (10) = 9999 -- DON'T PROCESS THIS DATUM
C    (NOTE1: REGARDLESS OF ISUPOB VALUE: IF IVAR(10) = 0, THEN
C           IVAR(1)-(8) MUST BE 9999; IF ONE OR MORE OF
C           IVAR(1)-(8) = 0, THEN IVAR(10) MUST BE 9999)
C    (NOTE2: FOR IVAR(1)-IVAR(8) PRODUCTS, A UNIQUE REPORT IS GENERATED
C           FOR EACH PRODUCT, EACH PRODUCT IS PACKED AS A UNIQUE
C           SUBSET IN THE OUTPUT BUFR FILE; FOR IVAR(10), A UNIQUE
C           REPORT IS GENERATED CONTAINING THE SEVEN-CHANNELS OF
C           BRIGHTNESS TEMPS, EACH REPORT IS PACKED AS A UNIQUE SUBSET
C           IN THE OUTPUT BUFR FILE; FOR IVAR(9), A UNIQUE REPORT IS
C           GENERATED CONTAINING ALL 5 PRODUCTS (UNLESS A PRODUCT IS
C           MISSING, THEN IT IS NOT INCLUDED), EACH REPORT IS PACKED
C           AS A UNIQUE SUBSET IN THE OUTPUT BUFR FILE  A N D   ISUPOB
C           MUST BE 0 IF IVAR(9) IS SELECTED.
C    (NOTE3: IF INPUT FILE IS NCEP DERIVED PRODUCTS, CHANCES ARE ONLY
C           WIND SPEED PRODUCT AND TOTAL COLUMN PRECIP. WATER PRODUCT
C           WOULD BE AVAILABLE, ALONG WITH SURFACE TAG.
CC
C   IALG    - ALGORITHM FOR CONVERTING BRIGHTNESS TEMPERATURES TO
C             WIND SPEED AND/OR TOTAL PRECIP. WATER PRODUCT VIA IN-LINE
C             ALGORITHM
C             NOTE: THERE IS NO DEFAULT, THIS MUST BE SPECIFIED IN THE
C                   DATA CARDS BECAUSE THE SCRIPT GREPS ON THE VALUE
C                   FOR ALG IN ORDER TO DETERMINE IF THE ssmip/ssmipn
C                   OR ssmit FILE SHOULD BE INPUT TO THE PROGRAM IN
C                   UNIT 31
C        IALG   = 0 -- PRODUCTS FILE (EITHER FNOC "OPERATIONAL" OR
C                      NCEP DERIVED) IS INPUT.  NO ALGORITHM USED. IF
C                      IVAR(1)=0, WIND SPEED IS OBTAINED DIRECTLY FROM
C                      DERIVED VALUE IN INPUT FILE.  IF IVAR(2)=0,
C                      PRECIP. WATER IS OBTAINED DIRECTLY FROM DERIVED
C                      VALUE IN INPUT FILE.   IVAR(1)-(9) CAN BE EITHER
C                      0 OR 9999.
C        IALG   = 1 -- BTEMP FILE IS INPUT.  WIND SPEED AND PRECIP.
C                      WATER ARE OBTAINED VIA IN-LINE CALCULATION USING
C                      LATEST NEURAL NETWORK ALGORITHM ON B. TEMPS
C        IALG   = 2 -- BTEMP FILE IS INPUT.  WIND SPEED (ONLY) IS 
C                      OBTAINED VIA IN-LINE CALCULATION USING
C                      GOODBERLET ALG. ON B. TEMPS
C        IALG   =99 -- BTEMP FILE IS INPUT.  NO CONVERSION TO PRODUCTS
C                      IS PERFORMED - BRIGHTNESS TEMPS ARE OUTPUT
C                      (IVAR(10)=0).
C    {NOTE: IALG=1 APPLIES ONLY WHEN IVAR(1) AND/OR IVAR(2) = 0 AND
C           IVAR(3)-(8) = 9999; IALG=2 APPLIES ONLY WHEN IVAR(1) = 0 AND
C           IVAR(2)-(8) = 9999}
CC
C   IQM     - FOR GOODBERLET ALG. WIND SPEED PRODUCT {IVAR(1)}, EITHER
C             FROM INPUT FNOC (ONLY) PRODUCTS FILE, OR CALC. IN-LINE
C             FROM B. TEMP INPUT FILE {AND POSSIBLY FOR TOTAL PRECIP.
C             WATER PRODUCT, IVAR(2), FROM INPUT FNOC (ONLY) PRODUCTS
C             FILE, SEE SWITCH "QMPW"}:
C             THE LOWEST (POOREST) QUALITY MARK ACCEPTED FOR PROCESSING
C               THE QUALITY MARKERS ARE DEFINED AS FOLLOWS:
C                   = 0 -- NO RAIN CONTAMINATION (ERROR < 2 M/S)
C                   = 1 -- SLIGHT RAIN CONTAMINATION (ERROR 2-5 M/S)
C                   = 2 -- MODERATE RAIN CONTAMINATION (ERROR 5-10 M/S)
C                   = 3 -- SEVERE RAIN CONTAMINATION (ERROR > 10 M/S)
C               = 99999 -- MISSING (W. SPEED SHOULD ALSO BE MISSING)
C        IQM = 0 -- ONLY WIND SPEEDS WITH Q.M.= 0 PROCESSED
C        IQM = 1 -- ONLY WIND SPEEDS WITH Q.M.= 0 OR 1 PROCESSED
C        IQM = 2 -- ONLY WIND SPEEDS WITH Q.M.= 0, 1 OR 2 PROCESSED
C        IQM = 3 -- ALL WIND SPEEDS PROCESSED REGARDLESS OF Q.M. VALUE
C                    EXCEPTION: NEGATIVE VALUES ALWAYS REJECTED)
C    (NOTE: I M P O R T A N T:  THIS SWITCH DOES NOT APPLY FOR LATEST
C           NEURAL NET ALGORITHM WIND SPEED AND/OR PRECIP. WATER EITHER
C           READ IN FROM PRODUCTS FILE OR CALC. IN-LINE FROM INPUT B.
C           TEMPS; HERE ONLY RETRIEVALS WITH NO RAIN CONTAMINATION ARE
C           PROCESSED BY THE ALGORITHM)
C
C   QMPW    - LOGICAL INDICATING WHETHER THE INPUT FNOC (ONLY) TOTAL
C             PRECIPITABLE WATER PRODUCT SHOULD BE QUALITY CONTROLLED
C             AGAINST THE GOODBERLET ALG. WIND SPEED "QUALITY MARKER"
C             (RAIN CONTAMINATION FLAG)
C        QMPW   = TRUE  -- SWITCH "IQM" IS THEN ALSO USED FOR TPW
C        QMPW   = FALSE -- NO TPW QUALITY CONTROL IS PERFORMED (DEFAULT)
C    {NOTE1: IF THE QUALITY MARKER IS MISSING (99999) THE TPW PRODUCT
C            IS NEVER PROCESSED WHEN QMPW = TRUE
C     NOTE2: APPLIES ONLY WHEN IVAR(2) = 0 AND GOODBERLET ALG. IS USED
C            (EITHER FNOC PROD. WHEN IALG=0, OR CASE WHERE IALG=2 - IT
C            NEVER APPLIES TO LATEST NEURAL NET ALG. TPW CALC. IN-LINE
C            FROM B. TEMPS (IALG=1) OR NCEP PROD. INPUT WHEN IALG=0}
CC
C      THE FOLLOWING 4 SWITCHES INDICATE THE CENTRAL TIME FOR THE DATA
C    (NOTE: IF IYEAR IS SET TO '0000' -- THIS TIME IS READ IN FROM
C           THE CENTER DATE (FIRST) BUFR MESSAGE IN UNIT 31)
C
C   IYEAR   - 4-DIGIT YEAR
C   IMONTH  - 2-DIGIT MONTH OF THE YEAR
C   IDAY    - 2-DIGIT DAY OF THE MONTH
C   IHOUR   - 2-DIGIT HOUR OF THE DAY
C   IMIN    - 2-DIGIT MINUTE OF THE HOUR
C
C   IWINDO  - THIS INDICATES THE TIME WINDOW ABOUT THE CENTRAL TIME
C             FOR PROCESSING THE DATA
C      IWINDO =  30  -- ACCEPT DATA FROM 30 MIN. BEFORE TO 29 MIN. AFTER
C                       THE CENTRAL TIME
C      IWINDO = 100  -- ACCEPT DATA FROM 1-HR BEFORE TO 59 MIN. AFTER
C                       THE CENTRAL TIME
C      IWINDO = 130  -- ACCEPT DATA FROM 1-HR 30-MIN BEFORE TO 1-HR
C                       29-MIN AFTER THE CENTRAL TIME
C      IWINDO = 300  -- ACCEPT DATA FROM 3-HR BEFORE TO 2-HR 59 MIN.
C                       AFTER THE CENTRAL TIME
C             -- ETC. --
C    (NOTE: IWINDO SHOULD  N E V E R   EXCEED 600)
CC
C      THE FOLLOWING 4 SWITCHES INDICATE THE LATITUDE/LONGITUDE
C                    BOUNDARY FOR ACCEPTING DATA
C
C   LATS    - THIS IS THE SOUTHERN BDRY {LAT: DEG. N (+); DEG. S (-)}
C   LATN    - THIS IS THE NORTHERN BDRY {LAT: DEG. N (+); DEG. S (-)}
C   LONW    - THIS IS THE WESTERN  BDRY {LON: 0-360 DEG. W}
C   LONE    - THIS IS THE EASTERN  BDRY {LON: 0-360 DEG. W}
C    (NOTE: THESE ARE ALWAYS INTEGERS; MUST BE WHOLE DEGREES)
CC
C   LIMCNT  - LIMITING NUMBER OF INDIVIDUAL RETRIEVALS FOR WHICH A
C             SUPEROB IS GENERATED {I.E., IF LESS THAN 'LIMCNT'
C             RETRIEVALS ARE FOUND IN THE GRID (LAT/LON) BOX, THEN
C             A SUPEROB IS NOT GENERATED FOR THIS BOX}
C    (NOTE: THIS SWITCH APPLIES ONLY WHEN ISUPOB = 1; THE DEFAULT
C           VALUE IS LIMCNT = 1; LIMCNT SHOULD NEVER BE LESS THAN 1)
CC

      PROGRAM PREPOBS_PREPSSMI

      LOGICAL  ITMFL,LPROD,LBRIT,NNALG,GBALG,LSAT(240:249),QMPW,NCEPRD

      CHARACTER*8  SUBSET,SUBOUT
      CHARACTER*10  TEXT0(2)
      CHARACTER*34  TEXT(10)
      CHARACTER*47  TEXTPR(0:2)

      INTEGER  KDATE(8),LDATE(8),ICDATE(5),IDDATE(5),NRF(0:4,2)

      COMMON/SCAN/IBUFTN(1737)
      COMMON/KOUNT/ICNT(10),ICNTT,NFILE,IRECL,ISUBL,ISUBT
      COMMON/BGRID/BLAT(360),BLON(720),NOBS(8,720,360)
      COMMON/DGRID/LATSIZ,LONSIZ
      COMMON/SWITCH/IVAR(10),IQM,ISUPOB,LATS,LATN,LONW,LONE,LIMCNT,QMPW
      COMMON/SAVED/ITOBS(9),ITOBST,DGH,DGV,SUMDTA(8,720,360),
     $ SSQDTA(8,720,360),SUMTIM(8,720,360),SUMLAT(8,720,360),
     $ SUMLON(8,720,360)
      COMMON/CENTER/IDATE(8)

      NAMELIST/SWTCH/DELAT,DELON,LSAT,ISUPOB,IVAR,IQM,IYEAR,IMONTH,
     $ IDAY,IHOUR,IMIN,IWINDO,LATS,LATN,LONW,LONE,LIMCNT,IALG,QMPW

      DATA  TEXT0/'RETRIEVALS',' SUPEROBS '/
      DATA  TEXT /'    OCEANIC WIND SPEED PRODUCT    ',
     $            'OCEANIC PRECIPITABLE WATER PRODUCT',
     $            '      RAINFALL RATE PRODUCT       ',
     $            '   SURFACE TEMPERATURE PRODUCT    ',
     $            '   OCEANIC CLOUD WATER PRODUCT    ',
     $            '      SOIL MOISTURE PRODUCT       ',
     $            '        SNOW DEPTH PRODUCT        ',
     $            ' SEA-SURFACE TEMPERATURE PRODUCT  ',
     $            'ADDITIONAL PRODUCTS (SEE * BELOW) ',
     $            'BRIGHTNESS TEMPERAURE - 7 CHANNELS'/
      DATA  TEXTPR/'     OBTAINED FROM INPUT PRODUCTS DATA SET     ',
     $             'CALCULATED IN-LINE VIA NEURAL NETWORK ALGORITHM',
     $             '  CALCULATED IN-LINE VIA GOODBERLET ALGORITHM  '/

      CALL W3TAGB('PREPOBS_PREPSSMI',2020,0233,0057,'NP22')

C  CALL W3FI04 TO DETERMINE MACHINE WORD LENGTH (BYTES)
C   AND TO TEST FOR ASCII(ICHTP=0) OR EBCDIC(ICHTP=1) CHARACTERS
C  -------------------------------------------------------------

      CALL W3FI04(IENDN,ICHTP,LW)
      PRINT 2213, LW,ICHTP,IENDN
 2213 FORMAT(/' ---> CALL TO W3FI04 RETURNS: LW = ',I3,', ICHTP = ',I3,
     $ ', IENDN = ',I3/)

      LIMCNT = 1
      NRF = 0
      QMPW = .FALSE.
      READ(5,SWTCH)
      LSAT(240:242) = .FALSE.
      LSAT(245) = .FALSE.
      IUNIT = 31

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      CALL DATELEN(10)

C  GET THE CENTER & DUMP DATE FROM INPUT ORIGINAL BUFR DATA DUMP FILE
C  ------------------------------------------------------------------

      CALL DUMPBF(IUNIT,ICDATE,IDDATE)
      WRITE(6,*) ' '
      WRITE(6,*) 'From Original SSM/I Bufr Data Dump File in Unit 31:'
      WRITE(6,*) '     - Center date (ICDATE) = ',ICDATE
      WRITE(6,*) '     - Dump date   (IDDATE) = ',IDDATE
      WRITE(6,*) 'Will transfer these to output reprocessed SSM/I BUFR',
     $ ' file in Unit 51 (SPSSMI)'
      WRITE(6,*) ' '
      IF(ICDATE(1).LE.0)  THEN

C  IF CENTER DATE COULD NOT BE READ FROM FIRST DUMMY MESSAGE,
C  STOP WITH CONDITION CODE 61
C  ----------------------------------------------------------

         WRITE(6,*) 'DUMPBF ERROR - CENTER DATE COULD NOT BE READ ',
     $    'FROM INPUT SSM/I DATA DUMP FILE -- STOP 61'
         CALL W3TAGE('PREPOBS_PREPSSMI')
         CALL ERREXIT(61)
      END IF
      IF(IDDATE(1).LE.0)  THEN

C  IF DUMP DATE COULD NOT BE READ FROM SECOND DUMMY MESSAGE,
C  STOP WITH CONDITION CODE 62
C  ---------------------------------------------------------

         WRITE(6,*) 'DUMPBF ERROR - DUMP DATE COULD NOT BE READ ',
     $    'FROM INPUT SSM/I DATA DUMP FILE -- STOP 62'
         CALL W3TAGE('PREPOBS_PREPSSMI')
         CALL ERREXIT(62)
      END IF

C  OPEN INPUT BUFR FILE TO SEE IF IT CONTAINS NCEP SSM/I PRODUCTS
C   (NEED TO KNOW THIS PRIOR TO READING IN SCANS, IALG=0 DOESN'T
C   PROVIDE THIS INFORMATION, ONLY THAT INPUT FILE IS A PRODUCTS
C   DUMP - EITHER FNOC OR NCEP)
C  --------------------------------------------------------------

      CALL OPENBF(IUNIT,'IN',IUNIT)
      !!!call openbf(0,'QUIET',1)

C  READ FIRST BUFR MESSAGE IN THE INPUT BUFR FILE TO GET SUBSET NAME
C  -----------------------------------------------------------------

      CALL READMG(IUNIT,SUBSET,JDATBF,IRET)
      IF(IRET.NE.0)   THEN
C.......................................................................

C  PROBLEM: INPUT FILE IS EMPTY!!! -- STOP WITH C. CODE 16
C  -------------------------------------------------------

         PRINT 14
   14    FORMAT(/' ##INPUT BUFR/SSM-I FILE CONTAINS NO MESSAGES'/)
         IER = 2
C  ERROR READING A SCAN LINE
         PRINT 109, IUNIT,IER
         CALL W3TAGE('PREPOBS_PREPSSMI')
         CALL ERREXIT(16)
C.......................................................................
      END IF
      SUBOUT = SUBSET
      NCEPRD = (SUBSET.EQ.'NC012103')
      CALL CLOSBF(IUNIT)
      REWIND IUNIT
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C  N.NET PRODUCTS (FROM NCEP PROD FILE OR CALC. IN-LINE) ONLY HAVE IQM=0
      IF(IALG.EQ.1.OR.NCEPRD)  IQM = 0
C IF NEURAL NET ALGORITHM TPW PRODUCT (EITHER FROM INPUT NCEP PRODUCTS
C  FILE OR FROM CALC. IN-LINE), QMPW ALWAYS FALSE
      IF(IVAR(2).EQ.0.AND.(IALG.EQ.1.OR.NCEPRD))  QMPW = .FALSE.
      WRITE(6,SWTCH)
      IF(IVAR(10).EQ.0.AND.MIN(IVAR(1),IVAR(2),IVAR(3),IVAR(4),IVAR(5),
     $ IVAR(6),IVAR(7),IVAR(8)).EQ.0)  THEN
C.......................................................................

C  CAN'T PROCESS BOTH BRIGHTNESS TEMP AND ONE OR MORE PRODUCTS - STOP 19
C   (REGARDLESS OF ISUPOB)
C  ---------------------------------------------------------------------
         PRINT 119
         CALL W3TAGE('PREPOBS_PREPSSMI') 
         CALL ERREXIT(19)
C.......................................................................
      END IF
      IF(ISUPOB.EQ.1)  THEN
         IF(IVAR(9).EQ.0)  THEN
C.......................................................................

C  IF SUPEROBING, CAN'T PROCESS ADD'L PRODUCTS IN IVAR(9) - STOP 18
C  ----------------------------------------------------------------

            PRINT 118
            CALL W3TAGE('PREPOBS_PREPSSMI') 
            CALL ERREXIT(18)
C.......................................................................
         END IF
         LATSIZ = 180./DELAT + 0.5
         LONSIZ = 360./DELON + 0.5
         DGH = DELON/2.
         DGV = DELAT/2.
C***********************************************************************

C  BLAT & BLON REPRESENT THE CENTER LAT/LON FOR THE SELECTED GRID
C   BOXES OVERWHICH SUPEROBING IS DONE:
C  --------------------------------------------------------------
C    RANGE:  -90 TO + 90 LAT; 0 TO 360 WEST LON

         LATBEG = 1
         K = 0
         DO LAT  = LATBEG,LATSIZ
            K = K + 1
            BLAT(K) = (DELAT * ((LAT - 1) - LATSIZ/2)) + DGV
         ENDDO
         DO LONG = 1,LONSIZ
            BLON(LONG) = (DELON * (LONG - 1)) + DGH
         ENDDO
C.......................................................................
      END IF
C***********************************************************************

C  IF INPUT YEAR FROM NAMELIST IS '00': USE CENTER DATE FROM INPUT
C   SSM/I BUFR DATA DUMP FILE AS BOTH CENTER DATE IN OUTPUT
C   REPROCESSED BUFR FILE AND AS CENTER DATE FOR CALCULATING TIME
C   WINDOW DATES THAT ARE PASSED TO W3MISCAN
C  IF INPUT YEAR FROM NAMELIST IS NOT '00': USE DATE FROM INPUT DATA
C   CARDS AS BOTH CENTER DATE IN OUTPUT REPROCESSED BUFR FILE AND AS
C   CENTER DATE FOR CALCULATING TIME WINDOW DATES THAT ARE PASSED TO
C   W3MISCAN
C  -----------------------------------------------------------------

      IF(IYEAR.EQ.0000)  THEN
         IYEAR  = ICDATE(1)
         IMONTH = ICDATE(2)
         IDAY   = ICDATE(3)
         IHOUR  = ICDATE(4)
         IMIN   = ICDATE(5)
      END IF

C  CONSTRUCT CENTER DATE FOR OUTPUT
C  --------------------------------

      PRINT 100, IYEAR,IMONTH,IDAY,IHOUR,IMIN,IWINDO
      DO II = 1,10
         IF(IVAR(II).EQ.0)  PRINT 101, TEXT(II)
      ENDDO
      IALGPW = IALG
      IF(MIN(IVAR(1),IVAR(2),IVAR(5),IVAR(8)).EQ.0)  THEN
         IF(IVAR(1).EQ.0)  THEN
            PRINT 901, TEXTPR(IALG)
  901       FORMAT(/52X,'OCEANIC WIND SPEED PRODUCT'/41X,A47)
            IF(IALG.EQ.0)  THEN
               IF(.NOT.NCEPRD)  THEN
                  PRINT 915
  915             FORMAT(53X,'VIA GOODBERLET ALGORITHM')
               ELSE
                  PRINT 8915
 8915             FORMAT(49X,'VIA LATEST NEURAL NET ALGORITHM')
               END IF
            END IF
            IF(IALG.NE.1.AND..NOT.NCEPRD)  THEN
               PRINT 916, IQM
  916          FORMAT(40X,'ONLY RAIN FLAG CATEGORY',I3,' AND LESS ARE ',
     $          'PROCESSED'/)
            ELSE
               PRINT 2916
 2916          FORMAT(43X,'ONLY RAIN FLAG CATEGORY ZERO IS AVAILABLE')
            END IF
         END IF
         IF(IVAR(2).EQ.0)  THEN
            IF(IALG.EQ.2)  IALGPW = 0
            PRINT 1901, TEXTPR(IALGPW)
 1901 FORMAT(/45X,'OCEANIC TOTAL PRECIPITABLE WATER PRODUCT'/41X,A47)
            IF(IALGPW.EQ.0)  THEN
               IF(.NOT.NCEPRD)  THEN
                  PRINT 915
               ELSE
                  PRINT 8915
               END IF
            END IF
            IF(IALG.EQ.1.OR.NCEPRD)  PRINT 2916
         END IF
         IF(IALG.EQ.0)  THEN
            IF(IVAR(5).EQ.0)  THEN
               PRINT 1908, TEXTPR(IALG)
 1908 FORMAT(/52X,'OCEANIC CLOUD WATER PRODUCT'/41X,A47)
               IF(.NOT.NCEPRD)  THEN
                  PRINT 915
               ELSE
                  PRINT 8915
               END IF
            END IF
            IF(IVAR(8).EQ.0)  THEN
               PRINT 1909, TEXTPR(IALG)
 1909 FORMAT(/45X,'OCEANIC SEA-SURFACE TEMPERATURE PRODUCT'/41X,A47)
               IF(.NOT.NCEPRD)  THEN
                  PRINT 915
               ELSE
                  PRINT 8915
               END IF
            END IF
         END IF
      ELSE
         IALG = 0
      END IF
      IF(IVAR(2).EQ.0.AND.QMPW)  THEN
         PRINT 889, IQM
  889 FORMAT(/9X,'FOR TOTAL PRECIP. WATER, ONLY RAIN FLAG CATEGORY',I3,
     $ ' AND LESS ARE PROCESSED (TPW NEVER PROCESSED IF R.F. MISSING)')
         IF(IVAR(1).EQ.0)  THEN
            PRINT 890
  890 FORMAT(39X,'RAIN FLAG BASED ON WIND SPEED ALGORITHM NOTED ABOVE'/)
         ELSE
            PRINT 891
  891 FORMAT(30X,'RAIN FLAG BASED ON GOODBERLET WIND SPEED ALGORITHM ',
     $ 'AS INPUT FROM PRODUCTS FILE'/)
         END IF
      END IF
      IF(IVAR(9).EQ.0)  PRINT 1101

C#######################################################################

      IUNITT = 20

C  OPEN OUTPUT BUFR FILE WHICH WILL CONTAIN REPROCESSED SSM/I DATA
C  ---------------------------------------------------------------

      CALL OPENBF(NFILE,'OUT',IUNITT)
      WRITE(6,1905) NFILE,IUNITT
 1905 FORMAT(/8X,'===> OUTPUT BUFR DATA SET IN UNIT',I3,' SUCCESSFULLY',
     $ ' OPENED FOR OUTPUT; BUFR MNEMONIC TABLES A,B,D IN UNIT',I3/13X,
     $'READ IN AND ENCODED INTO BEGINNING MESSAGES OF OUTPUT DATA SET'/)

C  TRANSFER CENTER & DUMP DATE FROM INPUT FILE TO OUTPUT BUFR FILE
C  ---------------------------------------------------------------

      IDATBF=IYEAR*1000000+IMONTH*10000+IDAY*100+IHOUR
      IDATDM=IDDATE(1)*1000000+IDDATE(2)*10000+IDDATE(3)*100+IDDATE(4)

C  ESTABLISH PROPER SUBSET NAME FOR BUFR MESSAGES IN OUTPUT BUFR FILE
C   (BASED ON SUBSET FROM INPUT BUFR FILE AS WELL AS IALG VALUE)
C  ------------------------------------------------------------------

      IF(SUBSET.EQ.'NC012001')  THEN
         IF(IALG.EQ.1)  THEN
            SUBOUT = 'NC012103'
         ELSE  IF(IALG.EQ.2)  THEN
            SUBOUT = 'NC012002'
         END IF
      END IF
        
      CALL OPENMG(NFILE,SUBOUT,IDATBF)
      CALL MINIMG(NFILE,IMIN)
      CALL CLOSMG(NFILE)
      CALL OPENMG(NFILE,SUBOUT,IDATDM)
      CALL MINIMG(NFILE,IDDATE(5))
      CALL CLOSMG(NFILE)

C  SET-UP THE TIME WINDOW HERE (BASED ON INPUT 'IWINDO')
C  -----------------------------------------------------

      IDATE    = 0
      IDATE(1) = IYEAR
      IDATE(2) = IMONTH
      IDATE(3) = IDAY
      IDATE(5) = IHOUR
      IDATE(6) = IMIN
      IUPDAT = ((IWINDO/100) * 60) + MOD(IWINDO,100)

C  BACKDATE CENTRAL DATE/TIME BY IWINDO: KDATE
C  -------------------------------------------

      CALL W3MOVDAT((/0.,0.,REAL(-IUPDAT), 0.,0./),IDATE,KDATE)

C  UPDATE CENTRAL DATE/TIME BY IWINDO (MINUS 1 MIN): LDATE
C  -------------------------------------------------------

      CALL W3MOVDAT((/0.,0.,REAL(IUPDAT-1),0.,0./),IDATE,LDATE)

C#######################################################################

      PRINT 106, DELAT,DELON,LSAT,ISUPOB,IVAR,IQM,QMPW,LATS,LATN,LONW,
     $ LONE,LIMCNT,IALG
      PRINT 107, (KDATE(III),III=1,3),KDATE(5),KDATE(6),
     $ (LDATE(III),III=1,3),LDATE(5),LDATE(6)

C  ITMFL=TRUE LATER ADDS 2400. TO TIMES INTO NEXT DAY FOR SUPEROBING
C  -----------------------------------------------------------------

      ITMFL = (KDATE(5).GT.LDATE(5))

C  WILL WE NEED TO DECODE INPUT PRODUCTS (EITHER FNOC OR NCEP)?
C  ------------------------------------------------------------

      LPROD = (MIN(IVAR(3),IVAR(4),IVAR(5),IVAR(6),IVAR(7),IVAR(8),
     $ IVAR(9)).EQ.0.OR.(IVAR(1).EQ.0.AND.(IALG.EQ.0.OR.NCEPRD)).OR.
     $ (IVAR(2).EQ.0.AND.(IALGPW.EQ.0.OR.NCEPRD)))

C  WILL WE NEED TO DECODE BRIGHTNESS TEMPERATURES?
C  -----------------------------------------------

      LBRIT = (IVAR(10).EQ.0.OR.(IVAR(1).EQ.0.AND.IALG.GT.0).OR.(IVAR(2)
     $ .EQ.0.AND.IALGPW.EQ.1))

C  ARE WE SELECTING W.SPEED & TPW AS CALC IN-LINE VIA LATEST N.NET ALG?
C  --------------------------------------------------------------------

      NNALG = (LBRIT.AND.IALG.EQ.1)

C  ARE WE SELECTING W.SPEED AS CALC. IN-LINE VIA GOODBERLET ALGORITHM?
C  -------------------------------------------------------------------
      GBALG = (LBRIT.AND.IALG.EQ.2)

C  INITALIZE ALL SUMS AS ZERO
C  --------------------------

      NOBS   = 0
      SUMDTA = 0.
      SSQDTA = 0.
      SUMTIM = 0.
      SUMLAT = 0.
      SUMLON = 0.
      INLSF  = 25
      INGBI  = 00 !26
      INGBD  = 27

C  IGNRTM IS HARDWIRED AS ZERO - TELLS W3MISCAN TO TIME CHECK SCANS
C  ----------------------------------------------------------------

      IGNRTM = 0

C-----------------------------------------------------------------------
C    READ A SCAN LINE HOLDING 64 RETRIEVALS INTO ARRAY IBUFTN
C-----------------------------------------------------------------------

 1400 CONTINUE
      CALL W3MISCAN(IUNIT,INLSF,INGBI,INGBD,LSAT,LPROD,LBRIT,NNALG,
     $ GBALG,(/KDATE(1),KDATE(2),KDATE(3),KDATE(5),KDATE(6)/),
     $ (/LDATE(1),LDATE(2),LDATE(3),LDATE(5),LDATE(6)/),IGNRTM,IBUFTN,
     $ IBDATE,IER)
      IF(IER.GT.1.OR.IER.LT.0)  THEN
C.......................................................................

C  ERROR READING A SCAN LINE - STOP 16
C  -----------------------------------

         PRINT 109, IUNIT,IER
         CALL W3TAGE('PREPOBS_PREPSSMI') 
         CALL ERREXIT(16)
C.......................................................................
      ELSE  IF(IER.EQ.0)  THEN

C=======================================================================
C                      WE HAVE A VALID SCAN
C=======================================================================

         IF(ISUPOB.EQ.0) CALL OPENMB(NFILE,SUBSET,IBDATE)

C  STORE THE SCAN TIME IN HOURS X 100
C  ----------------------------------

         ITIME = NINT((1000. * (REAL(IBUFTN(5)) + REAL(IBUFTN(6))/60. +
     $    REAL(IBUFTN(7))/3600.)) + 0.00005)

C  IF SUPEROBING, CHECK FOR CROSS OVER TO NEXT DAY (IF SO, ADD 24000
C   SO AVG. TIME MAKES SENSE; WILL CORRECT LATER IF TIME IS > 24000)
C  -----------------------------------------------------------------

         IF(ISUPOB.EQ.1.AND.ITMFL.AND.IBUFTN(5).LT.12) ITIME=ITIME+24000

C  CALL STORE1 TO CHECK FOR VALID RETRIEVAL FOR SELECTED PRODUCT(S)
C  CALL STORE2 TO CHECK FOR VALID RETRIEVAL FOR B. TEMPERATURES
C   IF SUPEROBING:     STORES DATA FROM EACH ORIG. RETR. INTO ARRAYS
C   IF NOT SUPEROBING: ENCODES ORIGINAL RETR. INTO OUTPUT BUFR FILE
C  -----------------------------------------------------------------

         IF(LPROD.OR.NNALG.OR.GBALG)  CALL STORE1(ITIME,NRF,IALG,NCEPRD)
         IF(IVAR(10).EQ.0)  CALL STORE2(ITIME)

C  GO BACK AND UNPACK NEXT SCAN LINE OF 64 RETRIEVALS
C  --------------------------------------------------

         GO TO 1400

      ELSE

C=======================================================================
C   ALL SCANS HAVE BEEN DECODED AND ALL RETRIEVALS STORED AS REQUESTED
C              (IER = 1 RETURNED FROM SUBROUTINE W3MISCAN)
C=======================================================================

C  IF NOT SUPEROBING ALL DONE
C  --------------------------

         IF(ISUPOB.EQ.1)  THEN

C  IF SUPEROBING ....
C  ------------------

            CALL OPENMG(NFILE,SUBOUT,IDATBF)

            IF(LPROD.OR.NNALG.OR.GBALG)  THEN

C   CALL SUPOB1 TO GENERATE SUPOBS FOR SELECTED PRODS & ENCODE IN BUFR
C   ------------------------------------------------------------------

               CALL SUPOB1

            ELSE

C   CALL SUPOB2 TO GENERATE SUPOBS FOR B. TEMPS & ENCODE IN BUFR
C   ------------------------------------------------------------

               CALL SUPOB2

            END IF
         END IF
      END IF

C=======================================================================

C  CLOSE OUTPUT BUFR FILE CONTAINING REPROCESSED SSM/I DATA
C  --------------------------------------------------------

      CALL UFBCNT(NFILE,IREC,ISUB)
      ISUBT = ISUBT + ISUB
      WRITE(6,1253) IREC,ISUB,ISUBT
 1253 FORMAT(/' --- WROTE OUTPUT BUFR DATA MSG NO.',I10,' WITH',I5,
     $ ' REPORTS (TOTAL NO. REPORTS WRITTEN =',I7,')')
      CALL CLOSBF(NFILE)
      WRITE(6,102) NFILE
  102 FORMAT(/5X,'===> OUTPUT BUFR DATA SET IN UNIT',I3,' SUCCESSFULLY',
     $ ' CLOSED'/)

      IF(IVAR(1).EQ.0)  THEN
         PRINT 656, LIMCNT,IQM,(NRF(I,1),I=0,4)
  656 FORMAT(/44X,'@@  W. SPEED RAIN FLAG CATEGORY COUNTS  @@'/1X,
     $ '(FOR ISUPOB=1 THIS INCLUDES ALL ORIGINAL RETR. EVEN THOSE NOT ',
     $ 'USED IN SUPEROBING DUE TO BEING IN BOXES WITH LESS THAN',I3,
     $ ' RETR.)'/40X,'(ALL CATEGORIES GREATER THAN',I3,' ARE NOT ',
     $ 'PROCESSED)'//
     $ 35X,'-->  CAT. 0, ERROR < 2 M/S  (ALL ALG.) .... ',I10,'  <--'/,
     $ 35X,'-->  CAT. 1, ERROR 2-5 M/S  (GOODBERLET)    '/,
     $ 35X,'             ERROR > 2 M/S  (NEURAL NET)... ',I10,'  <--'/,
     $ 35X,'-->  CAT. 2, ERROR 5-10 M/S (GOODBERLET) .. ',I10,'  <--'/,
     $ 35X,'-->  CAT. 3, ERROR > 10 M/S (GOODBERLET) .. ',I10,'  <--'/,
     $ 35X,'-->  CAT. IS MISSING ...................... ',I10,'  <--'/)
      END IF
      IF(IVAR(2).EQ.0.AND.QMPW)  THEN
         PRINT 658, LIMCNT,IQM,(NRF(I,2),I=0,4)
  658 FORMAT(/44X,'@@  P. WATER RAIN FLAG CATEGORY COUNTS  @@'/1X,
     $ '(FOR ISUPOB=1 THIS INCLUDES ALL ORIGINAL RETR. EVEN THOSE NOT ',
     $ 'USED IN SUPEROBING DUE TO BEING IN BOXES WITH LESS THAN',I3,
     $ ' RETR.)'/15X,'(ALL CATEGORIES GREATER THAN',I3,' ARE NOT ',
     $ 'PROCESSED, P. WATER W/ MISSING R. FLAG IS NEVER PROCESSED)'//
     $ 35X,'-->  CAT. 0, ERROR < 2 M/S  (ALL WSPD ALG.) ',I10,'  <--'/,
     $ 35X,'-->  CAT. 1, ERROR 2-5 M/S  (G-BERLET WSPD) '/,
     $ 35X,'             ERROR > 2 M/S  (N. NET WSPD) . ',I10,'  <--'/,
     $ 35X,'-->  CAT. 2, ERROR 5-10 M/S (G-BERLET WSPD) ',I10,'  <--'/,
     $ 35X,'-->  CAT. 3, ERROR > 10 M/S (G-BERLET WSPD) ',I10,'  <--'/,
     $ 35X,'-->  CAT. IS MISSING ...................... ',I10,'  <--'/)
      END IF

      IF(ISUPOB.EQ.1)  THEN

C  IF SUPEROBING WAS DONE, PRODUCE FINAL COUNTS OF ORIGINAL RETRIEVALS
C  -------------------------------------------------------------------

         PRINT 114, ITOBS,ITOBST
cdak     PRINT 115
cdak     PRINT 116, NOBS
      END IF
      PRINT 113, TEXT0(ISUPOB+1)
      PRINT 110, ICNT,ICNTT

      CALL W3TAGE('PREPOBS_PREPSSMI') 
      STOP

C-----------------------------------------------------------------------

  100 FORMAT(//20X,'*****  WELCOME TO THE SSM/I RETRIEVAL PROCESSOR: ',
     $ 'Y2K/F90 VERSION 20 AUG 2020  *****'/50X,'CENTER TIME:',I5,4I3/
     $ 31X,'TIME WINDOW IS +/-',I5,' (HOURS X 100 PLUS MINUTES) ABOUT ',
     $ 'CENTER TIME'///43X,'THE FOLLOWING PRODUCTS HAVE BEEN ',
     $ 'SPECIFIED:'/)
  101 FORMAT(48X,A34/)
 1101 FORMAT(22X,' * - SURFACE TAG, ICE CONCENTRATION, ICE AGE, ICE ',
     $ 'EDGE, CALCULATED SURFACE TYPE'/)
  106 FORMAT(/5X,'USER SPEC. SWITCHES: DELAT=',F5.1,'; DELON=',F5.1,
     $ '; LSAT=',10(L1,1X),'; ISUPOB=',I2/5X,'IVAR=',10I5,'; IQM=',I2,
     $ '; QMPW=',L1,'; LATITUDE BDRY:',I4,' TO',I4,' (S-N)'/5X,
     $ 'LONGITUDE BDRY:',I4,' TO',I4,' (W-E) DEG. W.'/5X,'LIMCNT=',I3,
     $ '; IALG=',I3/)
  107 FORMAT(23X,'LOOKING FOR SCANS WITHIN TIME LIMIT WINDOW ',I5,4I3,
     $ '  TO  ',I5,4I3,/)
  109 FORMAT(//' >>>>> ERROR ON UNIT',I3,' -- IER=',I8,' -- ABNORMAL ',
     $ 'STOP 16  <<<<<')
  110 FORMAT(40X,'>>>  OCEANIC SURFACE WIND SPEED . ',I10,'  <<<',/,
     $       40X,'>>>  OCEANIC PRECIPITABLE WATER . ',I10,'  <<<',/,
     $       40X,'>>>  RAINFALL RATE .............. ',I10,'  <<<',/,
     $       40X,'>>>  SURFACE TEMPERATURE ........ ',I10,'  <<<',/,
     $       40X,'>>>  OCEANIC CLOUD WATER ........ ',I10,'  <<<',/,
     $       40X,'>>>  SOIL MOISTURE .............. ',I10,'  <<<',/,
     $       40X,'>>>  SNOW DEPTH ................. ',I10,'  <<<',/,
     $       40X,'>>>  SEA-SURFACE TEMPERATURE .... ',I10,'  <<<',/,
     $       40X,'>>>  ADDITIONAL PRODUCTS ........ ',I10,'  <<<',/,
     $       40X,'>>>  BRIGHTNESS TEMP (7-CHANNEL). ',I10,'  <<<',//,
     $       40X,'>>>  TOTAL FOR ALL DATA TYPES ... ',I10,'  <<<',//,
     $       44X,'*****  PROGRAM SUCCESSFULLY COMPLETED  *****',/)
  113 FORMAT(/,44X,'***** ALL SSM/I ',A10,' PROCESSED *****',/)
  114 FORMAT(/,30X,'+++ NO. OF ORIGINAL RETRIEVALS THAT WERE USED TO G',
     $ 'ENERATE SUPEROBS +++'//45X,'OCEANIC SURFACE WIND SPEED . ',I10,
     $                        /45X,'OCEANIC PRECIPITABLE WATER . ',I10,
     $                        /45X,'RAINFALL RATE .............. ',I10,
     $                        /45X,'SURFACE TEMPERATURE ........ ',I10,
     $                        /45X,'OCEANIC CLOUD WATER ........ ',I10,
     $                        /45X,'SOIL MOISTURE .............. ',I10,
     $                        /45X,'SNOW DEPTH ................. ',I10,
     $                        /45X,'SEA-SURFACE TEMPERATURE .... ',I10,
     $                        /45X,'BRIGHTNESS TEMP (7-CHANNEL). ',I10,
     $                       //45X,'TOTAL FOR ALL DATA TYPES ... ',I10/)
  115 FORMAT(5X,'NOBS:')
  116 FORMAT(1X,30I4)
  118 FORMAT(//' >>>>> CANNOT SUPEROB "ADDITIONAL" PRODUCTS -- ',
     $ 'ABNORMAL STOP 18  <<<<<')
  119 FORMAT(//' >>>>> CANNOT PROCESS BOTH BRIGHTNESS TEMPERATURE AND ',
     $ 'ONE OR MORE PRODUCTS',
     $ ' -- ABNORMAL STOP 19  <<<<<')

C-----------------------------------------------------------------------

      END

C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    STORE1      UNPACKS SCANS, CHKS RETR, STORES PRODUCTS
C   PRGMMR: D. A. KEYSER     ORG: NP22       DATE: 1999-02-17
C
C ABSTRACT: UNPACKS THE 64 INDIVIDUAL RETRIEVALS OUT OF THE SCAN,
C   CHECKS RETRIEVALS AGAINST USER-SPECIFIED NAMELIST SWITCHES FOR
C   LAT/LON LIMITS, PRODUCT TYPE, AND "WORST" QUALITY MARK (FOR WIND
C   SPEED).  RETRIEVALS CONTAINING PRODUCTS WHICH PASS ALL CHECKS ARE
C   EITHER: STORED INTO XDATA ARRAY AND SENT TO SUBROUTINE OBUFRN FOR
C   ENCODING INTO OUTPUT BUFR FILE (IF NOT SUPEROBING); OR HAVE VALUE,
C   TIME, LATITUDE, LONGITUDE AND SUM OF SQUARES STORED INTO ARRAYS
C   BASED ON APPROPRIATE LAT/LON BOX (FOR LATER SUPEROBING).  THIS
C   SUBROUTINE HANDLES ONLY INPUT FROM PRODUCTS FILE, OR THE WIND
C   SPEED PRODUCT CALCULATED IN-LINE VIA GOODBERLET ALGORITHM FROM
C   BRIGHTNESS TEMPERATURES, OR THE WIND SPEED AND/OR TPW PRODUCT
C   CALCULATED IN- LINE VIA NEURAL NET ALGORITHM FROM BRIGHTNESS
C   TEMPERATURES.  SEE SUBROUTINE STORE2 FOR THE DIRECT PROCESSING OF
C   SEVEN-CHANNEL BRIGHTNESS TEMPERATURES.
C
C PROGRAM HISTORY LOG:
C 1993-01-21  D. A. KEYSER (NMC22) -- ORIGINAL AUTHOR
C 1993-07-21  D. A. KEYSER (NMC22) -- FOR INDIVIDUAL RETRIEVALS, ADDED
C        STORAGE OF ORIGINAL QUALITY MARKER (IN CHARACTER FORMAT IN
C        BYTE 2 OF CATEGORY 8 QUALITY MARKER WORD OF UNPACKED ON29
C        ARRAY); FOR SUPEROBS, STORES SUM OF SQUARES WITHIN EACH GRID
C        BOX (FOR LATER STANDARD DEVIATION CALCULATION)
C 1994-04-12  D. A. KEYSER (NMC22) -- MADE NECESSARY MODIFICATIONS TO
C        ALLOW SUBROUTINE TO COMPILE ON EITHER THE NAS OR THE CRAY
C 1994-09-06  D. A. KEYSER (NMC22) -- IN ORDER TO GET REGION SIZE DOWN
C        BELOW NAS LIMIT OF 9999K BYTES, COMBINED LATITUDE AND
C        LONGITUDE IN NEW STORAGE ARRAY "IPKDTA" (REPLACED "SUMLAT"
C        AND "SUMLON" STORAGE ARRAYS), EACH HELD IN 16-BITS; MODIFIED
C        TO ALLOW SUPEROBING OVER .5 DEG. BOXES, BUT ONLY IN NORTHERN
C        AND WESTERN HEMISPHERES
C 1994-10-05  D. A. KEYSER (NMC22) --  ADDED THE PRODUCTS CLOUD WATER,
C        SOIL MOISTURE AND SNOW DEPTH TO THE LIST OF PRODUCTS THAT CAN
C        BE PROCESSED; RENAMED TO 'STORE1' FROM 'STORE'
C 1995-01-05  D. A. KEYSER (NMC22) -- ADDED ABILITY TO PROCESS AND
C        -IF REQUESTED- SUPEROB WIND SPEED PRODUCTS THAT HAVE BEEN
C        GENERATED IN-LINE (VIA SUBR. W3FI86) USING EITHER THE
C        NEURAL NETWORK ALGORITHM OR THE GOODBERLET ALGORITHM.
C        THE ORIGINAL GOODBERLET WIND SPEED IN THE PRODUCTS DATA
C        SET(S) CAN ALSO STILL BE PROCESSED; NOTE HOWEVER THAT
C        ONLY ONE SOURCE OF WIND SPEED PRODUCT CAN BE CHOSEN IN A
C        SINGLE RUNNING OF THIS PROGRAM
C 1996-07-31  D. A. KEYSER (NP22) -- CAN NOW PROCESS OPERATIONAL FNOC
C        PRODUCTS ALONG WITH IN-LINE CALCULATED WIND SPEED PRODUCT;
C        ADDED N-LIST SWITCH "QMPW" WHICH, WHEN TRUE, WILL QUALITY
C        CONTROL TOTAL PRECIP. WATER PRODUCT AGAINST RAIN CONTAMINATION
C        FLAG AS IS DONE FOR WIND SPEED PRODUCT
C 1998-01-28  D. A. KEYSER (NP22) -- WITH CHANGE IN W3LIB ROUITNE
C        W3MISCAN, LATEST NN ALGORITHM (IALG=1) IS NN3 WHICH RETURNS
C        BOTH WIND SPEED AND TOTAL PRECIP. WATER PRODUCTS (UNLIKE NN2
C        WHICH RETURNED ONLY WIND SPEED), ALSO NN3 CAN ONLY RETURN
C        PRODUCTS WITH NO RAIN CONTAMINATION SO Q.M. HERE IS HARDWIRED
C        TO '0'
C 1999-02-17  D.A. KEYSER -- FOR NON-SUPEROB CASE, STORES DATA IN
C        XDATA ARRAY RATHER THAN UNPACKED ON29 ARRAY (OUTPUT FILE IS
C        NOW IN BUFR)
C
C USAGE:    CALL STORE1(ITIME,NRF,IALG,NCEPRD)
C   INPUT ARGUMENT LIST:
C     ITIME    - SCAN TIME (HOURS X 1000) (MAYBE PLUS 24000)
C     NRF      - (5,2) ARRAY HOLDING COUNTS FOR WIND SPEED (X,1) AND
C              - POSSIBLY TOTAL PRECIP. WATER (X,2) ACCORDING TO THE
C              - 4 RAIN FLAG CATEGORIES (PLUS MISSING RAIN FLAG), NOT
C              - INCLUDING ANY WIND SPEED/TOTAL PRECIP. WATER
C              - RETRIEVALS IN THIS SCAN
C     IALG     - INDICATOR ALGORITHM TYPE FOR WIND SPEED (=0 -
C              - WIND SPEED -IF SELECTED- OBTAINED FROM INPUT PRODUCTS
C              - FILE (EITHER FNOC OR NCEP); =1 - WIND SPEED IF
C              - SELECTED- AND - TPW -IF SELECTED- CALCULATED IN-
C              - LINE VIA NEURAL NET ALGORITHM FROM BRIGHTNESS
C              - TEMPERATURES; =2 - WIND SPEED -IF SELECTED- CALCULATED
C              - IN-LINE VIA GOODBERLET ALGORITHM FROM BRIGHTNESS
C              - TEMPERATURES)
C     NCEPRD   - LOGICAL, IF TRUE INDICATES THAT INPUT FILE TO THIS
C              - PROGRAM IS AN NCEP PRODUCTS FILE AND NOTHIS ELSE
C
C   OUTPUT ARGUMENT LIST:
C     NRF      - (5,2) ARRAY HOLDING COUNTS FOR WIND SPEED (X,1) AND
C              - POSSIBLY TOTAL PRECIP. WATER (X,2) ACCORDING TO THE
C              - 4 RAIN FLAG CATEGORIES (PLUS MISSING RAIN FLAG),
C              - INCLUDING ANY WIND SPEED/TOTAL PRECIP. WATER
C              - RETRIEVALS IN THIS SCAN
C
C   OUTPUT FILES:
C     UNIT 06  - STANDARD OUTPUT PRINT
C
C REMARKS: CALLED BY MAIN PROGRAM.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 90
C   MACHINE:  WCOSS
C
C$$$
      SUBROUTINE STORE1(ITIME,NRF,IALG,NCEPRD)

      LOGICAL  QMPW,NCEPRD

      CHARACTER*5  TEXT2(8)
      CHARACTER*15 TEXT1(8)

      INTEGER  IDAT(27,64),L(8),M(2),N(0:2),NRF(0:4,2)

      REAL  SCALE(8),SCALE1(8)

      COMMON/SCAN/IBUFTN(1737)
      COMMON/KOUNT/ICNT(10),ICNTT,NFILE,IRECL,ISUBL,ISUBT
      COMMON/SWITCH/IVAR(10),IQM,ISUPOB,LATS,LATN,LONW,LONE,LIMCNT,QMPW
      COMMON/DGRID/LATSIZ,LONSIZ
      COMMON/BGRID/BLAT(360),BLON(720),NOBS(8,720,360)
      COMMON/SAVED/ITOBS(9),ITOBST,DGH,DGV,SUMDTA(8,720,360),
     $ SSQDTA(8,720,360),SUMTIM(8,720,360),SUMLAT(8,720,360),
     $ SUMLON(8,720,360)
      COMMON/REPT/XDATA(36),YDATA(3,7)

      EQUIVALENCE  (IDAT,IBUFTN(10))

      DATA  L/7,12,6,13,5,8,14,13/,M/24,26/,N/15,-99999,27/
      DATA  SCALE /10.,10.,1000000.,100.,100.,1000.,1000.,100./
      DATA  SCALE1/10.,10.,  278.,100.,100.,   1.,   1.,100./
      DATA  TEXT2/'M/SEC','MM   ','MM/HR','DEG K','MM   ','MM   ',
     $            'MM   ','DEG K'/
      DATA  TEXT1/'  WIND SPEED   ','  PREC. WATER  ','RAINFALL RATE  ',
     $            '  SFC. TEMP.   ','  CLOUD WATER  ','SOIL MOISTURE  ',
     $            '  SNOW DEPTH   ','SEA-SFC. TEMP. '/
      DATA BMISS/10E8/,IMISS/99999/

C***********************************************************************
C      LOOP THROUGH THE 64 RETRIEVALS THAT MAKE UP THE SCAN
C***********************************************************************

      LOOP1: DO IRTV = 1,64

C  STORE LAT. IN INLAT: INPUT AND OUTPUT: N(+), S(-) X 100
C  -------------------------------------------------------

         IF(IDAT(1,IRTV).GE.IMISS)  CYCLE LOOP1
         INLAT = IDAT(1,IRTV)

C  STORE LON. IN IWLON: INPUT: 0-360 E X 100; OUTPUT:  0-360 W X 100
C  STORE LON. IN IELON: INPUT AND OUTPUT: 0-360 E X 100
C  -----------------------------------------------------------------

         IF(IDAT(2,IRTV).GE.IMISS)  CYCLE LOOP1
         IWLON = MOD((36000-IDAT(2,IRTV)),36000)
         IELON = IDAT(2,IRTV)

C  CHECK THAT THIS RETRIEVAL IS WITHIN THE SPECIFIED LAT/LON BOUNDARY;
C   IF NOT, GO ON TO NEXT RETRIEVAL IN THE SCAN
C  -------------------------------------------------------------------

         IWLONT = IWLON
         LONWT  = LONW
         IF(LONW.LT.LONE)  THEN
            IF(IWLON.LT.LONE*100)  IWLONT = IWLON + 36000
            LONWT = LONW + 360
         END IF
         IF(INLAT.LT.LATS*100.OR.INLAT.GE.LATN*100.OR.IWLONT.GT.
     $    LONWT*100.OR.IWLONT.LE.LONE*100)  CYCLE LOOP1

         IGOOD = 0
         ILM = 0
         JLM = 0

         IF(NCEPRD)  THEN

C  FOR INPUT NCEP PROD. FILE (LATEST N.NET ALG.): RAIN FLAG ALWAYS 0
C  -----------------------------------------------------------------
            IRAINF = 0
         ELSE
            IRAINF = IDAT(N(IALG),IRTV)
         END IF

         IF(IALG.GT.0)  THEN

C  FOR IN-LINE WIND SPEED CALC.: TRANSFER WSPD TO LOCATION OF WSPD
C   FROM PROD. FILE, ALSO IF BARELY NEG. SET TO 0 SO IT'S PROCESSED
C  ----------------------------------------------------------------

            IDAT(7,IRTV) = IDAT(M(IALG),IRTV)
            IF(IDAT(7,IRTV).LT.0.AND.IDAT(7,IRTV).GT.-20) IDAT(7,IRTV)=0
            IF(IALG.EQ.1)  THEN

C  FOR IN-LINE TPW CALC.: TRANSF. TPW TO LOCATION OF TPW FROM PROD.
C   FILE FOR IALG=1: RAIN FLAG IS ALWAYS SET TO ZERO
C  ----------------------------------------------------------------

               IDAT(12,IRTV) = IDAT(25,IRTV)
               IRAINF = 0
            END IF
         END IF

C-----------------------------------------------------------------------
C LOOP THROUGH THE FIRST 8 POSSIBLE PRODUCT TYPES AS SPECIFIED BY USER
C-----------------------------------------------------------------------
         LOOP1n1: DO K = 1,8

C  CHECK FOR USER-SPECIFICATION AND VALID PRODUCT
C   (NOTE: MUST USE SURFACE TAG TO DIFFERENTIATE BETWEEN SST AND SURF.
C          TEMP. AS BOTH ARE RETURNED IN SAME LOCATION)
C  -------------------------------------------------------------------

            IF(IVAR(K).NE.0.OR.IDAT(L(K),IRTV).GE.IMISS)  CYCLE LOOP1n1
            IF(K.EQ.4)  THEN
               IF(IDAT(4,IRTV).EQ.5)  CYCLE LOOP1n1
            ELSE  IF(K.EQ.8)  THEN
               IF(IDAT(4,IRTV).NE.5)  CYCLE LOOP1n1
            END IF

C  ZDATA IS THE SELECTED PRODUCT VALUE SCALED TO BUFR UNITS:
C     FOR K = 1   ==> OCEANIC WIND SPEED (M/S)
C                     (FROM INPUT PRODUCTS FILE OR CALCULATED IN-LINE
C                      FROM INPUT B. TEMP FILE VIA EITHER NEURAL NET
C                      OR GOODBERLET ALGORITHM)
C     FOR K = 2   ==> OCEANIC TOTAL PRECIPITABLE WATER KG/(M**2) {MM}
C                     (FROM INPUT PRODUCTS FILE OR CALCULATED IN-LINE
C                      FROM INPUT B. TEMP FILE VIA NEURAL NET ALGORITHM)
C     FOR K = 3   ==> RAINFALL RATE KG /((M**2)*SEC) {MM/SEC}
C     FOR K = 4   ==> SURFACE TEMPERATURE (DEGREES KELVIN)
C     FOR K = 5   ==> OCEANIC CLOUD WATER KG/(M**2) {MM}
C     FOR K = 6   ==> SOIL MOISTURE (METERS)
C     FOR K = 7   ==> SNOW DEPTH (METERS)
C     FOR K = 8   ==> SEA-SURFACE TEMPERATURE (DEGREES KELVIN)

            ZDATA = IDAT(L(K),IRTV)/SCALE(K)

C  JDATA IS THE SELECTED PRODUCT VALUE AS READ IN FROM W3MISCAN
C   (DATA TYPE SAME AS FOR ZDATA, SEE W3MISCAN FOR UNITS)
C  ------------------------------------------------------------

            JDATA = IDAT(L(K),IRTV)

C  CHECK THAT THE UNPACKED PRODUCT VALUE IS A POSITIVE NUMBER
C  ----------------------------------------------------------

            IF(JDATA.LT.0)  THEN
               PRINT 101, TEXT1(K),REAL(JDATA)/SCALE1(K),TEXT2(K),
     $          IBUFTN(8),IBUFTN(9),INLAT,IWLON
               CYCLE LOOP1n1
            END IF
            IF(K.EQ.1.OR.(K.EQ.2.AND.QMPW))  THEN
               IF(IRAINF.LT.4)  THEN
                  NRF(IRAINF,K) = NRF(IRAINF,K) + 1
               ELSE
                  IF(K.EQ.1)  THEN
                     PRINT 567
                  ELSE
                     PRINT 568
                  END IF
  567 FORMAT(/1X,'+++ WIND SPEED RAIN FLAG IS MISSING, YET WIND SPEED ',
     $ 'PRODUCT IS NON-MISSING (SHOULD NEVER HAPPEN) - WIND SPEED NOT ',
     $ 'PROCESSED'/)
  568 FORMAT(/1X,'+++ WIND SPEED RAIN FLAG IS MISSING, YET P. WATER ',
     $ 'PRODUCT IS NON-MISSING (CAN HAPPEN?) - P. WATER IS NOT ',
     $ 'PROCESSED'/)
                  NRF(4,K) = NRF(4,K) + 1
               END IF

C  IF PROCESSING WIND SPEED OR PRECIP. WATER (AND QMPW IS TRUE FOR
C   LATTER): CHECK Q.M. AGAINST USER-SPECIFIED Q.M. LIMIT (NOTE: P.
C   WATER WITH MISSING Q.M. IS NEVER PROCESSED)
C  ----------------------------------------------------------------

               IF(IRAINF.GT.IQM)  CYCLE LOOP1n1
            END IF

C.......................................................................
C                    WE HAVE A VALID RETRIEVAL
C.......................................................................

            IF(ISUPOB.EQ.0)  THEN

C. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

C  IF NOT SUPEROBING, ENCODE ORIGINAL OBS INTO BUFR (AFTER INITALIZING
C   XDATA ARRAY AS MISSING)
C  -------------------------------------------------------------------

               XDATA = BMISS
               ICNT(K) = MIN(999999,ICNT(K)+1)
               ICNTT = ICNTT + 1

C  WRITE REPORT YEAR, MONTH, DAY TO XDATA(1), XDATA(2), XDATA(3), RESP.
C  WRITE REPORT HOUR, MIN, SEC TO XDATA(4), XDATA(5), XDATA(6), RESP.
C  --------------------------------------------------------------------
               XDATA(1:6)  = IBUFTN(2:7)

C  WRITE LAT. TO XDATA(7): INPUT: N(+), S(-) X 100; OUTPUT: N(+), S(-)
C  -------------------------------------------------------------------

               XDATA(7) = INLAT/100.

C  WRITE LON. TO XDATA(8): INPUT: 0-360 EAST X 100; OUTPUT: 0-360 EAST
C  -------------------------------------------------------------------

               XDATA(8) = IELON/100.

C  REPORT TYPE WILL BE WRITTEN TO XDATA(9) IN SUBR. OBUFRN (VARIES)
C  ----------------------------------------------------------------


C  WRITE NUMBER THAT WENT INTO AVERAGING TO XDATA(10) -- ALWAYS 1 HERE
C  -------------------------------------------------------------------

               XDATA(10) = 1

C  WRITE SATELLITE IDENTIFIER TO XDATA(11)
C  ---------------------------------------

               IF(IBUFTN(1).LT.IMISS)  XDATA(11) = IBUFTN(1)

C  WRITE ORBIT NUMBER TO XDATA(12)
C  -------------------------------

               IF(IBUFTN(9).LT.IMISS)  XDATA(12) = IBUFTN(9)

C  WRITE SCAN NUMBER TO XDATA(13)
C  ------------------------------

               IF(IBUFTN(8).LT.IMISS)  XDATA(13) = IBUFTN(8)

C  WRITE POSITION NUMBER TO XDATA(14)
C  ----------------------------------

               IF(IDAT(3,IRTV).LT.IMISS)  XDATA(14) = IDAT(3,IRTV)

C  WRITE PRODUCT VALUE TO XDATA(14+K) (SEE ABOVE FOR K)
C   (NOTE: AT THIS POINT, ZDATA CAN NEVER BE MISSING)
C  ----------------------------------------------------

               XDATA(14+K) = ZDATA

C  VALUES IN XDATA(23) THROUGH XDATA(30) APPLY ONLY TO SUPEROBS
C  ------------------------------------------------------------


C  WRITE RAIN FLAG (QUALITY MARKER) TO XDATA(31): (ONLY FOR SURFACE
C   WIND SPEED OR TOTAL PRECIPITABLE WATER, THE LATTER WHEN QMPW=T)
C  ----------------------------------------------------------------

               IF(IRAINF.LT.4)  THEN
                  IF(K.EQ.1.OR.(K.EQ.2.AND.QMPW))  XDATA(31) = IRAINF
               END IF

C  SUBROUTINE OBUFRN ENCODES THE OBS INTO OUTPUT BUFR FILE
C  -------------------------------------------------------

               CALL OBUFRN(K)

            ELSE

C. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

C  IF SUPEROBING, FIND LAT/LON BOX CONTAINING THIS RETRIEVAL (ILM, JLM)
C   (SINCE ALL PRODUCTS HAVE SAME LOCATION, THIS IS DONE ONLY FOR FIRST
C    REQUESTED PRODUCT THAT PASSES ALL OF THE CHECKS)
C  --------------------------------------------------------------------

               IF(IGOOD.EQ.0)  THEN
                  LATBEG = 1
                  KNDX = 0
                  LOOP1n2: DO II = LATBEG,LATSIZ
                     KNDX = KNDX + 1
                     IF(INLAT.GE.NINT((BLAT(KNDX)+DGV)*100.).OR.
     $                INLAT.LT.NINT((BLAT(KNDX)-DGV)*100.))CYCLE LOOP1n2
                     ILM = KNDX
                     LOOP1n3: DO IJ = 1,LONSIZ
                        IF(IWLON.GE.NINT((BLON(IJ)+DGH)*100.).OR.
     $                  IWLON.LT.NINT((BLON(IJ)-DGH)*100.))CYCLE LOOP1n3
                        JLM = IJ
                        GO TO 5
                     ENDDO LOOP1n3
                  ENDDO LOOP1n2

C  IF NO BOX FOUND, GO ON TO NEXT RETRIEVAL IN THE SCAN
C  ----------------------------------------------------

                  PRINT 105, INLAT,IWLON
                  CYCLE LOOP1
    5             CONTINUE
                  IGOOD = 1
               END IF

C  THE FOLLOWING SHOULD   N E V E R   HAPPEN!!
C  -------------------------------------------

               IF(ILM.EQ.0.OR.JLM.EQ.0)  THEN
                  PRINT *, '&&& EITHER ILM (',ILM,') OR JLM (',JLM,')',
     $             ' IS ZERO -- SHOULD NEVER HAPPEN !!!'
                  CYCLE LOOP1
               END IF

C  SUM UP VALUES WITHIN THE GRID BOX ILM, JLM
C  ------------------------------------------

               NOBS(K,JLM,ILM)   = NOBS(K,JLM,ILM) + 1
               SUMDTA(K,JLM,ILM) = SUMDTA(K,JLM,ILM) + JDATA
               SSQDTA(K,JLM,ILM) = SSQDTA(K,JLM,ILM) + REAL(JDATA*JDATA)
               SUMTIM(K,JLM,ILM) = SUMTIM(K,JLM,ILM) + REAL(ITIME)
               SUMLAT(K,JLM,ILM) = SUMLAT(K,JLM,ILM) + REAL(INLAT)
               SUMLON(K,JLM,ILM) = SUMLON(K,JLM,ILM) + REAL(IELON)

C. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

            END IF
         ENDDO LOOP1n1

C-----------------------------------------------------------------------

C  CALL SUBR. STORE3 IF "ADDITIONAL" PRODUCTS SPECIFIED BY USER
C  ------------------------------------------------------------

         IF(IVAR(9).EQ.0)  CALL STORE3(IRTV)

      ENDDO LOOP1

C***********************************************************************

  101 FORMAT(1X,'+++ NEG. ',A15,', SKIP:',F10.2,1X,A5,'; AT SCAN NO.',
     $ I8,'; ORBIT NO.',I8,'; LAT =',I7,' DEG. N; LON =',I7,' DEG. W')
  105 FORMAT(5X,'* * * *   RETRIEVAL LAT/LON IS EITHER MISSING OR ',
     $ 'INVALID, LAT=',I5,', LON=',I6,' -- GO ON TO NEXT RETRIEVAL IN ',
     $ 'THE SCAN'/)

      RETURN

      END

C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    STORE2      UNPACKS SCANS, CHKS RETR, STORES B. TEMPS 
C   PRGMMR: D. A. KEYSER     ORG: NP22       DATE: 1999-02-17
C
C ABSTRACT: UNPACKS THE 64 INDIVIDUAL RETRIEVALS OUT OF THE SCAN.
C   CHECKS RETRIEVALS AGAINST USER-SPECIFIED NAMELIST SWITCHES
C   FOR LAT/LON LIMITS.  RETRIEVALS CONTAINING BRIGHTNESS TEMPERATURE
C   WHICH PASS ALL CHECKS ARE EITHER: STORED INTO XDATA ARRAY AND SENT
C   TO SUBROUTINE OBUFRN FOR ENCODING INTO OUTPUT BUFR FILE (IF NOT
C   SUPEROBING); OR HAVE BRIGHTNESS TEMPERATURE, TIME, LATITUDE AND
C   LONGITUDE STORED INTO ARRAYS BASED ON APPROPRIATE LAT/LON BOX
C   (FOR LATER SUPEROBING).  THIS SUBROUTINE HANDLES ONLY THE SEVEN-
C   CHANNEL BRIGHTNESS TEMPERATURES.  SEE SUBROUTINE STORE1 FOR
C   PRODUCTS.
C
C PROGRAM HISTORY LOG:
C 1994-10-05  D. A. KEYSER (NMC22) --  ADAPTED FROM ORIGINAL
C        SUBROUTINE STORE, BUT NOW TO PROCESS THE SEVEN CHANNELS OF
C        BRIGHTNESS TEMPERATURES
C 1999-02-17  D.A. KEYSER -- FOR NON-SUPEROB CASE, STORES DATA IN
C        XDATA AND YDATA ARRAYS RATHER THAN UNPACKED ON29 ARRAY
C        (OUTPUT FILE IS NOW IN BUFR)
C
C USAGE:    CALL STORE2(ITIME)
C   INPUT ARGUMENT LIST:
C     ITIME    - SCAN TIME (HOURS X 1000) (MAYBE PLUS 24000)
C
C   OUTPUT FILES:
C     UNIT 06  - STANDARD OUTPUT PRINT
C
C REMARKS: CALLED BY MAIN PROGRAM.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 90
C   MACHINE:  WCOSS
C
C$$$
      SUBROUTINE STORE2(ITIME)

      CHARACTER*15 TEXT1(7)

      INTEGER  IDAT(27,64)

      REAL  SUM(7),SSQ(7)

      COMMON/SCAN/IBUFTN(1737)
      COMMON/KOUNT/ICNT(10),ICNTT,NFILE,IRECL,ISUBL,ISUBT
      COMMON/SWITCH/IVAR(10),IQM,ISUPOB,LATS,LATN,LONW,LONE,LIMCNT,QMPW
      COMMON/DGRID/LATSIZ,LONSIZ
      COMMON/BGRID/BLAT(360),BLON(720),NOBS(8,720,360)
      COMMON/SAVED/ITOBS(9),ITOBST,DGH,DGV,SUMDTA(8,720,360),
     $ SSQDTA(8,720,360),SUMTIM(8,720,360),SUMLAT(8,720,360),
     $ SUMLON(8,720,360)
      COMMON/REPT/XDATA(36),YDATA(3,7)

      EQUIVALENCE  (IDAT,IBUFTN(10))

      DATA  TEXT1/' 19 GHZ V BT   ',' 19 GHZ H BT   ',' 22 GHZ V BT   ',
     $            ' 37 GHZ V BT   ',' 37 GHZ H BT   ',' 85 GHZ V BT   ',
     $            ' 85 GHZ H BT   '/
      DATA  BMISS/10E8/,IMISS/99999/

C***********************************************************************
C      LOOP THROUGH THE 64 RETRIEVALS THAT MAKE UP THE SCAN
C***********************************************************************

      LOOP1: DO IRTV = 1,64

C  STORE LAT. IN INLAT: INPUT AND OUTPUT: N(+), S(-) X 100
C  -------------------------------------------------------

         IF(IDAT(1,IRTV).GE.IMISS)  CYCLE LOOP1
         INLAT = IDAT(1,IRTV)

C  STORE LON. IN IWLON: INPUT: 0-360 E X 100; OUTPUT:  0-360 W X 100
C  STORE LON. IN IELON: INPUT AND OUTPUT: 0-360 E X 100
C  -----------------------------------------------------------------

         IF(IDAT(2,IRTV).GE.IMISS)  CYCLE LOOP1
         IWLON =  MOD((36000-IDAT(2,IRTV)),36000)
         IELON =  IDAT(2,IRTV)

C  CHECK THAT THIS RETRIEVAL IS WITHIN THE SPECIFIED LAT/LON BOUNDARY;
C   IF NOT, GO ON TO NEXT RETRIEVAL IN THE SCAN
C  -------------------------------------------------------------------

         IWLONT = IWLON
         LONWT  = LONW
         IF(LONW.LT.LONE)  THEN
            IF(IWLON.LT.LONE*100)  IWLONT = IWLON + 36000
            LONWT = LONW + 360
         END IF
         IF(INLAT.LT.LATS*100.OR.INLAT.GE.LATN*100.OR.IWLONT.GT.
     $    LONWT*100.OR.IWLONT.LE.LONE*100)  CYCLE LOOP1

         ILM = 1
         JLM = 1
         IF(ISUPOB.EQ.1)  THEN

C  IF SUPEROBING, FIND LAT/LON BOX CONTAINING THIS RETR. (ILM, JLM)
C  ----------------------------------------------------------------

            ILM = 0
            JLM = 0
            LATBEG = 1
            KNDX = 0
            LOOP1n1: DO II = LATBEG,LATSIZ
               KNDX = KNDX + 1
               IF(INLAT.GE.NINT((BLAT(KNDX)+DGV)*100.).OR.
     $            INLAT.LT.NINT((BLAT(KNDX)-DGV)*100.))  CYCLE LOOP1n1
               ILM = KNDX
               LOOP1n2: DO IJ = 1,LONSIZ
                  IF(IWLON.GE.NINT((BLON(IJ)+DGH)*100.).OR.
     $               IWLON.LT.NINT((BLON(IJ)-DGH)*100.))  CYCLE LOOP1n2
                  JLM = IJ
                  GO TO 5
               ENDDO LOOP1n2
            ENDDO LOOP1n1

C  IF NO BOX FOUND, GO ON TO NEXT RETRIEVAL IN THE SCAN
C  ----------------------------------------------------

            PRINT 105, INLAT,IWLON
            CYCLE LOOP1
    5       CONTINUE

C  THE FOLLOWING SHOULD   N E V E R   HAPPEN!!
C  -------------------------------------------

            IF(ILM.EQ.0.OR.JLM.EQ.0)  THEN
               PRINT *, '&&& EITHER ILM (',ILM,') OR JLM (',JLM,') IS',
     $          ' ZERO -- SHOULD NEVER HAPPEN !!!'
               CYCLE LOOP1
            END IF
         END IF

C-----------------------------------------------------------------------
C       LOOP THROUGH THE SEVEN CHANNELS OF BRIGHTNESS TEMPERATURES
C
C  THE SEVEN BRIGHTNESS TEMPERATURES STORED ARE:
C     FOR K = 1   ==> 19 GHZ V BRIGHTNESS TEMPERATURE (DEGREES KELVIN)
C     FOR K = 2   ==> 19 GHZ H BRIGHTNESS TEMPERATURE (DEGREES KELVIN)
C     FOR K = 3   ==> 22 GHZ V BRIGHTNESS TEMPERATURE (DEGREES KELVIN)
C     FOR K = 4   ==> 37 GHZ V BRIGHTNESS TEMPERATURE (DEGREES KELVIN)
C     FOR K = 5   ==> 37 GHZ H BRIGHTNESS TEMPERATURE (DEGREES KELVIN)
C     FOR K = 6   ==> 85 GHZ V BRIGHTNESS TEMPERATURE (DEGREES KELVIN)
C     FOR K = 7   ==> 85 GHZ H BRIGHTNESS TEMPERATURE (DEGREES KELVIN)
C
C    ONE REPORT WILL CONSIST OF THE SEVEN BRIGHTNESS TEMPERATURES
C-----------------------------------------------------------------------

         YDATA = BMISS

         DO K = 1,7

C  WRITE THE CHANNEL TO YDATA(1,K)
C  -------------------------------

            YDATA(1,K) = K

            IF(IDAT(K+16,IRTV).LT.IMISS)  THEN
               IF(IDAT(K+16,IRTV).GT.0)  THEN

C  COME HERE IF THE B. TEMP. FOR THIS CHN IS A NON-MISSING POS. NUMBER
C  -------------------------------------------------------------------

C   WRITE THE B. TEMP TO YDATA(2,K) WHERE K=1,7 IS DEFINED ABOVE
C   ------------------------------------------------------------

                  YDATA(2,K) = REAL(IDAT(K+16,IRTV))/100.

C   VALUES IN YDATA(3,K) WHERE K=1,7 APPLY ONLY TO SUPEROBS
C   -------------------------------------------------------


               ELSE
                  IF(ISUPOB.EQ.0)  THEN
                     PRINT 101, TEXT1(K),YDATA(2,K),IBUFTN(8),IBUFTN(9),
     $                INLAT,IWLON
                  ELSE
                     PRINT 102, TEXT1(K),YDATA(2,K),IBUFTN(8),IBUFTN(9),
     $                INLAT,IWLON
                     CYCLE LOOP1
                  END IF
               END IF
            END IF

C  SUM THE SEVEN B. TEMPS & THEIR SQUARES INTO SUM AND SSQ, RESP.
C   (FOR ISUPOB = 1 WILL BE USED LATER TO UPDATE SUMS IN GRID BOX)
C  ---------------------------------------------------------------

            SUM(K) = SUMDTA(K,JLM,ILM) + REAL(IDAT(K+16,IRTV))
            SSQ(K) = SSQDTA(K,JLM,ILM) +
     $       (REAL(IDAT(K+16,IRTV))*REAL(IDAT(K+16,IRTV)))

         ENDDO

C-----------------------------------------------------------------------

         IF(MAX(YDATA(2,1),YDATA(2,2),YDATA(2,3),YDATA(2,4),
     $    YDATA(2,5),YDATA(2,6),YDATA(2,7)).GT.BMISS-1..AND.ISUPOB.EQ.1)
     $    THEN

C  IF SUPEROBING, ALL SEVEN BRIGHTNESS TEMPERATURES MUST BE
C   NON-MISSING; IF NOT, GO ON TO NEXT RETRIEVAL IN THE SCAN
C  ---------------------------------------------------------

            PRINT 106, IBUFTN(8),IBUFTN(9),(YDATA(2,III),III=1,7)
            CYCLE LOOP1
         END IF

C-----------------------------------------------------------------------
C                    WE HAVE A VALID RETRIEVAL
C-----------------------------------------------------------------------

         IF(ISUPOB.EQ.0)  THEN

C.......................................................................

C  IF NOT SUPEROBING, ENCODE ORIGINAL OBS INTO BUFR (AFTER INITALIZING
C   XDATA ARRAY AS MISSING)
C  -------------------------------------------------------------------

            XDATA = BMISS
            ICNT(10) = MIN(999999,ICNT(10)+1)
            ICNTT = ICNTT + 1

C  WRITE REPORT YEAR, MONTH, DAY TO XDATA(1), XDATA(2), XDATA(3), RESP.
C  WRITE REPORT HOUR, MIN, SEC TO XDATA(4), XDATA(5), XDATA(6), RESP.
C  --------------------------------------------------------------------

            XDATA(1:6)  = IBUFTN(2:7)

C  WRITE LAT. TO XDATA(7): INPUT: N(+), S(-) X 100; OUTPUT: N(+), S(-)
C  -------------------------------------------------------------------

            XDATA(7)  = INLAT/100.

C  WRITE LON. TO XDATA(8): INPUT: 0-360 EAST X 100; OUTPUT: 0-360 EAST
C  -------------------------------------------------------------------

            XDATA(8)  = IELON/100.

C  WRITE REPORT TYPE TO XDATA(9) (SET = 68)
C  ----------------------------------------

            XDATA(9)  = 68.

C  WRITE NUMBER THAT WENT INTO AVERAGING TO XDATA(10) -- ALWAYS 1 HERE
C  -------------------------------------------------------------------

            XDATA(10) = 1

C  WRITE SATELLITE IDENTIFIER TO XDATA(11)
C  ---------------------------------------

            IF(IBUFTN(1).LT.IMISS)  XDATA(11) = IBUFTN(1)

C  WRITE ORBIT NUMBER TO XDATA(12)
C  -------------------------------

            IF(IBUFTN(9).LT.IMISS)  XDATA(12) = IBUFTN(9)

C  WRITE SCAN NUMBER TO XDATA(13)
C  ------------------------------

            IF(IBUFTN(8).LT.IMISS)  XDATA(13) = IBUFTN(8)

C  WRITE POSITION NUMBER TO XDATA(14)
C  ----------------------------------

            IF(IDAT(3,IRTV).LT.IMISS)  XDATA(14) = IDAT(3,IRTV)

C  {THE 7 CHN. NUMBERS AND B.TEMPS ALREADY WRITTEN TO YDATA(1,K) AND
C   YDATA(2,K), RESP. WHERE K=1,7}
C  -----------------------------------------------------------------


C  SUBROUTINE OBUFRN ENCODES THE OBS INTO OUTPUT BUFR FILE
C  -------------------------------------------------------

            CALL OBUFRN(10)

         ELSE

C-----------------------------------------------------------------------

C  IF SUPEROBING, SUM UP VALUES WITHIN THE GRID BOX ILM, JLM
C  ---------------------------------------------------------

            NOBS(1,JLM,ILM)     = NOBS(1,JLM,ILM) + 1
            SUMDTA(1:7,JLM,ILM) = SUM(1:7)
            SSQDTA(1:7,JLM,ILM) = SSQ(1:7)
            SUMTIM(1,JLM,ILM) = SUMTIM(1,JLM,ILM) + REAL(ITIME)
            SUMLAT(1,JLM,ILM) = SUMLAT(1,JLM,ILM) + REAL(INLAT)
            SUMLON(1,JLM,ILM) = SUMLON(1,JLM,ILM) + REAL(IELON)

C-----------------------------------------------------------------------

         END IF
      ENDDO LOOP1

C***********************************************************************

  101 FORMAT(' +++ NEG. ',A15,', SET TO MSG:',F10.2,' DEG K; AT SCAN ',
     $ 'NO.',I8,'; ORBIT NO.',I8,'; LAT =',I7,' DEG. N; LON =',I7,
     $ ' DEG. W')
  102 FORMAT(' +++ NEG. ',A15,':',F10.2,' DEG K; AT SCAN NO.',I8,
     $ '; ORBIT NO.',I8,'; LATAT LAT =',I7,' DEG. N; LON =',I7,' DEG. W'
     $ /15X,' -- GO ON TO NEXT RETRIEVAL IN THE SCAN'/)
  105 FORMAT(5X,'* * * *   RETRIEVAL LAT/LON IS EITHER MISSING OR ',
     $ 'INVALID, LAT=',I5,', LON=',I6,' -- GO ON TO NEXT RETRIEVAL IN ',
     $ 'THE SCAN'/)
  106 FORMAT(' +++ ONE OF THE SEVEN B.T.S IN THIS RETR. MISSING ',
     $ '(SUPEROBING) AT SCAN NO.',I8,'; ORBIT NO.',I8,'; GO TO NEXT ',
     $ 'RETR. IN SCAN'/15X,'BRIGHTNESS TEMPERATURES: ',7(I7,1X)/)

      RETURN

      END

C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    STORE3      STORES ADD'L PRODUCTS INTO XDATA ARRAY
C   PRGMMR: D. A. KEYSER     ORG: NP22       DATE: 1999-02-17
C
C ABSTRACT: STORES THE ADDITIONAL PRODUCTS INTO XDATA ARRAY ALONG
C   WITH REPORT'S LATITUDE, LONGITUDE AND TIME.  THEN CALLS
C   SUBROUTINE OBUFRN TO ENCODE REPORT INTO OUTPUT BUFR FILE.  ONLY
C   NON-MISSING PRODUCTS ARE STORED, UP TO FIVE POSSIBLE.
C
C PROGRAM HISTORY LOG:
C 1994-10-05  D. A. KEYSER (NMC22) --  ORIGINAL AUTHOR
C 1999-02-17  D.A. KEYSER -- STORES DATA IN XDATA ARRAY RATHER THAN
C        UNPACKED ON29 ARRAY (OUTPUT FILE IS NOW IN BUFR)
C
C USAGE:    CALL STORE3(IRTV)
C   INPUT ARGUMENT LIST:
C     IRTV     - INDEX POINTING TO RETRIEVAL NUMBER IN SCAN (1-64)
C
C   OUTPUT FILES:
C     UNIT 06  - STANDARD OUTPUT PRINT
C
C REMARKS: CALLED BY SUBROUTINE 'STORE1'.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 90
C   MACHINE:  WCOSS
C
C$$$
      SUBROUTINE STORE3(IRTV)

      CHARACTER*5  TEXT2(5)
      CHARACTER*15 TEXT1(5)

      INTEGER  IDAT(27,64),L(5)

      COMMON/SCAN/IBUFTN(1737)
      COMMON/KOUNT/ICNT(10),ICNTT,NFILE,IRECL,ISUBL,ISUBT
      COMMON/REPT/XDATA(36),YDATA(3,7)
      EQUIVALENCE  (IDAT,IBUFTN(10))

      DATA  TEXT1/'  SURFACE TAG  ',' ICE CONCENT.  ','    ICE AGE    ',
     $            '    ICE EDGE   ',' CALC SFC TYP  '/
      DATA  TEXT2/' CF  ','  %  ',' CF  ',' CF  ',' CF  '/
      DATA  L/4,9,10,11,16/
      DATA  BMISS/10E8/,IMISS/99999/

      IWLON = MOD((36000-IDAT(2,IRTV)),36000)
      ITOT = 0

C***********************************************************************
C                LOOP THROUGH THE ADDITIONAL PRODUCTS
C           ONE REPORT CAN CONSIST OF UP TO FIVE PRODUCTS
C                   (MISSING PRODUCTS ARE NOT STORED)
C                     (NEVER ANY SUPEROBING HERE!!)
C***********************************************************************

      XDATA = BMISS

      DO K = 1,5

C  THE ADDITIONAL PRODUCTS STORED ARE:
C     FOR K=1  ==> SURFACE TAG (RANGE: 0,1,3-6)
C     FOR K=2  ==> ICE CONCENTRATION (PERCENT)
C     FOR K=3  ==> ICE AGE (RANGE: 0,1)
C     FOR K=4  ==> ICE EDGE (RANGE: 0,1)
C     FOR K=5  ==> CALCULATED SURFACE TYPE (RANGE: 1-20)

C  A MISSING PRODUCT IS NOT STORED
C  -------------------------------

         IF(IDAT(L(K),IRTV).GE.IMISS)  CYCLE
         IF(IDAT(L(K),IRTV).LT.0)  THEN

C  CHECK THAT THE UNPACKED PRODUCT IS A POS. NUMBER, IF NOT SKIP IT
C  ----------------------------------------------------------------

            PRINT 101, TEXT1(K),REAL(IDAT(L(K),IRTV)),TEXT2(K),
     $       IBUFTN(8),IBUFTN(9),IDAT(1,IRTV),IWLON
            CYCLE
         END IF

C  VALID PRODUCT: INCR. ITOT (# PACKED ADD'L DATA) BY 1 & STORE DATUM
C  ------------------------------------------------------------------

         ITOT = ITOT + 1
         XDATA(31+K) = REAL(IDAT(L(K),IRTV))
      ENDDO

C***********************************************************************

C  IF ALL PRODUCTS ARE MISSING, REPORT IS NOT STORED
C  -------------------------------------------------

      IF(ITOT.EQ.0)  GO TO 99
      ICNT(9) = MIN(999999,ICNT(9)+1)
      ICNTT = ICNTT + 1

C  WRITE REPORT YEAR, MONTH, DAY TO XDATA(1), XDATA(2), XDATA(3), RESP.
C  WRITE REPORT HOUR, MIN, SEC TO XDATA(4), XDATA(5), XDATA(6), RESP.
C  --------------------------------------------------------------------

      XDATA(1:6)  = IBUFTN(2:7)

C  WRITE LAT. TO XDATA(7): INPUT: N(+), S(-) X 100; OUTPUT: N(+), S(-)
C  -------------------------------------------------------------------

      XDATA(7)  = IDAT(1,IRTV)/100.

C  WRITE LON. TO XDATA(8): INPUT: 0-360 EAST X 100; OUTPUT: 0-360 EAST
C  -------------------------------------------------------------------

      XDATA(8)  = IDAT(2,IRTV)/100.

C  WRITE REPORT TYPE TO XDATA(9) (SET = 575 FOR ADD'L PRODUCTS)
C  ------------------------------------------------------------

      XDATA(9) = 575.

C  WRITE NUMBER THAT WENT INTO AVERAGING TO XDATA(10) -- ALWAYS 1 HERE
C  -------------------------------------------------------------------

      XDATA(10) = 1

C  WRITE SATELLITE IDENTIFIER TO XDATA(11)
C  ---------------------------------------

      IF(IBUFTN(1).LT.IMISS)  XDATA(11) = IBUFTN(1)

C  WRITE ORBIT NUMBER TO XDATA(12)
C  -------------------------------

      IF(IBUFTN(9).LT.IMISS)  XDATA(12) = IBUFTN(9)

C  WRITE SCAN NUMBER TO XDATA(13)
C  ------------------------------

      IF(IBUFTN(8).LT.IMISS)  XDATA(13) = IBUFTN(8)

C  WRITE POSITION NUMBER TO XDATA(14)
C  ----------------------------------

      IF(IDAT(3,IRTV).LT.IMISS)  XDATA(14) = IDAT(3,IRTV)

C  {THE 5 PRODUCTS ALREADY WRITTEN TO XDATA(31+K) WHERE K=1,5)}
C  ------------------------------------------------------------


C  SUBROUTINE OBUFRN ENCODES THE OBS INTO OUTPUT BUFR FILE
C  -------------------------------------------------------

      CALL OBUFRN(9)

   99 CONTINUE

  101 FORMAT(' +++ NEG. ',A15,':',F10.2,A5,'; AT SCAN NO.',I8,'; ORBIT',
     $ ' NO.',I8,'; LATAT LAT =',I7,' DEG. N; LON =',I7,' DEG. W'/15X,
     $ ' -- SKIP THIS PRODUCT IN PACKING THIS RETRIEVAL'/)

      RETURN

      END

C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    OBUFRN      ENCODES NON-SUPEROBED REPR. RPT INTO BUFR
C   PRGMMR: D. A. KEYSER     ORG: NP22       DATE: 1999-02-17
C
C ABSTRACT: ENCODES A SINGLE NON-SUPEROBED REPROCESSED SSM/I REPORT
C   (SUBSET) INTO BUFR THEN WRITES SUBSET INTO OUTPUT FILE.
C
C PROGRAM HISTORY LOG:
C 1999-02-17  D. A. KEYSER (NMC22) -- ORIGINAL AUTHOR (REPLACED
C        SUBROUTINE "PCKO29"
C
C USAGE:    CALL OBUFRN(K)
C   INPUT ARGUMENT LIST:
C     K        - PROD/B.TEMP INDICATOR (=1 -OCEANIC SFC. WIND SPEED;
C                =2 -OCEANIC PRECIP. WATER; =3 -RAINFALL RATE;
C                =4 -SURFACE TEMP.; =5 -OCEANIC CLOUD WATER;  =6 -SOIL
C                MOISTURE; =7 -SNOW DEPTH; =8 -SEA-SFC TEMP; =9 -FIVE
C                "ADDITIONAL" PRODUCTS; =10 -SEVEN-CHANNEL BRIGHTNESS
C                TEMPERATURE)
C
C   OUTPUT FILES:
C     UNIT 06  - STANDARD OUTPUT PRINT
C     UNIT 51  - NCEP REPROCESSED SSM/I BUFR FILE CONTAINING
C                INDIVIDUAL NON-SUPEROBED RETRIEVALS
C
C REMARKS: CALLED BY SUBROUTINES 'STORE1' AND 'STORE2'.
C
C
C  SUBROUTINE OBUFRN WILL PACK THE REPROCESSED NON-SUPEROBED SSM/I
C  REPORT INTO THE BUFR DATABASE. LAYOUT OF THE ARRAY'S XDATA AND
C  YDATA CONTAINING THE SSM/I REPORT ARE AS FOLLOWS:
C  (NOTE: NOT ALL VALUES ARE ENCODED, DEPENDS UPON THE TYPE OF REPORT
C         THAT HAS BEEN PASSED INTO THIS SUBROUTINE)
C
C  --> ALL REPORTS GET ALL OF THE FOLLOWING DATA ENCODED:
C
C RPID  001198   REPORT IDENTIFIER (CHARACTER*8) ........... STNID
C YEAR  004001   YEAR ...................................... XDATA(1)
C MNTH  004002   MONTH ..................................... XDATA(2)
C DAYS  004003   DAY ....................................... XDATA(3)
C HOUR  004004   HOUR ...................................... XDATA(4)
C MINU  004005   MINUTE .................................... XDATA(5)
C SECO  004005   SECOND .................................... XDATA(6)
C CLAT  005002   LATITUDE .................................. XDATA(7)
C CLON  006002   LONGITUDE ................................. XDATA(8)
C NMCT  055006   NCEP REPORT TYPE .......................... XDATA(9)
C ACAV  008022   TOTAL NUMBER (WITH RESPECT TO AVERAGE) .... XDATA(10)
C SAID  001007   SATELLITE IDENTIFIER ...................... XDATA(11)
C ORBN  005040   ORBIT NUMBER .............................. XDATA(12)
C SCNN  005201   SCAN NUMBER ............................... XDATA(13)
C POSN  005202   POSITION NUMBER ........................... XDATA(14)
C
C  --> SINGLE PRODUCT WIND SPEED GETS ALL OF THE FOLLOWING ENCODED:
C
C WSPD  011002   WIND SPEED (OCEAN SURFACE) ................ XDATA(15)
C RFLG  033217   RAIN FLAG (WIND QUALITY INDICATOR) ........ XDATA(31)
C
C  --> SINGLE PRODUCT TOTAL PRECIPITABLE WATER GETS ALL OF THE
C       FOLLOWING ENCODED:
C
C TPWT  013016   TOTAL PRECIPITABLE WATER .................. XDATA(16)
C RFLG  033217   RAIN FLAG (WIND QUALITY INDICATOR) ........ XDATA(31)
C
C  --> SINGLE PRODUCT RAINFALL RATE GETS ALL OF THE FOLLOWING ENCODED:
C
C REQV  013014   RAINFALL RATE ............................. XDATA(17)
C
C  --> SINGLE PRODUCT SKIN TEMPERATURE GETS ALL OF THE FOLLOWING
C       ENCODED:
C
C TMSK  012161   SKIN TEMPERATURE (SURFACE) ................ XDATA(18)
C
C  --> SINGLE PRODUCT CLOUD WATER GETS ALL OF THE FOLLOWING ENCODED:
C
C METFET 008001  METEOROLOGICAL FEATURE ....................    12 (cld)
C VILWC 021031   VERTICALLY-INTEGRATED LIQUID WATER CONTENT. XDATA(19)
C METFET 008001  METEOROLOGICAL FEATURE .................... misg (cncl)
C
C  --> SINGLE PRODUCT SOIL MOISTURE GETS ALL OF THE FOLLOWING ENCODED:
C
C SMOI  013197   SOIL MOISTURE ............................. XDATA(20)
C
C  --> SINGLE PRODUCT SNOW DEPTH GETS ALL OF THE FOLLOWING ENCODED:
C
C TOSD  013013   SNOW DEPTH ................................ XDATA(21)
C
C  --> SINGLE PRODUCT SEA-SURFACE TEMPERATURE GETS ALL OF THE FOLLOWING
C       ENCODED:
C
C SST1  022043   SEA SURFACE TEMPERATURE ................... XDATA(22)
C
C  --> 5 ADDITIONAL PRODUCT REPORTS GET ALL OF THE FOLLOWING DATA
C       ENCODED:
C
C SFTG  002217   SURFACE TAG ............................... XDATA(32)
C ICON  020208   ICE CONCENTRATION ......................... XDATA(33)
C ICAG  020209   ICE AGE ................................... XDATA(34)
C ICED  020210   ICE EDGE .................................. XDATA(35)
C SFTP  020216   CALCULATED SURFACE TYPE ................... XDATA(36)
C  (NOTE: ONE OR MORE OF THESE PRODUCTS MAY BE MISSING FOR A REPORT)
C
C  --> BRIGHTNESS TEMPERATURE REPORTS GET ALL OF THE FOLLOWING DATA
C       ENCODED:
C
C BELOW, Y RANGES FROM 1-7 WHERE:
C   Y = 1 -- 19 GHZ VERTICAL CHANNEL
C       2 -- 19 GHZ HORIZONTAL CHANNEL
C       3 -- 22 GHZ VERTICAL CHANNEL
C       4 -- 37 GHZ VERTICAL CHANNEL
C       5 -- 37 GHZ HORIZONTAL CHANNEL
C       6 -- 85 GHZ VERTICAL CHANNEL
C       7 -- 85 GHZ HORIZONTAL CHANNEL
C
C CHNM  005042   CHANNEL NUMBER ............................ YDATA(1,Y)
C TMBR  012063   BRIGHTNESS TEMPERATURE .................... YDATA(2,Y)
C
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 90
C   MACHINE:  WCOSS
C
C$$$
      SUBROUTINE OBUFRN(K)

      CHARACTER*1  CSAT(240:249),CPRD(10)
      CHARACTER*8  STNID
      CHARACTER*5  CPROD(8)

      REAL  RPTYP(8)
      REAL(8)  HDR_8(15),PROD_8,APROD_8(5),BTMP_8(2,7),METFET_8(2)

      COMMON/SCAN/IBUFTN(1737)
      COMMON/KOUNT/ICNT(10),ICNTT,NFILE,IRECL,ISUBL,ISUBT
      COMMON/REPT/XDATA(36),YDATA(3,7)

      EQUIVALENCE (STNID,HDR_8(1))

      DATA CPROD  /'WSPD ','TPWT ','REQV ','TMSK ','VILWC','SMOI ',
     $             'TOSD ','SST1 '/
      DATA  RPTYP/571.,65.,66.,576.,69.,573.,574.,577./

C          IVAR:    1   2   3   4   5   6   7   8   9  10
      DATA CPRD   /'A','E','I','M','Q','S','U','Z','W','Y'/

      DATA CSAT
C                           **  DMSP  **
C --------------- 240  241  242  243  244  245  246  247  248  249
     $           /'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B' /

      DATA  BMISS/10E8/

      IF(K.LT.9)  THEN

C***********************************************************************
C              COME HERE FOR INPUT FROM PRODUCTS FILE OR 
C   WIND SPEED PRODUCT CALCULATED IN-LINE VIA GOODBERLET OR NEURAL NET
C                 ALGORITHM FROM INPUT BRIGHTNESS TEMPERATURES OR
C     TOTAL PRECIP. WATER PRODUCT CALCULATED IN-LINE VIA NEURAL NET
C                  ALGORITHM FROM INPUT BRIGHTNESS TEMPERATURES
C    {BUT NOT FOR THE "ADDITIONAL" PRODUCTS IN IVAR(9) OR FOR THE 
C                 BRIGHTNESS TEMPERATURES IN IVAR(10)}
C***********************************************************************

C  WRITE REPORT TYPE TO XDATA(9):
C   FOR OCEANIC WIND SPEED           = 571
C   FOR OCEANIC PRECIPITABLE WATER   =  65
C   FOR RAINFALL RATE (LAND & OCEAN) =  66
C   FOR SURFACE TEMPERATURE          = 576
C   FOR OCEANIC CLOUD WATER          =  69
C   FOR SOIL MOISTURE                = 573
C   FOR SNOW DEPTH                   = 574
C   FOR SEA-SURFACE TEMPERATURE      = 577

         XDATA(9) = RPTYP(K)
      END IF

C***********************************************************************
C   COME HERE FOR ALL DATA TYPES (PRODUCTS OR BRIGHTNESS TEMPERATURES)
C***********************************************************************

C  STNID HOLDS STATION IDENTIFICATION
C    -- POSITION 1 HOLDS DMSP SATELLITE INDICATOR
C        SAT. NO. 240 (F-07), 244 (F-11), 248 (F-15) ........... 'A'
C        SAT. NO. 241 (F-08), 245 (F-12), 249 (future) ......... 'B'
C        SAT. NO. 242 (F-09), 246 (F-13) ....................... 'C'
C        SAT. NO. 243 (F-10), 247 (F-14) ....................... 'D'
C        NOTE: DEPENDING UPON VALUE OF "LSAT" SWITCH, TWO DIFFERENT
C              SATELLITES COULD GET SAME CHARACTER HERE (E.G.,
C              IF LSAT SELECTED F-11 AND F-15, ALL REPORTS WOULD
C              BEGIN WITH 'A')
C    -- POSITION 8 HOLDS SSM/I DATA TYPE
C        OCEANIC WIND SPEED .................................... 'A'
C        OCEANIC PRECIPITABLE WATER ............................ 'E'
C        RAINFALL RATE ......................................... 'I'
C        SURFACE TEMPERATURE ................................... 'M'
C        OCEANIC CLOUD WATER ................................... 'Q'
C        SOIL MOISTURE ......................................... 'S'
C        SNOW DEPTH ............................................ 'U'
C        SEA-SURFACE TEMPERATURE ............................... 'Z'
C        FIVE "ADDITIONAL" PRODUCTS ............................ 'W'
C        SEVEN-CHANNEL BRIGHTNESS TEMPERATURES ................. 'Y'
C    -- POSITIONS 2-7 HOLD THE SEQUENTIAL SERIAL INDEX (000001 - 999999)
C        (UNIQUE FOR EACH DATA TYPE)

      STNID(1:1) = CSAT(IBUFTN(1))
      WRITE(STNID(2:7),'(I6.6)')  ICNT(K)
      STNID(8:8) = CPRD(K)


C  ENCODE HEADER INFORMATION (SAME FOR ALL TYPES) INTO SUBSET (REPORT)
C  -------------------------------------------------------------------

      HDR_8(2:15) = XDATA(1:14)
      CALL UFBINT(NFILE,HDR_8(1:11),11,1,IRET,
     $ 'RPID YEAR MNTH DAYS HOUR MINU SECO CLAT CLON NMCT ACAV')

      print*,'**************into obufrn'


C  ENCODE THE SATELLITE IDENTIFIER, ORBIT NUMBER, SCAN NUMBER AND
C   POSITION NUMBER FOR THIS RETRIEVAL
C  --------------------------------------------------------------

      CALL UFBINT(NFILE,HDR_8(12:15),4,1,IRET,'SAID ORBN SCNN POSN')

      IF(K.LT.9)  THEN

C  ENCODE THE SINGLE RETRIEVAL PRODUCT DATA INTO SUBSET (REPORT)
C   (THE PRODUCT IS BASED ON THE VALUE OF K)
C  -------------------------------------------------------------

         PROD_8 = XDATA(14+K)
         CALL UFBINT(NFILE,PROD_8,1,1,IRET,CPROD(K))

C  ENCODE THE RAIN FLAG (QUALITY INDICATOR), BUT ONLY FOR WIND SPEED
C   OR PRECIPITABLE WATER REPORTS
C  -----------------------------------------------------------------

         IF(K.LT.3)  THEN
            PROD_8 = XDATA(31)
            CALL UFBINT(NFILE,PROD_8,1,1,IRET,'RFLG')
         END IF

C  ENCODE METEOROLOGICAL FEATURE (FIRST AS 12, CLOUD; AGAIN AS
C   MISSING, CANCELLED), BUT ONLY FOR CLOUD WATER RPEORTS
C  -----------------------------------------------------------

         IF(K.EQ.5)  THEN
            METFET_8(1) = 12
            METFET_8(2) = BMISS
            CALL UFBREP(NFILE,METFET_8,1,2,IRET,'METFET')
         END IF

      ELSE  IF(K.EQ.9)  THEN

C  ENCODE THE 5 ADDITIONAL PRODUCTS INTO SUBSET (REPORT)
C  -----------------------------------------------------

         APROD_8 = XDATA(32:36)
         CALL UFBINT(NFILE,APROD_8,5,1,IRET,'SFTG ICON ICAG ICED SFTP')

      ELSE  IF(K.EQ.10)  THEN

C  ENCODE THE RADIANCE DATA INTO SUBSET (REPORT)
C  ---------------------------------------------

         BTMP_8(1,1:7) = YDATA(1,1:7)
         BTMP_8(2,1:7) = YDATA(2,1:7)
         CALL UFBINT(NFILE,BTMP_8,2,7,IRET,'CHNM TMBR')

      END IF

C  WRITE THE ENCODED SUBSET (REPORT) INTO THE OUTPUT BUFR MESSAGE
C  --------------------------------------------------------------

      CALL WRITSB(NFILE)

      CALL UFBCNT(NFILE,IREC,ISUB)
      IF(IREC.GT.IRECL)  THEN
         ISUBT = ISUBT + ISUBL
         WRITE(6,1254) IREC-1,ISUBL,ISUBT
 1254 FORMAT(/' --- THIS REPORT OPENS NEW OUTPUT BUFR MSG: LAST MSG ',
     $ 'WAS NO.',I10,' (DATA) WITH',I5,' RPTS (TOTAL NO. RPTS WRITTEN=',
     $ I7,')')
      END IF

      ISUBL = ISUB
      IRECL = IREC

      RETURN

      END

C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    OBUFRS      ENCODES SUPEROBED REPR. REPORT INTO BUFR
C   PRGMMR: D. A. KEYSER     ORG: NP22       DATE: 1999-02-17
C
C ABSTRACT: ENCODES A SINGLE SUPEROBED REPROCESSED SSM/I REPORT
C   (SUBSET) INTO BUFR THEN WRITES SUBSET INTO OUTPUT FILE.
C
C PROGRAM HISTORY LOG:
C 1999-02-17  D. A. KEYSER (NMC22) -- ORIGINAL AUTHOR (REPLACED
C        SUBROUTINE "PCKO29"
C
C USAGE:    CALL OBUFRS(K)
C   INPUT ARGUMENT LIST:
C     K        - PROD/B.TEMP INDICATOR (=1 -OCEANIC SFC. WIND SPEED;
C                =2 -OCEANIC PRECIP. WATER; =3 -RAINFALL RATE;
C                =4 -SURFACE TEMP.; =5 -OCEANIC CLOUD WATER;  =6 -SOIL
C                MOISTURE; =7 -SNOW DEPTH; =8 -SEA-SFC TEMP;
C                =10 -SEVEN-CHANNEL BRIGHTNESS TEMPERATURE)
C
C   OUTPUT FILES:
C     UNIT 06  - STANDARD OUTPUT PRINT
C     UNIT 51  - NCEP REPROCESSED SSM/I BUFR FILE CONTAINING
C                INDIVIDUAL SUPEROBED RETRIEVALS
C
C REMARKS: CALLED BY SUBROUTINES 'SUPOB1' AND 'SUPOB2'.
C
C
C  SUBROUTINE OBUFRS WILL PACK THE REPROCESSED SUPEROBED SSM/I REPORT
C  INTO THE BUFR DATABASE. LAYOUT OF THE ARRAY'S XDATA AND YDATA
C  CONTAINING THE SSM/I REPORT ARE AS FOLLOWS:
C  (NOTE: NOT ALL VALUES ARE ENCODED, DEPENDS UPON THE TYPE OF REPORT
C         THAT HAS BEEN PASSED INTO THIS SUBROUTINE)
C
C  --> ALL REPORTS GET ALL OF THE FOLLOWING DATA ENCODED:
C
C RPID  001198   REPORT IDENTIFIER (CHARACTER*8) ........... STNID
C YEAR  004001   YEAR ...................................... XDATA(1)
C MNTH  004002   MONTH ..................................... XDATA(2)
C DAYS  004003   DAY ....................................... XDATA(3)
C HOUR  004004   HOUR ...................................... XDATA(4)
C MINU  004005   MINUTE .................................... XDATA(5)
C SECO  004005   SECOND .................................... XDATA(6)
C CLAT  005002   LATITUDE .................................. XDATA(7)
C CLON  006002   LONGITUDE ................................. XDATA(8)
C NMCT  055006   NCEP REPORT TYPE .......................... XDATA(9)
C ACAV  008022   TOTAL NUMBER (WITH RESPECT TO AVERAGE) .... XDATA(10)
C
C NOTE: THE CODE TABLE OF "FOST" (FIRST ORDER STATISTIC) IS AS
C       FOLLOWS:
C               =  4 - MEAN VALUE
C               = 10 - STANDARD DEVIATION VALUE
C
C  --> SINGLE PRODUCT WIND SPEED GETS ALL OF THE FOLLOWING ENCODED:
C
C FOST  008023   FIRST ORDER STATISTIC .....................     4
C WSPD  011002   OCEAN SURFACE WIND SPEED (MEAN) ........... XDATA(15)
C FOST  008023   FIRST ORDER STATISTIC .....................    10
C WSPD  011002   OCEAN SURFACE WIND SPEED (STANDARD DEV.) .. XDATA(23)
C
C  --> SINGLE PRODUCT TOTAL PRECIPITABLE WATER GETS ALL OF THE
C       FOLLOWING ENCODED:
C
C FOST  008023   FIRST ORDER STATISTIC .....................     4
C TPWT  013016   TOTAL PRECIPITABLE WATER (MEAN) ........... XDATA(16)
C FOST  008023   FIRST ORDER STATISTIC .....................    10
C TPWT  013016   TOTAL PRECIPITABLE WATER (STANDARD DEV.) .. XDATA(24)
C
C  --> SINGLE PRODUCT RAINFALL RATE GETS ALL OF THE FOLLOWING ENCODED:
C
C FOST  008023   FIRST ORDER STATISTIC .....................     4
C REQV  013014   RAINFALL RATE (MEAN) ...................... XDATA(17)
C FOST  008023   FIRST ORDER STATISTIC .....................    10
C REQV  013014   RAINFALL RATE (STANDARD DEVIATION) ........ XDATA(25)
C
C  --> SINGLE PRODUCT SKIN TEMPERATURE GETS ALL OF THE FOLLOWING
C       ENCODED:
C
C FOST  008023   FIRST ORDER STATISTIC .....................     4
C TMSK  012161   SKIN TEMPERATURE (SURFACE) (MEAN) ......... XDATA(18)
C FOST  008023   FIRST ORDER STATISTIC .....................    10
C TMSK  012161   SKIN TEMPERATURE (SURFACE) (STANDARD DEV.). XDATA(26)
C
C  --> SINGLE PRODUCT CLOUD WATER GETS ALL OF THE FOLLOWING ENCODED:
C
C FOST  008023   FIRST ORDER STATISTIC .....................     4
C METFET 008001  METEOROLOGICAL FEATURE ....................    12 (cld)
C VILWC 021031   VERT.-INTEGR. LIQUID WATER CONTENT (MEAN) . XDATA(19)
C METFET 008001  METEOROLOGICAL FEATURE .................... misg (cncl)
C FOST  008023   FIRST ORDER STATISTIC .....................    10
C METFET 008001  METEOROLOGICAL FEATURE ....................    12 (cld)
C VILWC 021031   CLOUD WATER (STANDARD DEVIATION) .......... XDATA(27)
C METFET 008001  METEOROLOGICAL FEATURE .................... misg (cncl)
C
C  --> SINGLE PRODUCT SOIL MOISTURE GETS ALL OF THE FOLLOWING ENCODED:
C
C FOST  008023   FIRST ORDER STATISTIC .....................     4
C SMOI  013197   SOIL MOISTURE (MEAN) ...................... XDATA(20)
C FOST  008023   FIRST ORDER STATISTIC .....................    10
C SMOI  013197   SOIL MOISTURE (STANDARD DEVIATION) ........ XDATA(28)
C
C  --> SINGLE PRODUCT SNOW DEPTH GETS ALL OF THE FOLLOWING ENCODED:
C
C FOST  008023   FIRST ORDER STATISTIC .....................     4
C TOSD  013013   SNOW DEPTH (MEAN) ......................... XDATA(21)
C FOST  008023   FIRST ORDER STATISTIC .....................    10
C TOSD  013013   SNOW DEPTH (STANDARD DEVIATION) ........... XDATA(29)
C
C  --> SINGLE PRODUCT SEA-SURFACE TEMPERATURE GETS ALL OF THE FOLLOWING
C       ENCODED:
C
C FOST  008023   FIRST ORDER STATISTIC .....................     4
C SST1  022043   SEA-SURFACE TEMPERATURE (MEAN) ............ XDATA(22)
C FOST  008023   FIRST ORDER STATISTIC .....................    10
C SST1  022043   SEA-SURFACE TEMPERATURE (STANDARD DEV.) ... XDATA(30)
C
C  --> BRIGHTNESS TEMPERATURE REPORTS GET ALL OF THE FOLLOWING DATA
C       ENCODED:
C
C BELOW, Y RANGES FROM 1-7 WHERE:
C   Y = 1 -- 19 GHZ VERTICAL CHANNEL
C       2 -- 19 GHZ HORIZONTAL CHANNEL
C       3 -- 22 GHZ VERTICAL CHANNEL
C       4 -- 37 GHZ VERTICAL CHANNEL
C       5 -- 37 GHZ HORIZONTAL CHANNEL
C       6 -- 85 GHZ VERTICAL CHANNEL
C       7 -- 85 GHZ HORIZONTAL CHANNEL
C
C CHNM  005042   CHANNEL NUMBER ............................ YDATA(1,Y)
C FOST  008023   FIRST ORDER STATISTIC .....................     4
C TMBR  012063   BRIGHTNESS TEMPERATURE (MEAN) ............. YDATA(2,Y)
C FOST  008023   FIRST ORDER STATISTIC .....................    10
C TMBR  012063   BRIGHTNESS TEMPERATURE (STANDARD DEV.) .... YDATA(3,Y)
C
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 90
C   MACHINE:  WCOSS
C
C$$$
      SUBROUTINE OBUFRS(K)

      CHARACTER*1  CPRD(10)
      CHARACTER*8  STNID
      CHARACTER*10 CPROD(8)

      REAL  RPTYP(8)
      REAL(8)  HDR_8(15),PROD_8(2,2),BTMP_8(2,2,7),CHNM_8(7),
     $ METFET_8(4)

      COMMON/KOUNT/ICNT(10),ICNTT,NFILE,IRECL,ISUBL,ISUBT
      COMMON/REPT/XDATA(36),YDATA(3,7)

      EQUIVALENCE (STNID,HDR_8(1))

      DATA CPROD  /'FOST WSPD ','FOST TPWT ','FOST REQV ','FOST TMSK ',
     $             'FOST VILWC','FOST SMOI ','FOST TOSD ','FOST SST1 '/
      DATA  RPTYP/571.,65.,66.,576.,69.,573.,574.,577./

C          IVAR:    1   2   3   4   5   6   7   8   9  10
      DATA CPRD   /'A','E','I','M','Q','S','U','Z','W','Y'/

      DATA  BMISS/10E8/

      IF(K.LT.9)  THEN

C***********************************************************************
C              COME HERE FOR INPUT FROM PRODUCTS FILE OR 
C   WIND SPEED PRODUCT CALCULATED IN-LINE VIA GOODBERLET OR NEURAL NET
C                 ALGORITHM FROM INPUT BRIGHTNESS TEMPERATURES OR
C     TOTAL PRECIP. WATER PRODUCT CALCULATED IN-LINE VIA NEURAL NET
C                  ALGORITHM FROM INPUT BRIGHTNESS TEMPERATURES
C    {BUT NOT FOR THE "ADDITIONAL" PRODUCTS IN IVAR(9) OR FOR THE 
C                 BRIGHTNESS TEMPERATURES IN IVAR(10)}
C***********************************************************************

C  WRITE REPORT TYPE TO XDATA(9):
C   FOR OCEANIC WIND SPEED           = 571
C   FOR OCEANIC PRECIPITABLE WATER   =  65
C   FOR RAINFALL RATE (LAND & OCEAN) =  66
C   FOR SURFACE TEMPERATURE          = 576
C   FOR OCEANIC CLOUD WATER          =  69
C   FOR SOIL MOISTURE                = 573
C   FOR SNOW DEPTH                   = 574
C   FOR SEA-SURFACE TEMPERATURE      = 577

         XDATA(9) = RPTYP(K)
      END IF

C***********************************************************************
C   COME HERE FOR ALL DATA TYPES (PRODUCTS OR BRIGHTNESS TEMPERATURES)
C***********************************************************************

C  STNID HOLDS STATION IDENTIFICATION
C    -- POSITION 1 INDICATES THIS IS A SUPEROB ................. 'S'
C    -- POSITION 8 HOLDS SSM/I DATA TYPE
C        OCEANIC WIND SPEED .................................... 'A'
C        OCEANIC PRECIPITABLE WATER ............................ 'E'
C        RAINFALL RATE ......................................... 'I'
C        SURFACE TEMPERATURE ................................... 'M'
C        OCEANIC CLOUD WATER ................................... 'Q'
C        SOIL MOISTURE ......................................... 'S'
C        SNOW DEPTH ............................................ 'U'
C        SEA-SURFACE TEMPERATURE ............................... 'Z'
C        SEVEN-CHANNEL BRIGHTNESS TEMPERATURES ................. 'Y'
C    -- POSITIONS 2-7 HOLD THE SEQUENTIAL SERIAL INDEX (000001 - 999999)
C        (UNIQUE FOR EACH DATA TYPE)

      STNID(1:1) = 'S'
      WRITE(STNID(2:7),'(I6.6)')  ICNT(K)
      STNID(8:8) = CPRD(K)


C  ENCODE HEADER INFORMATION (SAME FOR ALL TYPES) INTO SUBSET (REPORT)
C  -------------------------------------------------------------------

      HDR_8(2:15) = XDATA(1:14)
      CALL UFBINT(NFILE,HDR_8(1:11),11,1,IRET,
     $ 'RPID YEAR MNTH DAYS HOUR MINU SECO CLAT CLON NMCT ACAV')

      IF(K.LT.9)  THEN

C  ENCODE THE SINGLE RETRIEVAL PRODUCT (MEAN AND STANDARD DEVIATION)
C   DATA INTO SUBSET (REPORT) (THE PRODUCT IS BASED ON THE VALUE OF K)
C  -------------------------------------------------------------------

         PROD_8(1,1) =  4
         PROD_8(2,1) = XDATA(14+K)
         PROD_8(1,2) = 10
         PROD_8(2,2) = XDATA(22+K)
         CALL UFBINT(NFILE,PROD_8,2,1,IRET,CPROD(K))
         CALL UFBREP(NFILE,PROD_8,2,2,IRET,CPROD(K))

C  ENCODE METEOROLOGICAL FEATURE (FIRST AS 12, CLOUD; AGAIN AS
C   MISSING, CANCELLED), BUT ONLY FOR CLOUD WATER RPEORTS
C  -----------------------------------------------------------

         IF(K.EQ.5)  THEN
            METFET_8(1) = 12
            METFET_8(2) = BMISS
            METFET_8(3) = 12
            METFET_8(4) = BMISS
            CALL UFBREP(NFILE,METFET_8,1,4,IRET,'METFET')
         END IF

      ELSE  IF(K.EQ.10)  THEN

C  ENCODE THE RADIANCE DATA INTO SUBSET (REPORT)
C  ---------------------------------------------

         BTMP_8(1,1,1:7) =  4
         BTMP_8(2,1,1:7) = YDATA(2,1:7)
         BTMP_8(1,2,1:7) = 10
         BTMP_8(2,2,1:7) = YDATA(3,1:7)
         CALL UFBINT(NFILE,BTMP_8,2, 7,IRET,'FOST TMBR')
         CALL UFBREP(NFILE,BTMP_8,2,14,IRET,'FOST TMBR')
         CHNM_8 = YDATA(1,1:7)
         CALL UFBINT(NFILE,CHNM_8,1, 7,IRET,'CHNM')

      END IF

C  WRITE THE ENCODED SUBSET (REPORT) INTO THE OUTPUT BUFR MESSAGE
C  --------------------------------------------------------------

      CALL WRITSB(NFILE)

      CALL UFBCNT(NFILE,IREC,ISUB)
      IF(IREC.GT.IRECL)  THEN
         ISUBT = ISUBT + ISUBL
         WRITE(6,1254) IREC-1,ISUBL,ISUBT
 1254 FORMAT(/' --- THIS REPORT OPENS NEW OUTPUT BUFR MSG: LAST MSG ',
     $ 'WAS NO.',I10,' (DATA) WITH',I5,' RPTS (TOTAL NO. RPTS WRITTEN=',
     $ I7,')')
      END IF

      ISUBL = ISUB
      IRECL = IREC

      RETURN

      END

C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    SUPOB1      SUPEROBS PRODUCTS,STORES IN XDATA ARRAY
C   PRGMMR: D. A. KEYSER     ORG: NP22       DATE: 1999-02-17
C
C ABSTRACT: CREATES SUPEROBS FROM INDIVIDUAL RETRIEVALS OF SPECIFIED
C   PRODUCT(S) WITHIN SPECIFIED LAT/LON BOXES.  SUPEROBS ARE FORMED
C   FROM LINEAR MEANS OF PRODUCT VALUE AND TIME AMONGST ALL RETRIEVALS
C   OF PRODUCT WITHIN LAT/LON GRID BOXES THAT CONTAIN AT LEAST ONE
C   RETRIEVAL.  SUPEROBS ARE LOCATED AT THE MEAN LATITUDE AND
C   LONGITUDE POSITION WITHIN THE BOX.  THE STANDARD DEVIATION IS
C   ALSO STORED.  EACH SUPEROB IS THEN STORED INTO XDATA ARRAY AND
C   SENT TO SUBROUTINE OBUFRS FOR ENCODING INTO OUTPUT BUFR FILE.
C   THIS SUBROUTINE HANDLES ONLY INPUT FROM THE PRODUCTS FILE OR THE
C   WIND SPEED PRODUCT CALCULATED IN-LINE VIA NEURAL NET OR GOODBERLET
C   ALGORITHM FROM INPUT BRIGHTNESS TEMP FILE OR THE TPW PRODUCT
C   CALCULATED IN-LINE VIA NEURAL NET ALGORITHM FROM THE INPUT
C   BRIGHTNESS TEMP FILE.  SEE SUBROUTINE SUPOB2 FOR THE DIRECT
C   PROCESSING OF BRIGHTNESS TEMPERATURES.
C
C PROGRAM HISTORY LOG:
C 1993-01-21  D. A. KEYSER (NMC22) -- ORIGINAL AUTHOR
C 1993-07-21  D. A. KEYSER (NMC22) -- FOR SUPEROBS, ADDED STORAGE OF
C        STANDARD DEVIATION (IN CHARACTER FORMAT IN BYTES 1-4 OF
C        RESERVE WORD 5 OF UNPACKED ON29 ARRAY) AND NUMBER OF INDIVIDUAL
C        RETRIEVALS THAT WENT IN TO GENERATING SUPEROB (IN CHARACTER
C        FORMAT IN BYTES 1 & 2 OF RESERVE WORD 6)
C 1994-04-12  D. A. KEYSER (NMC22) -- FOR SUPEROBS, ADDED NAMELIST
C        SWITCH 'LIMCNT' TO ALLOW USER TO CONTROL THE GENERATION OF
C        SUPEROBS BASED ON THE NUMBER OF INDIVIDUAL RETRIEVALS THAT
C        WOULD GO INTO MAKING THE SUPEROB.  MADE NECESSARY
C        MODIFICATIONS TO ALLOW SUBROUTINE TO COMPILE ON EITHER THE
C        NAS OR THE CRAY
C 1994-09-06  D. A. KEYSER (NMC22) -- IN ORDER TO GET REGION SIZE DOWN
C        BELOW NAS LIMIT OF 9999K BYTES, COMBINED LATITUDE AND
C        LONGITUDE IN NEW STORAGE ARRAY "IPKDTA" (REPLACED "SUMLAT"
C        AND "SUMLON" STORAGE ARRAYS), EACH HELD IN 16-BITS; MODIFIED
C        TO ALLOW SUPEROBING OVER .5 DEG. BOXES, BUT ONLY IN NORTHERN
C        AND WESTERN HEMISPHERES
C 1994-10-05  D. A. KEYSER (NMC22) --  ADDED THE PRODUCTS CLOUD WATER,
C        SOIL MOISTURE AND SNOW DEPTH TO THE LIST OF PRODUCTS THAT CAN
C        BE PROCESSED; RENAMED TO 'SUPOB1' FROM 'SUPROB'
C 1995-01-05  D. A. KEYSER (NMC22) -- ADDED ABILITY TO PROCESS AND
C        -IF REQUESTED- SUPEROB WIND SPEED PRODUCTS THAT HAVE BEEN
C        GENERATED IN-LINE (VIA SUBR. W3FI86) USING EITHER THE
C        NEURAL NETWORK ALGORITHM OR THE GOODBERLET ALGORITHM.
C        THE ORIGINAL GOODBERLET WIND SPEED IN THE PRODUCTS DATA
C        SET(S) CAN ALSO STILL BE PROCESSED; NOTE HOWEVER THAT
C        ONLY ONE SOURCE OF WIND SPEED PRODUCT CAN BE CHOSEN IN A
C        SINGLE RUNNING OF THIS PROGRAM
C 1996-07-31  D. A. KEYSER (NP22) -- CAN NOW PROCESS OPERATIONAL
C        FNOC PRODUCTS ALONG WITH IN-LINE CALCULATED WIND SPEED
C        PRODUCT.
C 1999-02-17  D.A. KEYSER -- STORES SUPEROBED DATA IN XDATA ARRAY
C        RATHER THAN UNPACKED ON29 ARRAY (OUTPUT FILE IS NOW IN BUFR)
C
C USAGE:    CALL SUPOB1
C
C   OUTPUT FILES:
C     UNIT 06  - STANDARD OUTPUT PRINT
C
C REMARKS: CALLED BY MAIN PROGRAM.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 90
C   MACHINE:  WCOSS
C
C$$$
      SUBROUTINE SUPOB1

      INTEGER  NDATE(8)

      REAL  SCALE(8)

      COMMON/KOUNT/ICNT(10),ICNTT,NFILE,IRECL,ISUBL,ISUBT
      COMMON/SWITCH/IVAR(10),IQM,ISUPOB,LATS,LATN,LONW,LONE,LIMCNT,QMPW
      COMMON/BGRID/BLAT(360),BLON(720),NOBS(8,720,360)
      COMMON/SAVED/ITOBS(9),ITOBST,DGH,DGV,SUMDTA(8,720,360),
     $ SSQDTA(8,720,360),SUMTIM(8,720,360),SUMLAT(8,720,360),
     $ SUMLON(8,720,360)
      COMMON/DGRID/LATSIZ,LONSIZ
      COMMON/REPT/XDATA(36),YDATA(3,7)
      COMMON/CENTER/IDATE(8)

      DATA SCALE/ 10., 10.,1000000., 100., 100., 1000., 1000.,100./
      DATA BMISS/10E8/

C***********************************************************************
C            LOOP THRU THE PRODUCT TYPES AS SPECIFIED BY USER
C***********************************************************************

      LOOP1: DO K = 1,8

C  CHECK FOR USER-SPECIFICATION AND VALID PRODUCT
C  ----------------------------------------------

         IF(IVAR(K).NE.0)  CYCLE LOOP1

C-----------------------------------------------------------------------
C   LOOP THRU BOXES: CONSTRUCT MEANS & WRITE SUPEROB TO XDATA ARRAY
C-----------------------------------------------------------------------

         LATBEG = 1
         KNDX = 0
         LOOP1n1: DO KI = LATBEG,LATSIZ
            KNDX = KNDX + 1
            LOOP1n2: DO KJ = 1,LONSIZ

C  IF LESS THAN 'LIMCNT' INDIVIDUAL RETRIEVALS WENT INTO MAKING
C   SUPEROB IN THIS BOX, SKIP PROCESSING THE SUPEROB FOR THIS BOX
C  --------------------------------------------------------------

               IF(NOBS(K,KJ,KNDX).LT.LIMCNT)  CYCLE LOOP1n2
               XDATA = BMISS
               ICNT(K) = MIN(999999,ICNT(K)+1)
               ICNTT = ICNTT + 1
               ITOBS(K) = ITOBS(K) + NOBS(K,KJ,KNDX)
               ITOBST = ITOBST + NOBS(K,KJ,KNDX)
               XMUL = FLOAT(NOBS(K,KJ,KNDX))

C.......................................................................

C  CALC. MEAN AND STANDARD DEVIATION OF THE PRODUCT VALUE AND THE
C   MEAN OF THE TIME, LATITUDE AND LONGITUDE WITHIN EACH GRID BOX
C  --------------------------------------------------------------

               AVGDTA = SUMDTA(K,KJ,KNDX)/XMUL
               QUAN   = MAX((SSQDTA(K,KJ,KNDX)/XMUL - AVGDTA**2),0.)
               STDDTA = SQRT(QUAN)
               AVGTIM = SUMTIM(K,KJ,KNDX)/XMUL
               AVGLAT = SUMLAT(K,KJ,KNDX)/XMUL
               AVGLON = SUMLON(K,KJ,KNDX)/XMUL

C  STORE MEAN TIME IN "ITIME" (CHECK FOR MEAN TIME INTO THE NEXT DAY)
C  ------------------------------------------------------------------

               ITIME = NINT(AVGTIM + 0.00005)
               IF(ITIME.GE.24000)  ITIME = ITIME - 24000.

C  WRITE REPORT YEAR, MONTH, DAY TO XDATA(1), XDATA(2), XDATA(3), RESP.
C   MODIFY (IF NEEDED) CENTER DATE YEAR, MONTH AND DAY TO PROPERLY
C   DEFINE THE YEAR, MONTH AND DAY OF THE SUPEROB
C  --------------------------------------------------------------------

               NDATE = IDATE
               JTIME=NINT(1000. * (REAL(IDATE(5)) + REAL(IDATE(6))/60. +
     $          REAL(IDATE(7))/3600.))
               IF(ABS(JTIME-ITIME).GT.6000)  THEN
                  DAYCHG = SIGN(1.0,REAL(JTIME-ITIME))
                  CALL W3MOVDAT((/DAYCHG,0.,0.,0.,0./),IDATE,NDATE)
               END IF
               XDATA(1:3) = NDATE(1:3)

C  WRITE REPORT HOUR, MIN, SEC TO XDATA(4), XDATA(5), XDATA(6), RESP.
C  ------------------------------------------------------------------

               XDATA(4)  = INT(ITIME/1000.)
               XMIN      = (ITIME - (NINT(XDATA(4)) * 1000)) * 0.06
               XDATA(5)  = INT(XMIN)
               XDATA(6)  = (NINT(XMIN*100.) - NINT(XDATA(5))*100) * 0.6

C  WRITE LAT. TO XDATA(7): INPUT: N(+), S(-) X 100; OUTPUT: N(+), S(-)
C  -------------------------------------------------------------------

               XDATA(7)  = NINT(AVGLAT + SIGN(0.00005,AVGLAT))/100.

C  WRITE LON. TO XDATA(8): INPUT: 0-360 EAST X 100; OUTPUT: 0-360 EAST
C  -------------------------------------------------------------------

               XDATA(8)  = NINT(AVGLON + 0.00005)/100.

C  REPORT TYPE WILL BE WRITTEN TO XDATA(9) IN SUBR. OBUFRS (VARIES)
C  ----------------------------------------------------------------


C  WRITE # OF INDIVID. RETR. THAT WENT INTO MAKING SUPEROB TO XDATA(10)
C  --------------------------------------------------------------------

               XDATA(10)  = NOBS(K,KJ,KNDX)

C  VALUES IN XDATA(11) THROUGH XDATA(14) APPLY ONLY TO NON-SUPEROBS
C  ----------------------------------------------------------------


C  WRITE MEAN PROD VALUE TO XDATA(14+K) (SEE SUBR STORE1 FOR K & UNITS)
C  --------------------------------------------------------------------

               XDATA(14+K)  = NINT(AVGDTA + 0.00005)/SCALE(K)


C  WRITE STANDARD DEVIATION OF PRODUCT VALUE TO XDATA(22+K)
C   (SEE SUBR STORE1 FOR K & UNITS)
C  --------------------------------------------------------

               XDATA(22+K)  = NINT(STDDTA + 0.00005)/SCALE(K)


C  SUBROUTINE OBUFRS ENCODES THE SUPEROB INTO OUTPUT BUFR FILE
C  -----------------------------------------------------------

               CALL OBUFRS(K)

            ENDDO LOOP1n2
         ENDDO  LOOP1n1

C-----------------------------------------------------------------------

      ENDDO LOOP1

C***********************************************************************

C  ALL SUPEROB SCAN/RETRIEVALS HAVE BEEN PROCESSED
C  -----------------------------------------------

      RETURN

      END

C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    SUPOB2      SUPEROBS B.TEMPS, STORES IN X/YDATA ARRAY
C   PRGMMR: D. A. KEYSER     ORG: NP22       DATE: 1999-02-17
C
C ABSTRACT: CREATES SUPEROBS FROM INDIVIDUAL RETRIEVALS CONTAINING
C   SEVEN CHANNELS OF BRIGHTNESS TEMPERATURES WITHIN SPECIFIED LAT/
C   LON BOXES.  SUPEROBS ARE FORMED FROM LINEAR MEANS OF THE SEVEN
C   BRIGHTNESS TEMPERATURES AND TIME AMONGST ALL RETRIEVALS WITHIN
C   LAT/LON GRID BOXES THAT CONTAIN AT LEAST ONE RETRIEVAL.  SUPEROBS
C   ARE LOCATED AT THE MEAN LATITUDE AND LONGITUDE POSITION WITHIN THE
C   BOX.  EACH SUPEROB IS THEN STORED INTO XDATA ARRAY AND SENT TO
C   SUBROUTINE OBUFRS FOR ENCODING INTO OUTPUT BUFR FILE.  THIS
C   SUBROUTINE HANDLES ONLY THE BRIGHTNESS TEMPERATURES.  SEE
C   SUBROUTINE SUPOB1 FOR PRODUCTS.
C
C PROGRAM HISTORY LOG:
C 1994-10-05  D. A. KEYSER (NMC22) --  ADAPTED FROM ORIGINAL
C        SUBROUTINE SUPROB, BUT NOW TO PROCESS THE SEVEN CHANNELS OF
C        BRIGHTNESS TEMPERATURES
C 1999-02-17  D.A. KEYSER -- STORES SUPEROBED DATA IN XDATA AND YDATA
C        ARRAYS RATHER THAN UNPACKED ON29 ARRAY (OUTPUT FILE IS NOW
C        IN BUFR)
C
C USAGE:    CALL SUPOB2
C   OUTPUT FILES:
C     UNIT 06  - STANDARD OUTPUT PRINT
C
C REMARKS: CALLED BY MAIN PROGRAM.
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 90
C   MACHINE:  WCOSS
C
C$$$
      SUBROUTINE SUPOB2

      INTEGER  NDATE(8)

      COMMON/KOUNT/ICNT(10),ICNTT,NFILE,IRECL,ISUBL,ISUBT
      COMMON/SWITCH/IVAR(10),IQM,ISUPOB,LATS,LATN,LONW,LONE,LIMCNT,QMPW
      COMMON/BGRID/BLAT(360),BLON(720),NOBS(8,720,360)
      COMMON/SAVED/ITOBS(9),ITOBST,DGH,DGV,SUMDTA(8,720,360),
     $ SSQDTA(8,720,360),SUMTIM(8,720,360),SUMLAT(8,720,360),
     $ SUMLON(8,720,360)
      COMMON/DGRID/LATSIZ,LONSIZ
      COMMON/REPT/XDATA(36),YDATA(3,7)
      COMMON/CENTER/IDATE(8)

      DATA  BMISS/10E8/

C***********************************************************************
C   LOOP THRU BOXES: CONSTRUCT MEANS & WRITE SUPEROB TO XDATA ARRAY
C***********************************************************************

      LATBEG = 1
      KNDX = 0
      LOOP1: DO KI = LATBEG,LATSIZ
         KNDX = KNDX + 1
         LOOP1n1: DO KJ = 1,LONSIZ

C  IF LESS THAN 'LIMCNT' INDIVIDUAL RETRIEVALS WENT INTO MAKING
C   SUPEROB IN THIS BOX, SKIP PROCESSING THE SUPEROB FOR THIS GRID BOX
C  -------------------------------------------------------------------

            IF(NOBS(1,KJ,KNDX).LT.LIMCNT)  CYCLE LOOP1n1
            XDATA = BMISS
            YDATA = BMISS
            ICNT(10) = MIN(999999,ICNT(10)+1)
            ICNTT = ICNTT + 1
            ITOBS(9) = ITOBS(9) + NOBS(1,KJ,KNDX)
            ITOBST = ITOBST + NOBS(1,KJ,KNDX)
            XMUL = FLOAT(NOBS(1,KJ,KNDX))

C-----------------------------------------------------------------------

C  CALCULATE MEAN TIME, LATITUDE AND LONGITUDE WITHIN THIS GRID BOX
C  ----------------------------------------------------------------

            AVGTIM = SUMTIM(1,KJ,KNDX)/XMUL
            AVGLAT = SUMLAT(1,KJ,KNDX)/XMUL
            AVGLON = SUMLON(1,KJ,KNDX)/XMUL

C  STORE MEAN TIME IN "ITIME" (CHECK FOR MEAN TIME INTO THE NEXT DAY)
C  ------------------------------------------------------------------

            ITIME = NINT(AVGTIM + 0.00005)
            IF(ITIME.GE.24000)  ITIME = ITIME - 24000.

C  WRITE REPORT YEAR, MONTH, DAY TO XDATA(1), XDATA(2), XDATA(3), RESP.
C   MODIFY (IF NEEDED) CENTER DATE YEAR, MONTH AND DAY TO PROPERLY
C   DEFINE THE YEAR, MONTH AND DAY OF THE SUPEROB
C  --------------------------------------------------------------------

            NDATE = IDATE
            JTIME = NINT(1000. * (REAL(IDATE(5)) + REAL(IDATE(6))/60. +
     $       REAL(IDATE(7))/3600.))
            IF(ABS(JTIME-ITIME).GT.6000)  THEN
               DAYCHG = SIGN(1.0,REAL(JTIME-ITIME))
               CALL W3MOVDAT((/DAYCHG,0.,0.,0.,0./),IDATE,NDATE)
            END IF
            XDATA(1:3) = NDATE(1:3)

C  WRITE REPORT HOUR, MIN, SEC TO XDATA(4), XDATA(5), XDATA(6), RESP.
C  ------------------------------------------------------------------

            XDATA(4)  = INT(ITIME/1000.)
            XMIN      = (ITIME - (NINT(XDATA(4)) * 1000)) * 0.06
            XDATA(5)  = INT(XMIN)
            XDATA(6)  = (NINT(XMIN*100.) - NINT(XDATA(5))*100) * 0.6

C  WRITE LAT. TO XDATA(7): INPUT: N(+), S(-) X 100; OUTPUT: N(+), S(-)
C  -------------------------------------------------------------------

            XDATA(7)  = NINT(AVGLAT + SIGN(0.00005,AVGLAT))/100.

C  WRITE LON. TO XDATA(8): INPUT: 0-360 EAST X 100; OUTPUT: 0-360 EAST
C  -------------------------------------------------------------------

            XDATA(8)  = NINT(AVGLON + 0.00005)/100.

C  WRITE REPORT TYPE TO XDATA(9) (SET = 68)
C  ----------------------------------------

            XDATA(9)  = 68.

C  WRITE # OF INDIVID. RETR. THAT WENT INTO MAKING SUPEROB TO XDATA(10)
C  --------------------------------------------------------------------

            XDATA(10)  = NOBS(1,KJ,KNDX)

C  VALUES IN XDATA(11) THROUGH XDATA(14) APPLY ONLY TO NON-SUPEROBS
C  ----------------------------------------------------------------


C-----------------------------------------------------------------------
C LOOP THROUGH THE SEVEN CHANNELS OF BRIGHTNESS TEMPERATURE & CALCULATE
C    EACH CHANNEL'S MEAN AND STANDARD DEVIATION WITHIN THIS GRID BOX
C-----------------------------------------------------------------------

            DO K = 1,7

               AVGDTA = SUMDTA(K,KJ,KNDX)/XMUL
               QUAN   = MAX((SSQDTA(K,KJ,KNDX)/XMUL - AVGDTA**2),0.)
               STDDTA = SQRT(QUAN)

C  WRITE THE CHANNEL TO YDATA(1,K)
C  -------------------------------

               YDATA(1,K) = K

C  WRITE THE MEAN B. TEMP TO YDATA(2,K)  WHERE K=1,7 IS DEFINED IN
C   SUBR. STORE2, UNITS : INPUT: DEG. KELVIN X 100; OUTPUT: DEG. KELVIN
C  --------------------------------------------------------------------

               YDATA(2,K) = NINT(AVGDTA + 0.00005)/100.

C  WRITE THE STD DEV. TEMP TO YDATA(3,K) WHERE K=1,7 IS DEFINED IN
C   SUBR. STORE2, UNITS : INPUT: DEG. KELVIN X 100; OUTPUT: DEG. KELVIN
C  --------------------------------------------------------------------

               YDATA(3,K) = NINT(STDDTA + 0.00005)/100.

            ENDDO

C-----------------------------------------------------------------------

C  SUBROUTINE OBUFRS ENCODES THE SUPEROB INTO OUTPUT BUFR FILE
C  -----------------------------------------------------------

            CALL OBUFRS(10)

         ENDDO LOOP1n1
      ENDDO LOOP1

C***********************************************************************

C  ALL SUPEROB SCAN/RETRIEVALS HAVE BEEN PROCESSED
C  -----------------------------------------------

      RETURN

      END

C$$$  SUBPROGRAM DOCUMENTATION BLOCK
C                .      .    .                                       .
C SUBPROGRAM:    FIRST       BLOCK DATA: INIT. COMMON BLOCK PARAMETERS
C   PRGMMR: D. A. KEYSER     ORG: NP22       DATE: 1993-01-21
C
C ABSTRACT: INITIALIZES COMMON BLOCK PARAMETERS IN COMMON BLOCKS
C   /KOUNT/ AND /SAVED/.
C
C PROGRAM HISTORY LOG:
C 1993-01-21  D. A. KEYSER (NMC22) -- ORIGINAL AUTHOR
C
C ATTRIBUTES:
C   LANGUAGE: FORTRAN 90
C   MACHINE:  WCOSS
C
C$$$
      BLOCK DATA FIRST

      COMMON/KOUNT/ICNT(10),ICNTT,NFILE,IRECL,ISUBL,ISUBT
      COMMON/SAVED/ITOBS(9),ITOBST,DGH,DGV,SUMDTA(8,720,360),
     $ SSQDTA(8,720,360),SUMTIM(8,720,360),SUMLAT(8,720,360),
     $ SUMLON(8,720,360)

      DATA  ICNT/10*0/,ICNTT/0/,ITOBS/9*0/,ITOBST/0/,NFILE/51/,IRECL/0/,
     $ ISUBL/0/,ISUBT/0/

      END
C> @file
C> @brief Reads 1 ssm/i scan line from bufr d-set
C> @author Dennis Keyser @date 1996-07-30

C> Reads one ssm/i scan line (64 retrievals) from the NCEP
C> bufr ssm/i dump file. Each scan is time checked against the
C> user-requested time window and satellite id combinations. When a
C> valid scan is read the program returns to the calling program.
C> the user must pass in the type of the input ssm/i dump file,
C> either derived products (regardless of source) or brightness
C> temperatures (7-channels). If the latter is chosen, the user
C> has the further option of processing, in addition to the
C> brightness temperatures, in-line calculation of wind speed
C> product via the goodberlet algorithm, and/or in-line calculation
C> of both wind speed and total column precipitable water (tpw)
C> products using the neural net 3 algorithm. If the wind speed
C> or tpw is calculated here (either algorithm), this subroutine
C> will check for brightness temperatures outside of a preset range
C> and will return a missing wind speed/tpw if any b. temp is
C> unreasonable. Also, for calculated wind speeds and tpw, this
C> program will check to see if the b. temps are over land or ice,
C> and if they are it will also return missing values since these
C> data are valid only over ocean.
C>
C> ### Program History Log:
C> Date | Programmer | Comment
C> -----|------------|--------
C> 1996-07-30 | Dennis Keyser | Original author - subroutine is a modified version of w3lib w3fi86 which read one scan line from the 30-orbit shared processing data sets
C> 1997-05-22 | Dennis Keyser | Crisis fix to account for clon now returned from bufr as -180 to 0 (west) or 0 to 180 (east), used to return as 0 to 360 east which was not the bufr standard
C> 1998-01-28 | Dennis Keyser | Replaced neural net 2 algorithm which calculated only wind speed product with neural net 3 algorithm which calculates both wind speed and total precipitable water products (among others) but, unlike nn2, does not return a rain flag value (it does set all retrievals to missing that fail rain flag and ice contamination tests)
C> 1998-03-30 | Dennis Keyser | Modified to handle neural net 3 ssm/i products input in a products bufr data dump file; now prints out number of scans processed by satellite number in final summary
C> 1998-10-23 | Dennis Keyser | Subroutine now y2k and fortran 90 compliant
C> 1999-02-18 | Dennis Keyser | Modified to compile and run properly on ibm-sp
C> 2000-06-08 | Dennis Keyser | Corrected mnemonic for rain rate to "reqv" (was "prer" for some unknown reason)
C> 2001-01-03 | Dennis Keyser | Changed units of returned rain rate from whole mm/hr to 10**6 mm/sec, changed units of returned surface temp from whole kelvin to 10**2 kelvin (to incr. precision to that orig. in input bufr file)
C> 2004-09-12 | Dennis Keyser | Now decodes sea-surface temperature if valid into same location as surface temperature, quantity is surface temperature if surface tag is not 5, otherwise quantity is sea-surface temperature (ncep products data dump file now contains sst); checks to see if old or new version of mnemonic table bufrtab.012 is being used here (old version had "ph2o" instead of "tpwt", "sndp" instead of "tosd", "wsos" instead of "wspd" and "ch2o" instead of the sequence "metfet vilwc metfet"), and decodes using whichever mnemonics are found {note: a further requirement for "vilwc" is that the first "metfet" (meteorological feature) in the sequence must be 12 (=cloud), else cloud water set to missing, regardless of "vilwc" value}
C> 2011-08-04 | Dennis Keyser | Add ibdate (input bufr message date) to output argument list (now used by calling program prepobs_prepssmi)
C>
C> @param[in] INDTA Unit number of ncep bufr ssm/i dump data set
C> @param[in] INLSF Unit number of direct access nesdis land/sea file
C> (valid only if lbrit and either nnalg or gbalg true).
C> @param[in] INGBI Unit number of grib index file for grib file
C> Containing global 1-degree sea-surface temp field.
C> (valid only if lbrit and either nnalg or gbalg true).
C> @param[in] INGBD Unit number of grib file containing global 1-degree
C> Sea-surface temp field (valid only if lbrit and either.
C> Nnalg or gbalg true).
C> @param[in] LSAT 10-word logical array (240:249) indicating which
C> Satellite ids should be processed (see remarks)
C> @param[in] LPROD Logical indicating if the input bufr file contains
C> Products (regardless of source) - in this case one or.
C> More available products can be processed and returned.
C> @param[in] LBRIT Logical indicating if the input bufr file contains
C> Brightness temperatures - in this case b. temps are.
C> Processed and returned along with, if requested, in-.
C> Line generated products from one or both algorithms.
C> (see next two switches).
C> - The following two switches apply only if lbrit is true -----
C> @param[in] NNALG Indicating if the subroutine should
C> calculate and return ssm/i wind speed and tpw
C> via the neural net 3 algorithm (note: b o t h
C> wind speed and tpw are returned here)
C> @param[in] GBALG Indicating if the subroutine should
C> calculate and return ssm/i wind speed via the
C> goodberlet algorithm
C> @param[in] KDATE Requested earliest year(yyyy), month, day, hour,
C> Min for accepting scans.
C> @param[in] LDATE Requested latest   year(yyyy), month, day, hour,
C> Min for accepting scans.
C> @param[in] IGNRTM Switch to indicate whether scans should be time-
C> Checked (= 0) or not time checked (=1) {if =1, all.
C> Scans read in are processed regardless of their time..
C> The input arguments "kdate" and "ldate" (earliest and.
C> Latest date for processing data) are ignored in the.
C> Time checking for scans. (note: the earliest and.
C> Latest dates should still be specified to the.
C> "expected" time range, but they will not be used for.
C> Time checking in this case)}.
C> @param[out] IBUFTN Output buffer holding data for a scan (1737 words -
C> See remarks for format. some words may be missing
C> Depending upon lprod, lbrit, nnalg and gbalg
C> @param[out] IBDATE Input bufr message section 1 date (yyyymmddhh)
C> @param[out] IER Error return code (see remarks)
C>
C> @remark
C> Return code ier can have the following values:
C> - IER = 0  Successful return of scan
C> - IER = 1  All scans have been read, all done
C> - IER = 2  Abnormal return - input bufr file in unit
C> 'indta' is either empty (null) or is not bufr
C> - IER = 3  Abnormal return - requested earliest and
C> latest dates are backwards
C> - IER = 4  Abnormal return - error opening random
C> access file holding land/sea tags
C> - IER = 5  Abnormal return - the number of decoded
C> "levels" is not what is expected
C> - IER = 6  Abnormal return - sea-surface temperature
C> not found in grib index file - error returned
C> from grib decoder getgb is 96
C> - IER = 7  Abnormal return - sea-surface temperature
C> grib message has a date that is either:
C> 1) more than 7-days prior to the earliest
C> requested date or 2) more than 7-days after
C> the latest requested date
C> - IER = 8  Abnormal return - byte-addressable read error
C> for grib file containing sea-surface
C> temperature field - error returned from grib
C> decoder getgb is 97-99
C> - IER = 9  Abnormal return - error returned from grib
C> decoder - getgb - for sea-surface
C> temperature field - > 0 but not 96-99
C>
C> Input argument lsat is set-up as follows:
C> - LSAT(X) = TRUE -- Process scans from satellite id x (where x is code figure from bufr code table 0-01-007)
C> - LSAT(X) = FALSE - Do not process scans from satellite id x
C>  - X = 240 is f-7  dmsp satellite (this satellite is no longer available)
C>  - X = 241 is f-8  dmsp satellite (this satellite is no longer available)
C>  - X = 242 is f-9  dmsp satellite (this satellite is no longer available)
C>  - X = 243 is f-10 dmsp satellite (this satellite is no longer available)
C>  - X = 244 is f-11 dmsp satellite (this is available as of 8/96 but is not considered to be an operational dmsp ssm/i satellite)
C>  - X = 245 is f-12 dmsp satellite (this satellite is no longer available)
C>  - X = 246 is f-13 dmsp satellite (this is available and is considered to be an operational odd dmsp ssm/i satellite as of 8/1996)
C>  - X = 247 is f-14 dmsp satellite (this is available as of 5/97 but is not considered to be an operational dmsp ssm/i satellite)
C>  - X = 248 is f-15 dmsp satellite (this is available as of 2/2000 and is considered to be an operational odd dmsp ssm/i satellite as of 2/2000)
C>  - X = 249 is reserved for a future dmsp satellite
C>
C> @note Here "even" means value in ibuftn(1) is an odd number while "odd" means value in ibuftn(1) is an even number
C> Contents of array 'ibuftn' holding one complete scan (64 individual retrievlas (1737 words)
C>
C> #### Always returned:
C> WORD |  CONTENTS
C> ---- |  --------
C>   1  |  Satellite id (244 is f-11; 246 is f-13; 247 is f-14; 248 is f-15)
C>   2  |  4-digit year for scan
C>   3  |  2-digit month of year for scan
C>   4  |  2-digit day of month for scan
C>   5  |  2-digit hour of day for scan
C>   6  |  2-digit minute of hour for scan
C>   7  |  2-digit second of minute for scan
C>   8  |  Scan number in orbit
C>   9  |  Orbit number for scan
C>  10  |  Retrieval #1 latitude  (*100 degrees: + n, - s)
C>  11  |  Retrieval #1 longitude (*100 degrees east)
C>  12  |  Retrieval #1 position number
C>  13  |  Retrieval #1 surface tag (code figure)
C>
C> #### For LPROD = TRUE {Input products file: note all products below except sea-surface temperature are available in the fnoc "operational" products data dump; most ncep products data dumps contain only wind speed, total precipitable water, cloud water and sea-surface temperature (all over ocean only)}:
C> WORD |  CONTENTS
C> ---- |  --------
C> 14  |  Retrieval #1 cloud water (*100 kilogram/meter**2)
C> 15  |  Retrieval #1 rain rate (*1000000 millimeters/second)
C> 16  |  Retrieval #1 wind speed (*10 meters/second)
C> 17  |  Retrieval #1 soil moisture (millimeters)
C> 18  |  Retrieval #1 sea-ice concentration (per cent)
C> 19  |  Retrieval #1 sea-ice age (code figure)
C> 20  |  Retrieval #1 ice edge (code figure)
C> 21  |  Retrieval #1 total precip. water (*10 millimeters)
C> 22  |  Retrieval #1 surface temp (*100 k) if not over ocean -OR-
C> 22  |  Retrieval #1 sea-surface temp (*100 k) if over ocean
C> 23  |  Retrieval #1 snow depth (millimeters)
C> 24  |  Retrieval #1 rain flag (code figure)
C> 25  |  Retrieval #1 calculated surface type (code figure)
C>
C> #### For LBRIT = TRUE (Input brightness temperature file):
C> WORD |  CONTENTS
C> ---- |  --------
C> 26  |  Retrieval #1 19 ghz v brightness temp (*100 deg. k)
C> 27  |  Retrieval #1 19 ghz h brightness temp (*100 deg. k)
C> 28  |  Retrieval #1 22 ghz v brightness temp (*100 deg. k)
C> 29  |  Retrieval #1 37 ghz v brightness temp (*100 deg. k)
C> 30  |  Retrieval #1 37 ghz h brightness temp (*100 deg. k)
C> 31  |  Retrieval #1 85 ghz v brightness temp (*100 deg. k)
C> 32  |  Retrieval #1 85 ghz h brightness temp (*100 deg. k)
C>
C> #### For LBRIT = TRUE and NNALG = TRUE (Input brightness temperature file):
C> WORD |  CONTENTS
C> ---- |  --------
C> 33  |  Retrieval #1 Neural net 3 algorithm wind speed (generated in-line) (*10 meters/second)
C> 34  |  Retrieval #1 Neural net 3 algorithm total precip. water (generated in-line) (*10 millimeters)
C>
C> #### For LBRIT = TRUE and GBALG = TRUE (Input brightness temperature file):
C> WORD |  CONTENTS
C> ---- |  --------
C> 35  |  Retrieval #1 goodberlet algorithm wind speed (generated in-line) (*10 meters/second)
C> 36  |  Retrieval #1 goodberlet algorithm rain flag (code figure)
C> 37-1737 | Repeat 10-36 for 63 more retrievals
C>
C> @note All missing data or data not selected by calling program are set to 99999
C>
C> @author Dennis Keyser @date 1996-07-30

      SUBROUTINE W3MISCAN(INDTA,INLSF,INGBI,INGBD,LSAT,LPROD,LBRIT,
     $ NNALG,GBALG,KDATE,LDATE,IGNRTM,IBUFTN,IBDATE,IER)

      LOGICAL  LPROD,LBRIT,NNALG,GBALG,LSAT(240:249)

      CHARACTER*1  CDUMMY
      CHARACTER*2  ATXT(2)
      CHARACTER*8  SUBSET
      CHARACTER*20 RHDER,PROD2,BRITE
      CHARACTER*46 SHDER,PROD1

      REAL  SHDR(9),RHDR(4,64),PROD(13,64),BRIT(2,448),RINC(5),
     $ METFET(64)

      REAL(8)  SHDR_8(9),RHDR_8(4,64),PROD_8(13,64),BRIT_8(2,448),
     $ UFBINT_8(64)

      INTEGER  IBUFTN(1737),KDATA(7),KDATE(5),LDATE(5),LBTER(7),
     $ KSPSAT(239:249),KNTSAT(239:249),IFLAG(64),KDAT(8),LDAT(8),
     $ MDAT(8),ICDATE(5),IDDATE(5)

      COMMON/MISCCC/SSTDAT(360,180)
      COMMON/MISCEE/LFLAG,LICEC

      SAVE

      DATA  SHDER /'SAID  YEAR MNTH DAYS HOUR MINU SECO SCNN ORBN '/
      DATA  RHDER /'CLATH CLONH POSN SFTG '/
      DATA  PROD1 /'VILWC REQV WSPD SMOI ICON ICAG ICED TPWT TMSK '/
      DATA  PROD2 /'TOSD RFLG SFTP SST1 '/
      DATA  BRITE /'CHNM TMBR           '/
      DATA  ATXT  /'NN','GB'/
      DATA  IMSG  /99999/,KNTSCN/0/,KNTTIM/0/,LAERR/0/,
     $ LOERR/0/,LBTER/7*0/,ITIMES/0/,NLR/0/,NIR/0/,DMAX/-99999./,
     $ DMIN/99999./,KSPSAT/11*0/,KNTSAT/11*0/,ILFLG/0/,BMISS/10.0E10/

      IF(ITIMES.EQ.0)  THEN

C***********************************************************************
C FIRST CALL INTO SUBROUTINE DO A FEW THINGS .....
         ITIMES = 1
         LFLAG = 0
         LICEC = 0
         PRINT 65, INDTA
   65    FORMAT(//' ---> W3MISCAN: Y2K/F90 VERSION 08/04/2011: ',
     $    'PROCESSING SSM/I DATA FROM BUFR DATA SET READ FROM UNIT ',
     $    I4/)
         IF(LPROD)  PRINT 66
   66    FORMAT(//'  ===> WILL READ FROM BUFR PRODUCTS DATA DUMP ',
     $    'FILE (EITHER FNOC OR NCEP) AND PROCESS ONE OR MORE SSM/I ',
     $    'PRODUCTS'//)
         IF(LBRIT)  THEN
            PRINT 167
  167       FORMAT(//'  ===> WILL READ FROM BUFR BRIGHTNESS ',
     $       'TEMPERATURE DATA DUMP FILE AND PROCESS BRIGHTNESS ',
     $       'TEMPERATURES'//)
            IF(NNALG)  PRINT 169
  169       FORMAT('  ===>  IN ADDITION, WILL PERFORM IN-LINE ',
     $       'CALCULATION OF NEURAL NETWORK 3 WIND SPEED AND TOTAL ',
     $       'PRECIPITABLE WATER AND PROCESS THESE'/)
            IF(GBALG)  PRINT 170
  170       FORMAT('  ===>  IN ADDITION, WILL PERFORM IN-LINE ',
     $       'CALCULATION OF GOODBERLET WIND SPEED AND PROCESS THESE'/)
         END IF
         IF(IGNRTM.EQ.1)  PRINT 704
  704    FORMAT(' W3MISCAN: INPUT ARGUMENT "IGNRTM" IS SET TO 1 -- NO ',
     $    'TIME CHECKS WILL BE PERFORMED ON SCANS - ALL SCANS READ IN ',
     $    'ARE PROCESSED'/)

         PRINT 104, KDATE,LDATE
  104    FORMAT(' W3MISCAN: REQUESTED EARLIEST DATE:',I7,4I5/
     $          '           REQUESTED LATEST   DATE:',I7,4I5)

         KDAT = 0
         KDAT(1:3) = KDATE(1:3)
         KDAT(5:6) = KDATE(4:5)
         LDAT = 0
         LDAT(1:3) = LDATE(1:3)
         LDAT(5:6) = LDATE(4:5)

C DO REQUESTED EARLIEST AND LATEST DATES MAKE SENSE?

         CALL W3DIFDAT(LDAT,KDAT,3,RINC)
         IF(RINC(3).LT.0)  THEN
C.......................................................................
            PRINT 103
  103       FORMAT(' ##W3MISCAN: REQUESTED EARLIEST AND LATEST DATES ',
     $       'ARE BACKWARDS!! - IER = 3'/)
            IER = 3
            RETURN
C.......................................................................
         END IF

C DETERMINE MACHINE WORD LENGTH IN BYTES AND TYPE OF CHARACTER SET
C  {ASCII(ICHTP=0) OR EBCDIC(ICHTP=1)}

         CALL W3FI04(IENDN,ICHTP,LW)
         PRINT 2213, LW, ICHTP, IENDN
 2213    FORMAT(/' ---> W3MISCAN: CALL TO W3FI04 RETURNS: LW = ',I3,
     $    ', ICHTP = ',I3,', IENDN = ',I3/)

         CALL DATELEN(10)

         CALL DUMPBF(INDTA,ICDATE,IDDATE)
cppppp
         print *,'CENTER DATE (ICDATE) = ',icdate
         print *,'DUMP DATE (IDDATE)   = ',iddate
cppppp

C COME HERE IF CENTER DATE COULD NOT BE READ FROM FIRST DUMMY MESSAGE
C  - RETURN WITH IRET = 2

         IF(ICDATE(1).LE.0)  GO TO 998

C COME HERE IF DUMP DATE COULD NOT BE READ FROM SECOND DUMMY MESSAGE
C  - RETURN WITH IRET = 2

         IF(IDDATE(1).LE.0)  GO TO 998
         IF(ICDATE(1).LT.100)  THEN

C IF 2-DIGIT YEAR RETURNED IN ICDATE(1), MUST USE "WINDOWING" TECHNIQUE
C  TO CREATE A 4-DIGIT YEAR

C IMPORTANT: IF DATELEN(10) IS CALLED, THE DATE HERE SHOULD ALWAYS
C            CONTAIN A 4-DIGIT YEAR, EVEN IF INPUT FILE IS NOT
C            Y2K COMPLIANT (BUFRLIB DOES THE WINDOWING HERE)

            PRINT *, '##W3MISCAN - THE FOLLOWING SHOULD NEVER ',
     $       'HAPPEN!!!!!'
            PRINT *, '##W3MISCAN - 2-DIGIT YEAR IN ICDATE(1) RETURNED ',
     $       'FROM DUMPBF (ICDATE IS: ',ICDATE,') - USE WINDOWING ',
     $       'TECHNIQUE TO OBTAIN 4-DIGIT YEAR'
            IF(ICDATE(1).GT.20)  THEN
               ICDATE(1) = 1900 + ICDATE(1)
            ELSE
               ICDATE(1) = 2000 + ICDATE(1)
            ENDIF
            PRINT *, '##W3MISCAN - CORRECTED ICDATE(1) WITH 4-DIGIT ',
     $       'YEAR, ICDATE NOW IS: ',ICDATE
         ENDIF

         IF(IDDATE(1).LT.100)  THEN

C IF 2-DIGIT YEAR RETURNED IN IDDATE(1), MUST USE "WINDOWING" TECHNIQUE
C  TO CREATE A 4-DIGIT YEAR

C IMPORTANT: IF DATELEN(10) IS CALLED, THE DATE HERE SHOULD ALWAYS
C            CONTAIN A 4-DIGIT YEAR, EVEN IF INPUT FILE IS NOT
C            Y2K COMPLIANT (BUFRLIB DOES THE WINDOWING HERE)

            PRINT *, '##W3MISCAN - THE FOLLOWING SHOULD NEVER ',
     $       'HAPPEN!!!!!'
            PRINT *, '##W3MISCAN - 2-DIGIT YEAR IN IDDATE(1) RETURNED ',
     $       'FROM DUMPBF (IDDATE IS: ',IDDATE,') - USE WINDOWING ',
     $       'TECHNIQUE TO OBTAIN 4-DIGIT YEAR'
            IF(IDDATE(1).GT.20)  THEN
               IDDATE(1) = 1900 + IDDATE(1)
            ELSE
               IDDATE(1) = 2000 + IDDATE(1)
            ENDIF
            PRINT *, '##W3MISCAN - CORRECTED IDDATE(1) WITH 4-DIGIT ',
     $       'YEAR, IDDATE NOW IS: ',IDDATE
         END IF

C  OPEN BUFR FILE - READ IN DICTIONARY MESSAGES (TABLE A, B, D ENTRIES)

         CALL OPENBF(INDTA,'IN',INDTA)

         print *, '                 '
         print *, 'OPEN NCEP BUFR SSM/I DUMP FILE'
         print *, '                 '

C  Check to see if the old (pre 9/2004) version of the mnemonic
C   table is being used here (had "PH2O" instead of "TPWT",
C   "SNDP" instead of "TOSD", "WSOS" instead of "WSPD")
C  ------------------------------------------------------------

         CALL STATUS(INDTA,LUN,IDUMMY1,IDUMMY2)
         CALL NEMTAB(LUN,'PH2O',IDUMMY1,CDUMMY,IRET_PH2O)
         CALL NEMTAB(LUN,'SNDP',IDUMMY1,CDUMMY,IRET_SNDP)
         CALL NEMTAB(LUN,'WSOS',IDUMMY1,CDUMMY,IRET_WSOS)
         CALL NEMTAB(LUN,'CH2O',IDUMMY1,CDUMMY,IRET_CH2O)

         IF(LBRIT.AND.(NNALG.OR.GBALG))  THEN

C-----------------------------------------------------------------------
C         IF IN-LINE CALC. OF WIND SPEED FROM GOODBERLET ALG. OR
C    IN-LINE CALCULATION OF WIND SPEED AND TPW FROM NEURAL NET 3 ALG.
C  FIRST CALL TO THIS SUBROUTINE WILL READ IN SEA-SURFACE TEMPERATURE
C                    FIELD AS A CHECK FOR ICE LIMITS
C            WILL ALSO OPEN DIRECT ACCESS NESDIS LAND SEA FILE
C-----------------------------------------------------------------------

            CALL MISC06(INGBI,INGBD,KDATE,LDATE,*993,*994,*995,*996)
            PRINT 67, INLSF
   67       FORMAT(//4X,'** W3MISCAN: OPEN R. ACCESS NESDIS LAND/SEA ',
     $       'FILE IN UNIT ',I2/)
         OPEN(UNIT=INLSF,ERR=997,ACCESS='DIRECT',IOSTAT=IERR,RECL=10980)
         END IF

C READ THE FIRST BUFR MESSAGE IN THE BUFR FILE

         CALL READMG(INDTA,SUBSET,IBDATE,IRET)

         print *, 'READ FIRST BUFR MESSAGE: SUBSET = ',SUBSET,
     $    '; IBDATE = ',IBDATE,'; IRET = ',IRET

         IF(IRET.NE.0)  GO TO 998

C***********************************************************************

      END IF

   30 CONTINUE

C TIME TO DECODE NEXT SUBSET (SCAN) OUT OF BUFR MESSAGE

      IBUFTN = IMSG
      CALL READSB(INDTA,IRET)
      IF(IRET.NE.0)  THEN

C ALL SUBSETS OUT OF THIS MESSAGE READ, TIME TO MOVE ON TO NEXT MESSAGE

         CALL READMG(INDTA,SUBSET,IBDATE,IRET)

         print *, 'READ NEXT BUFR MESSAGE: SUBSET = ',SUBSET,
     $    '; IBDATE = ',IBDATE,'; IRET = ',IRET

         IF(IRET.NE.0)  THEN
c.......................................................................

C NON-ZERO IRET IN READMG MEANS ALL BUFR MESSAGES IN FILE HAVE BEEN READ
C  - ALL FINISHED, NO OTHER SCANS W/I DESIRED TIME RANGE -- SET IER TO 1
C  AND RETURN TO CALLING PROGRAM

            PRINT 124, KNTSCN
  124       FORMAT(/' W3MISCAN: +++++ ALL VALID SCANS UNPACKED AND ',
     $       'RETURNED FROM THIS NCEP BUFR SSM/I DUMP FILE'//34X,
     $       '** W3MISCAN: SUMMARY **'//35X,'TOTAL NUMBER OF SCANS ',
     $       'PROCESSED AND RETURNED',11X,I7)
            DO JJ = 239,249
               IF(KNTSAT(JJ).GT.0)  THEN
                  PRINT  294, JJ,KNTSAT(JJ)
  294             FORMAT(35X,'......NO. OF SCANS PROCESSED AND ',
     $             'RETURNED FROM SAT',I4,':',I7)
               END IF
            END DO
            DO JJ = 239,249
               IF(KSPSAT(JJ).GT.0)  THEN
                  II = JJ
                  IF(JJ.EQ.239)  II = 1
                  PRINT  224, II,KSPSAT(JJ)
  224             FORMAT(35X,'NO. OF SCANS SKIPPED DUE TO BEING FROM ',
     $             'NON-REQ SAT',I4,':',I7)
               END IF
            END DO
            PRINT 194, KNTTIM
  194       FORMAT(35X,'NUMBER OF SCANS SKIPPED DUE TO BEING OUTSIDE ',
     $       'TIME INT.:',I7)
            PRINT 324, LAERR,LOERR
  324 FORMAT(
     $/35X,'NUMBER OF RETRIEVALS WITH LATITUDE OUT OF RANGE:       ',I7/
     $ 35X,'NUMBER OF RETRIEVALS WITH LONGITUDE OUT OF RANGE:      ',I7)
            IF(LBRIT)  THEN
               IF(NNALG.OR.GBALG)  PRINT 780, LBTER,NLR,NIR
  780 FORMAT(
     $ 35X,'NUMBER OF RETRIEVALS W/ ERROR IN 19 GHZ V BRIGHT. TEMP:',I7/
     $ 35X,'NUMBER OF RETRIEVALS W/ ERROR IN 19 GHZ H BRIGHT. TEMP:',I7/
     $ 35X,'NUMBER OF RETRIEVALS W/ ERROR IN 22 GHZ V BRIGHT. TEMP:',I7/
     $ 35X,'NUMBER OF RETRIEVALS W/ ERROR IN 37 GHZ V BRIGHT. TEMP:',I7/
     $ 35X,'NUMBER OF RETRIEVALS W/ ERROR IN 37 GHZ H BRIGHT. TEMP:',I7/
     $ 35X,'NUMBER OF RETRIEVALS W/ ERROR IN 85 GHZ V BRIGHT. TEMP:',I7/
     $ 35X,'NUMBER OF RETRIEVALS W/ ERROR IN 85 GHZ H BRIGHT. TEMP:',I7/
     $ 35X,'NUMBER OF RETRIEVALS REJECTED DUE TO BEING OVER LAND:  ',I7/
     $ 35X,'NUMBER OF RETRIEVALS REJECTED DUE TO BEING OVER ICE:   ',I7)
               IF(NNALG)  PRINT 781, LFLAG,LICEC
  781 FORMAT(
     $ 35X,'NUMBER OF NN3 RETR. REJECTED DUE TO FAILING RAIN FLAG: ',I7/
     $ 35X,'NUMBER OF NN3 RETR. REJECTED DUE TO ICE CONTAMINATION: ',I7)
               IF(NNALG.OR.GBALG)  PRINT 782, DMAX,DMIN
  782 FORMAT(/'  ** FOR SEA-SFC TEMP AT ALL RETRIEVAL LOCATIONS: FIELD',
     $ ' MAX =',F8.3,' DEG K, FIELD MIN =',F8.3,' DEG K'/)
            END IF
            IER = 1
            RETURN
C.......................................................................
         END IF

         GO TO 30
      END IF

C***********************************************************************
C         COME HERE FOR BOTH PRODUCTS AND BRIGHTNESS TEMPERATURES
C***********************************************************************
      SHDR = BMISS
      CALL UFBINT(INDTA,SHDR_8,09,1,NLEV,SHDER) ; SHDR = SHDR_8
      ILFLG = 1
      IF(NLEV.NE.1)  GO TO 999

C STORE THE SCAN'S SATELLITE ID IN WORD 1
C STORE SCAN'S YEAR (YYYY), MONTH, DAY, HOUR, MIN, SEC INTO WORDS 2-7
C STORE THE SCAN NUMBER IN WORD 8
C STORE THE SCAN'S ORBIT NUMBER IN WORD 9

      IBUFTN(1:9) = MIN(IMSG,NINT(SHDR(1:9)))

C CHECK TO SEE IF SCAN IS FROM REQUESTED SATELLITE ID

      IF(IBUFTN(1).LT.240.OR.IBUFTN(1).GT.249) THEN
         PRINT 523, (IBUFTN(II),II=1,9)
         KSPSAT(239) = KSPSAT(239) + 1
         GO TO 30
      END IF
      IF(.NOT.LSAT(IBUFTN(1))) THEN
CDAK     PRINT 523, (IBUFTN(II),II=1,9)
  523    FORMAT(' ##W3MISCAN: SCAN NOT FROM REQ. SAT. ID -SAT. ID',I4,
     $   ', SCAN TIME:',6I4,', SCAN',I6,', ORBIT',I8,'-GO TO NEXT SCAN')
         KSPSAT(IBUFTN(1)) = KSPSAT(IBUFTN(1)) + 1
         GO TO 30
      END IF

      IF(IGNRTM.EQ.0)  THEN

C TIME CHECK THIS SCAN IF USER REQUESTS SUCH

         MDAT = 0
         MDAT(1:3) = IBUFTN(2:4)
         MDAT(5:7) = IBUFTN(5:7)
         CALL W3DIFDAT(KDAT,MDAT,4,RINC)
         KSEC = RINC(4)
         CALL W3DIFDAT(LDAT,MDAT,4,RINC)
         LSEC = RINC(4)
         IF(KSEC.GT.0.OR.LSEC.LT.0)  THEN

C TIME CHECK FOR SCAN FAILED: GO ON TO NEXT SCAN

CDAK        PRINT 123, (IBUFTN(II),II=2,9)
  123       FORMAT(' ##W3MISCAN: SCAN NOT IN REQUESTED TIME WINDOW-',
     $    'SCAN TIME:',6I5,' SCAN',I6,', ORBIT',I8,' - GO TO NEXT SCAN')
            KNTTIM = KNTTIM + 1
            GO TO 30
         END IF
      END IF
      RHDR = BMISS
      CALL UFBINT(INDTA,RHDR_8,04,64,NLEV,RHDER) ; RHDR = RHDR_8
      ILFLG = 2
      IF(NLEV.NE.64)  GO TO 999
      IFLAG = 0
      DO IRT = 1,64

C THIS ROUTINE EXPECTS LONGITUDE TO BE 0-360 E; BUFR NOW RETURNS -180-0
C  FOR WEST AND 0-180 FOR EAST

         IF(RHDR(2,IRT).LT.0.0)  RHDR(2,IRT) = RHDR(2,IRT) + 360.
C-----------------------------------------------------------------------
C             LOOP THROUGH THE 64 RETRIEVALS IN A SCAN
C-----------------------------------------------------------------------
C STORE THE LATITUDE (*100 DEGREES; + : NORTH, - : SOUTH)
         IF(NINT(RHDR(1,IRT)*100.).GE.-9000.AND.NINT(RHDR(1,IRT)*100.)
     $    .LE.9000)  THEN
            IBUFTN((27*IRT)-17) = NINT(RHDR(1,IRT)*100.)
         ELSE

C.......................................................................

C BAD LATITUDE

            LAERR = LAERR + 1
            PRINT 777, IRT,IBUFTN(8),IBUFTN(9),NINT(RHDR(1,IRT)*100.)
  777       FORMAT(' ##W3MISCAN: BAD LAT: RETR.',I3,', SCAN',I6,
     $       ', ORBIT',I8,'; INPUT LAT=',I7,' - ALL DATA IN THIS ',
     $       'RETRIEVAL SET TO MISSING')
            IFLAG(IRT) = 1
C.......................................................................

         END IF

C STORE THE LONGITUDE (*100 DEGREES EAST)

         IF(NINT(RHDR(2,IRT)*100.).GE.0.AND.NINT(RHDR(2,IRT)*100.).LE.
     $    36000)  THEN
            IF(IFLAG(IRT).EQ.0)
     $       IBUFTN((27*IRT)-16) = NINT(RHDR(2,IRT)*100.)
         ELSE

C.......................................................................

C BAD LONGITUDE

            LOERR = LOERR + 1
            PRINT 778, IRT,IBUFTN(8),IBUFTN(9),NINT(RHDR(2,IRT)*100.)
  778       FORMAT(' ##W3MISCAN: BAD LON: RETR.',I3,', SCAN',I6,
     $       ', ORBIT',I8,'; INPUT LON=',I7,' - ALL DATA IN THIS ',
     $       'RETRIEVAL SET TO MISSING')
            IFLAG(IRT) = 1
C.......................................................................

         END IF
         IF(IFLAG(IRT).NE.0)  GO TO 110

C STORE THE POSITION NUMBER

         IBUFTN((27*IRT)-15) = MIN(IMSG,NINT(RHDR(3,IRT)))

C STORE THE SURFACE TAG (0-6)

         IBUFTN((27*IRT)-14) = MIN(IMSG,NINT(RHDR(4,IRT)))
  110    CONTINUE
C-----------------------------------------------------------------------
      END DO

      IF(LPROD)  THEN
C***********************************************************************
C      COME HERE TO PROCESS PRODUCTS FROM INPUT SSM/I PRODUCTS FILE
C***********************************************************************

         PROD = BMISS
         CALL UFBINT(INDTA,PROD_8,13,64,NLEV,PROD1//PROD2)
         UFBINT_8 = BMISS
         IF(IRET_PH2O.GT.0) THEN  ! Prior to 9/2004
            CALL UFBINT(INDTA,UFBINT_8,1,64,NLEV,'PH2O')
            PROD_8(8,:) = UFBINT_8(:)
         END IF
         UFBINT_8 = BMISS
         IF(IRET_SNDP.GT.0) THEN  ! Prior to 9/2004
            CALL UFBINT(INDTA,UFBINT_8,1,64,NLEV,'SNDP')
            PROD_8(10,:) = UFBINT_8(:)
         END IF
         UFBINT_8 = BMISS
         IF(IRET_WSOS.GT.0) THEN  ! Prior to 9/2004
            CALL UFBINT(INDTA,UFBINT_8,1,64,NLEV,'WSOS')
            PROD_8(3,:) = UFBINT_8(:)
         END IF
         UFBINT_8 = BMISS
         IF(IRET_CH2O.GT.0) THEN  ! Prior to 9/2004
            CALL UFBINT(INDTA,UFBINT_8,1,64,NLEV,'CH2O')
            PROD_8(1,:) = UFBINT_8(:)
         ELSE
            CALL UFBINT(INDTA,UFBINT_8,1,64,NLEV,'METFET')
            METFET = UFBINT_8
            DO IRT = 1,64
               IF(NINT(METFET(IRT)).NE.12)  PROD_8(1,IRT) = BMISS
            END DO
         END IF

         print*,'************in prod loop'

         PROD=PROD_8
         ILFLG = 3
         IF(NLEV.EQ.0)  THEN
            PRINT 797, IBUFTN(8),IBUFTN(9)
  797       FORMAT(' ##W3MISCAN: PRODUCTS REQ. BUT SCAN',I6,', ORBIT',
     $       I8,' DOES NOT CONTAIN PRODUCT DATA - CONTINUE PROCESSING ',
     $       'SCAN (B.TEMPS REQ.?)')
            GO TO 900
         ELSE  IF(NLEV.NE.64)  THEN
            GO TO 999
         END IF
         DO IRT = 1,64
C-----------------------------------------------------------------------
C             LOOP THROUGH THE 64 RETRIEVALS IN A SCAN
C-----------------------------------------------------------------------
            IF(IFLAG(IRT).NE.0)  GO TO 111

C STORE THE CLOUD WATER (*100 KG/M**2) IF AVAILABLE

            IF(NINT(PROD(01,IRT)).LT.IMSG)
     $       IBUFTN((27*IRT)-13) = NINT(PROD(01,IRT)*100.)

C STORE THE RAIN RATE (*1000000 KG/((M**2)*SEC)) IF AVAILABLE
C  (THIS IS ALSO RAIN RATE (*1000000 MM/SEC))

            IF(NINT(PROD(02,IRT)).LT.IMSG)
     $       IBUFTN((27*IRT)-12) = NINT(PROD(02,IRT)*1000000.)

C STORE THE WIND SPEED (*10 M/SEC) IF AVAILABLE

            IBUFTN((27*IRT)-11) = MIN(IMSG,NINT(PROD(03,IRT)*10.))

C STORE THE SOIL MOISTURE (MM) IF AVAILABLE

            IF(NINT(PROD(04,IRT)).LT.IMSG)
     $       IBUFTN((27*IRT)-10) = NINT(PROD(04,IRT)*1000.)

C STORE THE SEA ICE CONCENTRATION (PERCENT) IF AVAILABLE

            IBUFTN((27*IRT)-09) = MIN(IMSG,NINT(PROD(05,IRT)))

C STORE THE SEA ICE AGE (0,1) IF AVAILABLE

            IBUFTN((27*IRT)-08) = MIN(IMSG,NINT(PROD(06,IRT)))

C STORE THE ICE EDGE (0,1) IF AVAILABLE

            IBUFTN((27*IRT)-07) = MIN(IMSG,NINT(PROD(07,IRT)))

C STORE THE WATER VAPOR (*10 KG/M**2) IF AVAILABLE
C  (THIS IS ALSO TOTAL PRECIPITABLE WATER SCALED AS *10 MM)

            IBUFTN((27*IRT)-06) = MIN(IMSG,NINT(PROD(08,IRT)*10.))

            IF(IBUFTN((27*IRT)-14).NE.5)  THEN

C STORE THE SURFACE TEMPERATURE (*100 DEGREES KELVIN) IF AVAILABLE
C  (NOTE: SURFACE TAG MUST NOT BE 5)

               IBUFTN((27*IRT)-05) = MIN(IMSG,NINT(PROD(09,IRT)*100.))

            ELSE

C STORE THE SEA-SURFACE TEMPERATURE (*100 DEGREES KELVIN) IF AVAILABLE
C  (NOTE: SURFACE TAG MUST BE 5)

               IBUFTN((27*IRT)-05) = MIN(IMSG,NINT(PROD(13,IRT)*100.))

            END IF

C STORE THE SNOW DEPTH (MM) IF AVAILABLE

            IF(NINT(PROD(10,IRT)).LT.IMSG)
     $       IBUFTN((27*IRT)-04) = NINT(PROD(10,IRT)*1000.)

C STORE THE RAIN FLAG (0-3) IF AVAILABLE

            IBUFTN((27*IRT)-03) = MIN(IMSG,NINT(PROD(11,IRT)))

C STORE THE CALCULATED SURFACE TYPE (1-20) IF AVAILABLE

            IBUFTN((27*IRT)-02) = MIN(IMSG,NINT(PROD(12,IRT)))
  111       CONTINUE
C-----------------------------------------------------------------------
         END DO
      END IF
  900 CONTINUE

      IF(LBRIT)  THEN
C***********************************************************************
C    COME HERE TO PROCESS BRIGHTNESS TEMPERATURES FROM INPUT SSM/I
C                   BRIGHTNESS TEMPERATURE FILE
C   AND POSSIBLY FOR IN-LINE CALC. OF WIND SPEED VIA GOODBERLET ALG.
C AND POSSIBLY FOR IN-LINE CALC. OF WIND SPEED AND TPW VIA N. NET 3 ALG.
C***********************************************************************

         BRIT = BMISS
         CALL UFBREP(INDTA,BRIT_8,2,448,NLEV,BRITE) ; BRIT = BRIT_8
         ILFLG = 4
         IF(NLEV.EQ.0)  THEN
            PRINT 798, IBUFTN(8),IBUFTN(9)
  798       FORMAT(' ##W3MISCAN: B. TEMPS REQ. BUT SCAN',I6,', ORBIT',
     $       I8,' DOES NOT CONTAIN B. TEMP DATA - DONE PROCESSING THIS',
     $       ' SCAN')
            GO TO 901
         ELSE  IF(NLEV.NE.448)  THEN
            GO TO 999
         END IF
         DO IRT = 1,64
C-----------------------------------------------------------------------
C             LOOP THROUGH THE 64 RETRIEVALS IN A SCAN
C-----------------------------------------------------------------------
            IF(IFLAG(IRT).NE.0)  GO TO 112

C STORE THE 7 BRIGHTNESS TEMPS (*100 DEGREES KELVIN)
C  -- CHANNELS ARE IN THIS ORDER FOR A PARTICULAR RETRIEVAL:
C  19 GHZ V, 19 GHZ H, 22 GHZ V, 37 GHZ V, 37 GHZ H, 85 GHZ V, 85 GHZ H

            IGOOD = 0
            MINDX = (IRT * 7) - 6
            DO LCH = MINDX,MINDX+6
               ICHNN = NINT(BRIT(1,LCH))
               IF(ICHNN.GT.7)  GO TO 79
               IF(NINT(BRIT(2,LCH)).LT.IMSG)  THEN
                  IBUFTN((27*IRT)-02+ICHNN) = NINT(BRIT(2,LCH)*100.)
                  IGOOD = 1
               END IF
   79          CONTINUE
            END DO

            IF(NNALG.OR.GBALG)  THEN
               KDATA = IMSG
               IF(IGOOD.EQ.1)  THEN
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
C  COME HERE FOR IN-LINE CALC. OF WIND SPEED VIA GOODBERLET ALG. AND/OR
C      FOR IN-LINE CALC. OF WIND SPEED AND TPW VIA NEURAL NET 3 ALG.
C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

C GET LAND/SEA TAG AND CHECK FOR LAT/LON OVER LAND OR ICE

             BALON=REAL(MOD(IBUFTN((27*IRT)-16)+18000,36000)-18000)/100.
                  IALON = MOD(36000-IBUFTN((27*IRT)-16),36000)
                  IX = 361. - REAL(IALON)/100.
                  JY = 91 - NINT(REAL(IBUFTN((27*IRT)-17))/100. + 0.50)
                  DMIN = MIN(DMIN,SSTDAT(IX,JY))
                  DMAX = MAX(DMAX,SSTDAT(IX,JY))
           CALL MISC04(INLSF,REAL(IBUFTN((27*IRT)-17))/100.,BALON,LSTAG)

C      ..... REJECT IF OVER LAND (USE LAND/SEA TAG HERE)

                  IF(LSTAG.NE.0)  THEN
                     NLR = NLR + 1
                     GO TO 112
                  END IF

C      ..... REJECT IF OVER ICE (USE SEA-SURFACE TEMPERATURE HERE)

                  IF(SSTDAT(IX,JY).LE.272.96)  THEN
                     NIR = NIR + 1
                     GO TO 112
                  END IF

                  KDATA = IBUFTN((27*IRT)-01:(27*IRT)+05)
                  DO IT = 1,7
                     IF((IT.NE.2.AND.KDATA(IT).LT.10000).OR.
     $                  (IT.EQ.2.AND.KDATA(IT).LT. 8000))  THEN
                        LBTER(IT) = LBTER(IT) + 1
                       PRINT 779,IT,IBUFTN(8),IBUFTN(9),KDATA
  779 FORMAT(' ##W3MISCAN: BT, CHN',I2,' BAD: SCAN',I6,', ORBIT',I8,
     $ '; BT:',7I6,'-CANNOT CALC. PRODS VIA ALG.')
                        GO TO 112
                     END IF
                  END DO

C CALL SUBR. MISC01 TO INITIATE IN-LINE PRODUCT CALCULATION

                  CALL MISC01(NNALG,GBALG,KDATA,SWNN,TPWNN,SWGB,NRFGB)

                  IF(NNALG)  THEN
CDAK                 IF(MOD(KNTSCN,100).EQ.0)  PRINT 6021, ATXT(1),SWNN,
CDAK $                TPWNN,REAL(KDATA(1))/100.,(REAL(KDATA(KKK))/100.,
CDAK $                KKK=3,5),(REAL(KDATA(4)-KDATA(5)))/100.
 6021 FORMAT(' W3MISCAN: ',A2,' SPD',F6.1,'  TPW',F6.1,'  TB19V',F6.1,
     $ '  TB22V',F6.1,'  TB37V',F6.1,'  TB37H',F6.1,'  TD37',F5.1)

C STORE THE CALCULATED NEURAL NET 3 WIND SPEED (*10 M/SEC)

                     IBUFTN((27*IRT)+6) = MIN(IMSG,NINT(SWNN*10.))

C STORE THE CALCULATED NEURAL NET 3 TPW (*10 MILLIMETERS)

                     IBUFTN((27*IRT)+7) = MIN(IMSG,NINT(TPWNN*10.))
                  END IF

                  IF(GBALG)  THEN
CDAK                 IF(MOD(KNTSCN,100).EQ.0)  PRINT 602, ATXT(2),NRFGB,
CDAK $                SWGB,REAL(KDATA(1))/100.,(REAL(KDATA(KKK))/100.,
CDAK $                KKK=3,5),(REAL(KDATA(4)-KDATA(5)))/100.
  602 FORMAT(' W3MISCAN: ',A2,' RF, SPD',I2,F6.1,'  TB19V',F6.1,
     $ '  TB22V',F6.1,'  TB37V',F6.1,'  TB37H',F6.1,'  TD37',F5.1)

C STORE THE CALCULATED GOODBERLET WIND SPEED (*10 M/SEC)

                     IBUFTN((27*IRT)+8) = MIN(IMSG,NINT(SWGB*10.))

C STORE THE GOODBERLET RAIN FLAG (0-3)

                     IBUFTN((27*IRT)+9) = MIN(IMSG,NRFGB)
                  END IF

C- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
               ELSE

C......................................................................

C PROBLEM - CAN'T CALCULATE PRODUCTS VIA ANY ALG., ALL B.TEMPS MISSING

                  PRINT 879, IBUFTN(8),IBUFTN(9),KDATA
  879             FORMAT(' ##W3MISCAN: ALL B.TMPS MSSNG: SCAN',I6,', ',
     $             'ORBIT',I8,'; BT:',7I6,'-CANNOT CALC PRODS VIA ALG.')
C......................................................................

               END IF
            END IF

  112       CONTINUE
C-----------------------------------------------------------------------
         END DO
      END IF
C***********************************************************************
  901 CONTINUE

C RETURN TO CALLING PROGRAM - IER = 0 SCAN SUCCESSFULLY READ

      KNTSCN = KNTSCN + 1
      KNTSAT(IBUFTN(1)) = KNTSAT(IBUFTN(1)) + 1
      IER = 0
      RETURN

C.......................................................................
  993 CONTINUE

C PROBLEM: SEA-SURFACE TEMPERATURE NOT FOUND IN GRIB INDEX FILE - ERROR
C          RETURNED FROM GRIB DECODER GETGB IS 96 - SET IER = 6 & RETURN

      PRINT 2008, INGBI
 2008 FORMAT(/' ##W3MISCAN: SEA-SURFACE TEMPERATURE NOT FOUND IN GRIB ',
     $ 'INDEX FILE IN UNIT ',I2,' - IER = 6'/)
      IER = 6
      RETURN

C.......................................................................
  994 CONTINUE

C PROBLEM: SEA-SURFACE TEMPERATURE GRIB MESSAGE HAS A DATE THAT IS
C          EITHER: 1) MORE THAN 7-DAYS PRIOR TO THE EARLIEST REQ. DATE
C          (INPUT ARG. "KDATE") OR 2) MORE THAN 7-DAYS AFTER THE LATEST
C          REQ. DATE (INPUT ARG. "LDATE") - SET IER = 7 AND RETURN

      PRINT 2009
 2009 FORMAT('           SST GRIB MSG HAS DATE WHICH IS EITHER 7-DAYS',
     $ ' PRIOR TO EARLIEST REQ. DATE'/14X,'OR 7-DAYS LATER THAN LATEST',
     $ ' REQ. DATE - IER = 7'/)
      IER = 7
      RETURN

C.......................................................................
  995 CONTINUE

C PROBLEM: BYTE-ADDRESSABLE READ ERROR FOR GRIB FILE CONTAINING SEA-
C          SURFACE TEMPERATURE FIELD - ERROR RETURNED FROM GRIB DECODER
C          GETGB IS 97-99 - SET IER = 8 AND RETURN

      PRINT 2010
 2010 FORMAT('           BYTE-ADDRESSABLE READ ERROR FOR GRIB FILE ',
     $ 'CONTAINING SEA-SURFACE TEMPERATURE FIELD - IER = 8'/)
      IER = 8
      RETURN

C.......................................................................
  996 CONTINUE

C PROBLEM: ERROR RETURNED FROM GRIB DECODER - GETGB - FOR SEA-SURFACE
C          TEMPERATURE FIELD - > 0 BUT NOT 96-99 - SET IER = 9 & RETURN

      PRINT 2011
 2011 FORMAT('           - IER = 9'/)
      IER = 9
      RETURN

C.......................................................................
  997 CONTINUE

C PROBLEM: ERROR OPENING R. ACCESS FILE HOLDING LAND/SEA TAGS - SET IER
C          = 4 AND RETURN

      PRINT 2012, IERR,INLSF
 2012 FORMAT(/' ##W3MISCAN: ERROR OPENING R. ACCESS LAND/SEA FILE IN ',
     $ 'UNIT ',I2,' -- IOSTAT =',I5,' -- NO SCANS PROCESSED - IER = 4'/)
      IER = 4
      RETURN

C.......................................................................
  998 CONTINUE

C PROBLEM: THE INPUT DATA SET IS EITHER EMPTY (NULL), NOT BUFR, OR
C          CONTAINS NO DATA MESSAGES - SET IER = 2 AND RETURN

      PRINT 14, INDTA
   14 FORMAT(/' ##W3MISCAN: SSM-I DATA SET IN UNIT',I3,' IS EITHER ',
     $'EMPTY (NULL), NOT BUFR, OR CONTAINS NO DATA MESSAGES - IER = 2'/)
      IER = 2
      RETURN

C.......................................................................
  999 CONTINUE

C PROBLEM: THE NUMBER OF DECODED "LEVELS" IS NOT WHAT IS EXPECTED - SET
C          IER = 5 AND RETURN

      PRINT 217, NLEV,ILFLG
  217 FORMAT(/' ##W3MISCAN: THE NUMBER OF DECODED "LEVELS" (=',I5,') ',
     $ 'IS NOT WHAT IS EXPECTED (ILFLG=',I1,') - IER = 5'/)
      IER = 5
      RETURN

C.......................................................................
      END
C> @brief Prepares for in-line caluclation of prods.
C> @author Dennis Keyser @date 1995-01-04

C> Based on input 7-channel ssm/i brightness temperatures,
C> determines the rain flag category for wind speed product for the
C> goodberlet algorithm. Then calls the appropriate function to
C> calculate either the wind speed product for the goodberlet
C> algorithm (if requested) or the wind speed and tpw products for
C> the neural net 3 algorithm (if requested).
C>
C> ### Program History Log:
C> Date | Programmer | Comment
C> -----|------------|--------
C> ????-??-?? | W. Gemmill | (w/nmc21) -- original author
C> 1995-01-04 | Dennis Keyser | -- incorporated into w3miscan and
C> streamlined code
C> 1996-05-07 | Dennis Keyser | (np22) -- in-line neural network 1 algoritm
C> replaced by neural network 2 algorithm
C> 1996-07-30 | Dennis Keyser | (np22) -- can now process wind speed from
C> both algorithms if desired
C> 1998-01-28 | Dennis Keyser | (np22) -- replaced neural net 2 algorithm
C> which calculated only wind speed product with neural net 3
C> algorithm which calculates both wind speed and total
C> precipitable water products (among others) but, unlike nn2,
C> does not return a rain flag value (it does set all retrievals
C> to missing that fail rain flag and ice contamination tests)
C>
C> @param[in] NNALG Process wind speed and tpw via neural net 3 algorithm if true
C> @param[in] GBALG Process wind speed via goodberlet algorithm if true
C> @param[in] KDATA 7-word array containing 7 channels of brightness temperature (kelvin x 100)
C> @param[out] SWNN  alculated wind speed based on neural net 3 algorithm (meters/second)
C> @param[out] TPWNN Calculated total column precipitable water based on neural net 3 algorithm (millimeters)
C> @param[out] SWGB Calculated wind speed based on goodberlet algorith (meters/second)
C> @param[out] NRFGB Rain flag category for calculated wind speed from goodberlet algorithm
C>
C> @remark If an algorithm is not chosen, the output products are set
C> to values of 99999. for that algorithm and, for the goodberlet
C> algorithm only, the rain flag is set to 99999. Called by
C> subroutine w3miscan().
C>
C> @author Dennis Keyser @date 1995-01-04
      SUBROUTINE MISC01(NNALG,GBALG,KDATA,SWNN,TPWNN,SWGB,NRFGB)
      LOGICAL  NNALG,GBALG
      REAL  BTA(4),BTAA(7)
      INTEGER  KDATA(7)

      COMMON/MISCEE/LFLAG,LICEC

      SAVE

      SWNN  = 99999.
      TPWNN = 99999.
      SWGB  = 99999.
      NRFGB = 99999

      TB19V = REAL(KDATA(1))/100.
      TB19H = REAL(KDATA(2))/100.
      TB22V = REAL(KDATA(3))/100.
      TB37V = REAL(KDATA(4))/100.
      TB37H = REAL(KDATA(5))/100.
      TB85V = REAL(KDATA(6))/100.
      TB85H = REAL(KDATA(7))/100.
      TD37  = TB37V - TB37H

      IF(NNALG)  THEN
C COMPUTE WIND SPEED FROM NEURAL NET 2 ALGORITHM (1995)
C  (no longer a possibility - subr. expects dim. of 5 on BTAA)
cdak     NRFNN = 1
cdak     IF(TB19H.LE.185.0.AND.TB37H.LE.210.0.AND.TB19V.LT.TB37V)
cdak $      NRFNN = 0
cdak     BTAA(1) = TB19V
cdak     BTAA(2) = TB22V
cdak     BTAA(3) = TB37V
cdak     BTAA(4) = TB37H
cdak     BTAA(5) = TB85V
cdak     SWNN = RISC02xx(BTAA)

C COMPUTE WIND SPEED AND TPW FROM NEURAL NET 3 ALGORITHM (1997)
         BTAA(1) = TB19V
         BTAA(2) = TB19H
         BTAA(3) = TB22V
         BTAA(4) = TB37V
         BTAA(5) = TB37H
         BTAA(6) = TB85V
         BTAA(7) = TB85H
         SWNN = RISC02(BTAA,TPWNN,LQWNN,SSTNN,JERR)
         IF(JERR.EQ.1)  LFLAG = LFLAG + 1
         IF(JERR.EQ.2)  LICEC = LICEC + 1
      END IF

      IF(GBALG)  THEN
C COMPUTE WIND SPEED FROM GOODBERLET ALGORITHM
         NRFGB = 0
         IF(TD37.LE.50.0.OR.TB19H.GE.165.0)  THEN
            IF(TD37.LE.50.0.OR.TB19H.GE.165.0)  NRFGB = 1
            IF(TD37.LE.37.0)  NRFGB = 2
            IF(TD37.LE.30.0)  NRFGB = 3
         END IF
         BTA(1) = TB19V
         BTA(2) = TB22V
         BTA(3) = TB37V
         BTA(4) = TB37H
         SWGB = RISC03(BTA)
      END IF

      RETURN
      END
C> @brief Calc. ssm/i prods from neural net 3 alg.
C> @author V. Krasnopolsky @date 1997-02-02

C> This retrieval algorithm is a neural network implementation
C> of the ssm/i transfer function. It retrieves the wind speed (w)
C> at the height 20 meters, columnar water vapor (v), columnar liquid
C> water (l) and sst. The nn was trained using back-propagation
C> algorithm. Transfer function is described and compared with
C> cal/val and other algorithms in omb technical note no. 137. See
C> remarks for detailed info on this algorithm. This is an improved
C> version of the earlier neural network 2 algorithm.
C>
C> ### Program History Log:
C> Date | Programmer | Comment
C> -----|------------|--------
C> 1997-02-02 | V. Krasnopolsky | Initial.
C>
C> @param[in] XT 7-word array containing brightness temperature in the order:
C> t19v (word 1), t19h (word 2), t22v (word 3), t37v (word 4), t37h (word 5),
C> t85v (word 6), t85h (word 7) (all in kelvin)
C> @param[in] V Columnar water vapor (total precip. water) (mm)
C> @param[in] L Columnar liquid water (mm)
C> @param[in] SST Sea surface temperature (deg. c)
C> @param[in] JERR Error return code:
C> - = 0 -- Good retrievals
C> - = 1 -- Retrievals could not be made due to one or
C> more brightness temperatures out of range
C> (i.e, failed the rain flag test)
C> - = 2 -- Retrievals could not be made due to ice
C> contamination
C> {for either 1 or 2 above, all retrievals set to
C> 99999. (missing)}
C>
C> @remark Function, called by subroutine misc01.
C> Description of training and test data set:
C> ------------------------------------------
C> The training set consists of 3460 matchups which were received
C> from two sources:
C> - 1.  3187 F11/SSMI/buoy matchups were filtered out from a
C> preliminary version of the new NRL database which was
C> kindly provided by G. Poe (NRL). Maximum available wind
C> speed is 24 m/s.
C> - 2.  273 F11/SSMI/OWS matchups were filtered out from two
C> datasets collected by high latitude OWS LIMA and MIKE.
C> These data sets were kindly provided by D. Kilham
C> (University of Bristol).  Maximum available wind speed
C> is 26.4 m/s.
C>
C> Satellite data are collocated with both buoy and OWS data in
C> space within 15 km and in time within 15 min.
C>
C> The test data set has the same structure, the same number of
C> matchups and maximum buoy wind speed.
C>
C> Description of retrieval flags:
C> -------------------------------
C> Retrieval flags by Stogryn et al. are used.  The algorithm
C> produces retrievals under CLEAR + CLOUDY conditions, that is
C> if:
C> - T37V - T37H > 50.   => CLEAR condition -or-
C> - T37V - T37H =< 50.|
C> - T19H =< 185.  and |
C> - T37H =< 210.  and | => CLOUDY conditions
C> - T19V  < T37V      |
C>
C> @author V. Krasnopolsky @date 1997-02-02
      FUNCTION RISC02(XT,V,L,SST,JERR)
      PARAMETER (IOUT =4)
      LOGICAL  LQ1,LQ2,LQ3,LQ4
      REAL  XT(7),Y(IOUT),V,L,SST
      EQUIVALENCE (Y(1),SPN)

      JERR = 0

C --------  Retrieval flag (Stogryn) -------------------------

C  T19H =< 185

      LQ1 = (XT(2).LE.185.)

C  T37H =< 210

      LQ2 = (XT(5).LE.210.)

C  T19V < T37V

      LQ3 = (XT(1).LT.XT(4))

C  T37V - T37H =< 50.

      LQ4 = ((XT(4) - XT(5)).LE.50.)
      LQ1 = (LQ1.AND.LQ2.AND.LQ3)
      IF(.NOT.LQ1.AND.LQ4) THEN
         SPN  = 99999.
         V    = 99999.
         L    = 99999.
         SST  = 99999.
         JERR = 1
         GO TO 111
      END IF

C --------------- Call NN ----------------------

C  NN WIND SPEED

      CALL MISC10(XT,Y)
      V   = Y(2)
      L   = Y(3)
      SST = Y(4)

C --------- Remove negative values  ----------------------------

      IF(SPN.LT.0.0)  SPN = 0.0
      IF(SST.LT.0.0)  SST = 0.0
      IF(V  .LT.0.0)  V   = 0.0

C ------ Remove ice contamination ------------------------------------

      ICE = 0
      SI85 = -174.4 + (0.715 * XT(1)) + (2.439 * XT(3)) - (0.00504 *
     $  XT(3) * XT(3)) - XT(6)
      TT = 44. + (0.85 * XT(1))
      IF(SI85.GE.10.)  THEN
         IF(XT(3).LE.TT)  ICE = 1
         IF((XT(3).GT.264.).AND.((XT(3)-XT(1)).LT.2.))  ICE = 1
      END IF
      IF(ICE.EQ.1)  THEN
         SPN = 99999.
         V   = 99999.
         L   = 99999.
         SST = 99999.
         JERR = 2
      END IF

  111 CONTINUE

      RISC02 = SPN

      RETURN
      END
C> @brief Calc. ssm/i prods from neural net 3 alg.
C> @author V. Krasnopolsky @date 1996-07-15

C> This nn calculates w (in m/s), v (in mm), l (in mm), and
C> sst (in deg c). This nn was trained on blended f11 data set
C> (ssmi/buoy matchups plus ssmi/ows matchups 15 km x 15 min) under
C> clear + cloudy conditions.
C>
C> ### Program History Log:
C> Date | Programmer | Comment
C> -----|------------|--------
C> 1996-07-15 | V. Krasnopolsky | Initial.
C>
C> @param[in] X 5-word array containing brightness temperature in the
C> order: t19v (word 1), t19h (word 2), t22v (word 3),
C> t37v (word 4), t37h (word 5) (all in kelvin)
C> @param[out] Y 4-word array containing calculated products in the
C> order: wind speed (m/s) (word 1), columnar water
C> vapor (total precip. water) (mm) (word 2),  columnar
C> liquid water (mm) (word 3), sea surface temperature
C> (deg. c) (word 4)
C>
C> @remark Called by subroutine risc02().
C>
C> @author V. Krasnopolsky @date 1996-07-15
      SUBROUTINE MISC10(X,Y)
      INTEGER  HID,OUT

C IN IS THE NUMBER OF NN INPUTS, HID IS THE NUMBER OF HIDDEN NODES,
C  OUT IS THE NUMBER OF OUTPUTS

      PARAMETER (IN =5, HID =12, OUT =4)
      DIMENSION  X(IN),Y(OUT),W1(IN,HID),W2(HID,OUT),B1(HID),B2(OUT),
     $ O1(IN),X2(HID),O2(HID),X3(OUT),O3(OUT),A(OUT),B(OUT)

C W1 HOLDS INPUT WEIGHTS

      DATA ((W1(I,J),J = 1,HID),I = 1,IN)/
     $-0.0435901, 0.0614709,-0.0453639,-0.0161106,-0.0271382, 0.0229015,
     $-0.0650678, 0.0704302, 0.0383939, 0.0773921, 0.0661954,-0.0643473,
     $-0.0108528,-0.0283174,-0.0308437,-0.0199316,-0.0131226, 0.0107767,
     $ 0.0234265,-0.0291637, 0.0140943, .00567931,-.00931768,
     $-.00860661, 0.0159747,-0.0749903,-0.0503523, 0.0524172, 0.0195771,
     $ 0.0302056, 0.0331725, 0.0326714,-0.0291429, 0.0180438, 0.0281923,
     $-0.0269554, 0.102836,  0.0591511, 0.134313, -0.0109854,-0.0786303,
     $ 0.0117111, 0.0231543,-0.0205603,-0.0382944,-0.0342049,
     $ 0.00052407,0.110301, -0.0404777, 0.0428816, 0.0878070, 0.0168326,
     $ 0.0196183, 0.0293995, 0.00954805,-.00716287,0.0269475,
     $-0.0418217,-0.0165812, 0.0291809/

C W2 HOLDS HIDDEN WEIGHTS

      DATA ((W2(I,J),J = 1,OUT),I = 1,HID)/
     $-0.827004, -0.169961,-0.230296, -0.311201, -0.243296, 0.00454425,
     $ 0.950679,  1.09296,  0.0842604, 0.0140775, 1.80508, -0.198263,
     $-0.0678487, 0.428192, 0.827626,  0.253772,  0.112026, 0.00563793,
     $-1.28161,  -0.169509, 0.0019085,-0.137136, -0.334738, 0.224899,
     $-0.189678,  0.626459,-0.204658, -0.885417, -0.148720, 0.122903,
     $ 0.650024,  0.715758, 0.735026, -0.123308, -0.387411,-0.140137,
     $ 0.229058,  0.244314,-1.08613,  -0.294565, -0.192568, 0.608760,
     $-0.753586,  0.897605, 0.0322991,-0.178470,  0.0807701,
     $-0.781417/

C B1 HOLDS HIDDEN BIASES

      DATA (B1(I), I=1,HID)/
     $ -9.92116,-10.3103,-17.2536,  -5.26287, 17.7729,-20.4812,
     $ -4.80869,-11.5222,  0.592880,-4.89773,-17.3294, -7.74136/

C B2 HOLDS OUTPUT BIAS

      DATA (B2(I), I=1,OUT)/-0.882873,-0.0120802,-3.19400,1.00314/

C A(OUT), B(OUT) HOLD TRANSFORMATION COEFFICIENTS

      DATA (A(I), I=1,OUT)/18.1286,31.8210,0.198863,37.1250/
      DATA (B(I), I=1,OUT)/13.7100,32.0980,0.198863,-5.82500/

C INITIALIZE

      O1 = X

C START NEURAL NETWORK

C  - INITIALIZE X2

      DO I = 1,HID
         X2(I) = 0.
         DO J = 1,IN
            X2(I) = X2(I) + (O1(J) * W1(J,I))
         END DO
         X2(I) = X2(I) + B1(I)
         O2(I) = TANH(X2(I))
      END DO

C - INITIALIZE X3

      DO K = 1,OUT
         X3(K) = 0.
         DO J = 1,HID
            X3(K) = X3(K) + (W2(J,K) * O2(J))
         END DO

         X3(K) = X3(K) + B2(K)

C --- CALCULATE O3

         O3(K) = TANH(X3(K))
         Y(K) = (A(K) * O3(K)) + B(K)
      END DO

      RETURN
      END
C> @brief Calc. wspd from neural net 2 algorithm
C> @author V. Krasnopolsky @date 1996-05-07

C> Calculates a single neural network output for wind speed.
C> the network was trained on the whole data set without any
C> separation into subsets. It gives rms = 1.64 m/s for training set
C> and 1.65 m/s for testing set. This is an improved version of the
C> earlier neural network 1 algorithm.
C>
C> ### Program History Log:
C> Date | Programmer | Comment
C> -----|------------|--------
C> 1994-03-20 | V. Krasnopolsky | Initial.
C> 1995-05-07 | V. Krasnopolsky | Replaced with neural net 2 algorithm.
C>
C> @param[in] X 5-Word array containing brightness temperature in the
C> order: t19v (word 1), t22v (word 2), t37v (word 3),
C> t37h (word 4), t85v (word 5) (all in kelvin)
C> @return XX Wind speed (meters/second)
C>
C> @remark Function, no longer called by this program. It is here
C> simply to save neural net 2 algorithm for possible later use
C> (has been replaced by neural net 3 algorithm, see subr. risc02
C> and misc10).
C>
C> @author V. Krasnopolsky @date 1996-05-07
      FUNCTION RISC02xx(X)
      INTEGER  HID
C IN IS THE NUMBER OF B. TEMP. CHNLS, HID IS THE NUMBER OF HIDDEN NODES
      PARAMETER (IN =5, HID =2)
      DIMENSION  X(IN),W1(IN,HID),W2(HID),B1(HID),O1(IN),X2(HID),O2(HID)

      SAVE

C W1 HOLDS INPUT WEIGHTS
      DATA ((W1(I,J),J=1,HID),I=1,IN)/
     $ 4.402388E-02, 2.648334E-02, 6.361322E-04,-1.766535E-02,
     $ 7.876555E-03,-7.387260E-02,-2.656543E-03, 2.957161E-02,
     $-1.181134E-02, 4.520317E-03/
C W2 HOLDS HIDDEN WEIGHTS
      DATA (W2(I),I=1,HID)/8.705661E-01,1.430968/
C B1 HOLDS HIDDEN BIASES
      DATA (B1(I),I=1,HID)/-6.436114,8.799655/
C B2 HOLDS OUTPUT BIAS
C AY AND BY HOLD OUTPUT TRANSFORMATION COEFFICIENTS
      DATA  B2/-0.736255/,AY/16.7833/,BY/11.08/
      O1 = X
C INITIALIZE
      X3 = 0.
      DO I = 1, HID
         O2(I) = 0.
         X2(I) = 0.
         DO J = 1,IN
            X2(I) = X2(I) + (O1(J) * W1(J,I))
         END DO
         X2(I) = X2(I) + B1(I)
         O2(I) = TANH(X2(I))
         X3 = X3 + (O2(I)* W2(I))
      END DO
      X3 = X3 + B2
      O3 = TANH(X3)
      RISC02xx = (AY * O3) + BY
      RISC02xx = MAX(RISC02xx,0.0)
C BIAS CORRECTION
      BIAS = 0.5 + 0.004*((RISC02xx-10.)**3)*(1.-EXP(-0.5*RISC02xx))
      RISC02xx = RISC02xx + BIAS
      RETURN
      END
C> @brief Calc. w.spd from b temp.- goodberlet alg.
C> @author W. Gemmill @date 1994-08-15

C> Calculates a single goodberlet output for wind speed.
C> This is a linear regression algorithm from 1989.
C>
C> ### Program History Log:
C> Date | Programmer | Comment
C> -----|------------|--------
C> 1994-08-15 | W. Gemmill | Initial.
C>
C> @param[in] X 4-word array containing brightness temperature in the
C> order: t19v (word 1), t22v (word 2), t37v (word 3),
C> t37h (word 4) (all in kelvin)
C> @return XX Wind speed (meters/second)
C>
C> @remark Function, called by subroutine misc01.
C>
C> @author W. Gemmill @date 1994-08-15
      FUNCTION RISC03(X)
      DIMENSION  X(4)

      SAVE

      RISC03 = 147.90 + (1.0969 * X(1)) - (0.4555 * X(2)) -
     $ (1.76 * X(3)) + (0.7860 * X(4))
      RETURN
      END
C> @brief Returns land/sea tag for given lat/lon
C> @author Dennis Keyser @date 1995-01-04

C> Finds and returns the low resolution land/sea tag nearest
C> to the requested latitude and longitude.
C>
C> ### Program History Log:
C> Date | Programmer | Comment
C> -----|------------|--------
C> 1978-01-20 | J. K. Kalinowski (S11213) | Original author
C> 1978-10-03 | J. K. Kalinowski (S1214) | Changes unknown
C> 1985-03-01 | N. Digirolamo (SSAI) | Conversion to vs fortran
C> 1995-01-04 | Dennis Keyser | Incorporated into w3miscan and streamlined code
C>
C> @param[in] INLSF Unit number of direct access nesdis land/sea file
C> @param[in] BLAT Latitude (whole degrees: range is 0. to +90. north,
C> 0. to -90. south)
C> @param[in] BLNG Longitude (whole degrees: range is 0. to +179.99 east,
C> 0. to -180. west)
C> @param[out] LSTAG Land/sea tag {=0 - sea; =1 - land; =2 - coastal
C> interface (higher resolution tags are available);
C> =3 - coastal interface (no higher resolution tags
C> exist)}
C>
C> @remark Called by subroutine w3miscan.
C>
C> @author Dennis Keyser @date 1995-01-04
      SUBROUTINE MISC04(INLSF,BLAT,BLNG,LSTAG)
      CHARACTER*1  LPUT
      REAL  RGS(3)
C LPUT CONTAINS A REGION OF LAND/SEA TAGS (RETURNED FROM CALL TO MISC05)
      COMMON/MISCDD/LPUT(21960)

      SAVE

C RGS IS ARRAY HOLDING SOUTHERN BOUNDARIES OF EACH LAND/SEA TAG REGION
      DATA  RGS/-85.,-30.,25./,NUMRGL/0/,IFLAG/0/
C INITIALIZE LAND/SEA TAG AS 1 (OVER LAND)
      LSTAG = 1
C FIND NEAREST POINT OF A HALF-DEGREE (LAT,LONG) GRID
C ..ALAT IS LATITUDE TO THE NEAREST HALF-DEGREE
      ALAT = INT((BLAT+SIGN(.25,BLAT))/.5) * .5
C ..ALNG IS LONGITUDE TO THE NEAREST HALF-DEGREE
      ALNG = INT((BLNG+SIGN(.25,BLNG))/.5) * .5
      IF(NINT(ALNG*10.).EQ.1800)  ALNG = -180.
C IDENTIFY DATABASE REGION IN WHICH TO FIND CORRECT TAG
      NUMRGN = 1
      IF(IABS(NINT(ALAT*10)).GT.850)  THEN
         RETURN
      ELSE  IF(NINT(ALAT*10).GT.275)  THEN
         NUMRGN = 3
      ELSE  IF(NINT(ALAT*10.).GE.-275)  THEN
         NUMRGN = 2
      END IF
      IF(NUMRGN.NE.NUMRGL.OR.IFLAG.EQ.1)  THEN
         NUMRGL = NUMRGN
         CALL MISC05(INLSF,NUMRGN,*99)
      END IF
C FIND THE BYTE & BIT PAIR W/I DATA BASE REGION CONTAINING DESIRED TAG
      TRM1  = ((ALAT - RGS(NUMRGN)) * 1440.) + 360.
      LSTPT = TRM1 + (2. * ALNG)
C ..NBYTE IS THE BYTE IN LPUT CONTAINING THE TAG
      NBYTE = (180 * 8) + (LSTPT/4 * 8)
      NSHFT = (2 * (MOD(LSTPT,4) + 1)) - 2
C PULL OUT THE TAG
      CALL GBYTE(LPUT,LSTAG,NBYTE+NSHFT,2)
      IFLAG = 0
      RETURN
C-----------------------------------------------------------------------
   99 CONTINUE
C COME HERE IF LAND/SEA TAG COULD NOT BE RETURNED FROM SUBR. W3MISCAN
C  (IN THIS CASE IT WILL REMAIN SET TO 1 INDICATING OVER LAND)
      IFLAG = 1
      RETURN
C-----------------------------------------------------------------------
      END
C> @brief Reads 2 records from land/sea tag database
C> @author Dennis Keyser @date 195-01-04

C> Reads two records from a low resolution land/sea database and stores into common.
C>
C> ### Program History Log:
C> Date | Programmer | Comment
C> -----|------------|--------
C> 1978-01-20 | J. K. Kalinowski (S11213) | Original author
C> 1995-01-04 | Dennis Keyser | Incorporated into w3miscan and
C> streamlined code; modified to be machine independent thru
C> use of standard fortran direct access read
C>
C> @param[in] INLSF Unit number of direct access nesdis land/sea file
C> @param[in] NUMRGN The region (1,2 or 3) of the database to be accessed
C> (dependent on latitude band)
C>
C> @remark Called by subroutne misc04.
C>
C> @author Dennis Keyser @date 195-01-04
      SUBROUTINE MISC05(INLSF,NUMRGN,*)
      CHARACTER*1  LPUT

C LPUT CONTAINS A REGION OF LAND/SEA TAGS (COMPRISED OF 2 RECORDS FROM
C  LAND/SEA FILE) -- 180 BYTES OF DOCUMENTATION FOLLOWED BY 21780 BYTES
C  OF LAND/SEA TAGS

      COMMON/MISCDD/LPUT(21960)

      SAVE

      NREC = (2 * NUMRGN) - 1
      READ(INLSF,REC=NREC,ERR=10)  (LPUT(II),II=1,10980)
      NREC = NREC + 1
      READ(INLSF,REC=NREC,ERR=10)  (LPUT(II),II=10981,21960)
      RETURN
C-----------------------------------------------------------------------
   10 CONTINUE
C ERROR READING IN A RECORD FROM LAND-SEA FILE -- RETURN (TAG WILL BE
C  SET TO 1 MEANING OVER LAND IN THIS CASE)
      PRINT 1000, NREC,INLSF
 1000 FORMAT(' ##W3MISCAN/MISC05: ERROR READING IN LAND-SEA DATA ',
     $ 'RECORD',I7,' IN UNIT ',I2,' -- SET TAG TO LAND'/)
      RETURN 1
C-----------------------------------------------------------------------
      END
C> @brief Reads in nh and sh 1-deg. sea-sfc temps.
C> @author Dennis Keyser @date 200-02-18

C> Reads in global sea-surface temperature field on a one-degree grid from grib file.
C>
C> ### Program History Log:
C> Date | Programmer | Comment
C> -----|------------|--------
C> ????-??-?? | W. Gemmill (NP21) | Original author
C> 1995-01-04 | Dennis Keyser | Incorporated into w3miscan and
C> streamlined code; converted sst input file from vsam/on84 to
C> grib to allow code compile and run on the cray machines.
C> 2000-02-18 | Dennis Keyser | Modified to call w3lib routine "getgb",
C> this allows code to compile and run properly on ibm-sp
C>
C> @param[in] INGBI Unit number of grib index file for grib file
C> containing global 1-degree sea-surface temp field
C> @param[in] INGBD Unit number of grib file containing global 1-degree
C> sea-surface temp field
C> @param[in] IDAT1 Requested earliest year(yyyy), month, day, hour, min
C> @param[in] IDAT2 Requested latest   year(yyyy), month, day, hour, min
C>
C> @remark Called by subroutine w3miscan.
C>
C> @author Dennis Keyser @date 200-02-18
      SUBROUTINE MISC06(INGBI,INGBD,IDAT1,IDAT2,*,*,*,*)
      PARAMETER (MAXPTS=360*180)
      LOGICAL*1  LBMS(360,180)
      INTEGER  KPDS(200),KGDS(200),LPDS(200),LGDS(200),IDAT1(5),
     $ IDAT2(5),JDAT1(8),JDAT2(8),KDAT(8),LDAT(8),MDATE(8)
      REAL  RINC(5)
      CHARACTER*11 ENVVAR
      CHARACTER*80 FILEB,FILEI
      COMMON/MISCCC/SSTDAT(360,180)

      SAVE

      ENVVAR='XLFUNIT_   '
      WRITE(ENVVAR(9:10),FMT='(I2)') INGBD
      CALL GETENV(ENVVAR,FILEB)
      ENVVAR='XLFUNIT_   '
      WRITE(ENVVAR(9:10),FMT='(I2)') INGBI
      CALL GETENV(ENVVAR,FILEI)
      CALL BAOPENR(INGBD,FILEB,IRET1)
ccccc PRINT *,'SAGT: ',INGBD,FILEB,IRET1
      CALL BAOPENR(INGBI,FILEI,IRET2)
ccccc PRINT *,'SAGT: ',INGBI,FILEI,IRET2

      KPDS = -1
      KGDS = -1
      N = -1
      KPDS(5)  = 11
      KPDS(6)  =  1
      KPDS(7)  =  0
      KPDS(8)  = -1
      KPDS(9)  = -1
      KPDS(10) = -1
      PRINT 68, INGBD
   68 FORMAT(//4X,'** W3MISCAN/MISC06: READ IN "CURRENT" SEA-SURFACE ',
     $ 'TEMPERATURE DATA FROM GRIB MESSAGE IN UNIT',I3)
      CALL GETGB(INGBD,INGBI,MAXPTS,0,KPDS,KGDS,KF,K,LPDS,LGDS,LBMS,
     $ SSTDAT,IRET)
C.......................................................................
C ABNORMAL RETURN IF PROBLEM WITH SST IN GRIB FILE
      IF(IRET.NE.0)  THEN
        WRITE(6,*)' ERROR READING SST USING GETGB.  IRET = ',IRET
        IF (IRET.EQ.96) RETURN 1
        IF (IRET.EQ.97) RETURN 3
        IF (IRET.EQ.98) RETURN 3
        IF (IRET.EQ.99) RETURN 3
        RETURN 4
      ENDIF
C.......................................................................
C READ SUCCESSFUL
      JDAT1 = 0
      JDAT2 = 0
      JDAT1(1:3) = IDAT1(1:3)
      JDAT1(5:6) = IDAT1(4:5)
      JDAT2(1:3) = IDAT2(1:3)
      JDAT2(5:6) = IDAT2(4:5)
      MDATE = 0
      MDATE(1) = ((LPDS(21) - 1) * 100) + LPDS(8)
      MDATE(2:3) = LPDS(9:10)
      MDATE(5:6) = LPDS(11:12)
      CALL W3MOVDAT((/-7.,0.,0.,0.,0./),JDAT1,KDAT)
      CALL W3MOVDAT((/ 7.,0.,0.,0.,0./),JDAT2,LDAT)
cppppp
      print *, '** W3MISCAN/MISCO6: SST GRIB FILE MUST HAVE DATE ',
     $ 'BETWEEN ',(kdat(iii),iii=1,3),(kdat(iii),iii=5,6),' AND ',
     $ (ldat(iii),iii=1,3),(ldat(iii),iii=5,6)
      print *, '                    RETURNED FROM GRIB FILE IS YEAR ',
     $ 'OF CENTURY = ',lpds(8),' AND CENTURY = ',lpds(21)
      print *, '                    CALULATED 4-DIGIT YEAR IS = ',
     $ mdate(1)
cppppp
      CALL W3DIFDAT(KDAT,MDATE,3,RINC)
      KMIN = RINC(3)
      CALL W3DIFDAT(LDAT,MDATE,3,RINC)
      LMIN = RINC(3)
      IF(KMIN.GT.0.OR.LMIN.LT.0)  THEN
C.......................................................................
C COME HERE IF SST GRIB MSG HAS A DATE THAT IS EITHER: 1) MORE THAN 7-
C  DAYS PRIOR TO THE EARLIEST REQ. DATE (INPUT ARG. "IDAT1" TO W3MISCAN)
C  OR 2) MORE THAN 7-DAYS AFTER THE LATEST REQ. DATE (INPUT ARG.
C  "IDAT2" TO W3MISCAN)
         PRINT 27, (MDATE(III),III=1,3),(MDATE(III),III=5,6)
   27    FORMAT(/' ##W3MISCAN/MISC06: SST GRIB MSG HAS DATE:',I5,4I3,
     $    ' - AS A RESULT......')
         RETURN 2
C.......................................................................
      END IF
      PRINT 60, (MDATE(III),III=1,3),(MDATE(III),III=5,6)
   60 FORMAT(/4X,'** W3MISCAN/MISC06: SEA-SFC TEMP SUCCESSFULLY READ ',
     $ 'IN FROM GRIB FILE, DATE IS: ',I5,4I3/)
      RETURN

      CALL BACLOSE(INGBI,IRET)
      CALL BACLOSE(INGBD,IRET)

      END
C.......................................................................
C.......................................................................
      SUBROUTINE BORT(STR)

      CHARACTER*(*) STR

      CALL ERRWRT(' ')
      CALL ERRWRT('***********BUFR ARCHIVE LIBRARY ABORT**************')
      CALL ERRWRT(STR)
      CALL ERRWRT('***********BUFR ARCHIVE LIBRARY ABORT**************')
      CALL ERRWRT(' ')
      print*,str

      call tracebackqq()

      CALL BORT_EXIT

      END

